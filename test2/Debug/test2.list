
test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005114  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  080052a8  080052a8  000152a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053b0  080053b0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080053b0  080053b0  000153b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053b8  080053b8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080053b8  080053b8  000153b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053c0  080053c0  000153c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080053c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003fc  20000010  080053d0  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000040c  080053d0  0002040c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014455  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b16  00000000  00000000  00034491  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b0  00000000  00000000  00036fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010e0  00000000  00000000  00038158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a8be  00000000  00000000  00039238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012467  00000000  00000000  00053af6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d945  00000000  00000000  00065f5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001038a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ad0  00000000  00000000  001038f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08005290 	.word	0x08005290

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	08005290 	.word	0x08005290

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <_ZN22DualVNH5019MotorShieldC1Ev>:
#include "DualVNH5019MotorShield.h"

// Constructors ////////////////////////////////////////////////////////////////

DualVNH5019MotorShield::DualVNH5019MotorShield()
 80004cc:	b590      	push	{r4, r7, lr}
 80004ce:	b095      	sub	sp, #84	; 0x54
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	64f8      	str	r0, [r7, #76]	; 0x4c
{
	_IN1A.pin = D4_Pin;
 80004d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80004d6:	2220      	movs	r2, #32
 80004d8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	_IN1A.port = D4_GPIO_Port;
 80004dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80004de:	4a1c      	ldr	r2, [pc, #112]	; (8000550 <_ZN22DualVNH5019MotorShieldC1Ev+0x84>)
 80004e0:	64da      	str	r2, [r3, #76]	; 0x4c
	_IN1B.pin = D2_Pin;
 80004e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80004e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80004e8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	_IN1B.port = D2_GPIO_Port;
 80004ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80004ee:	4a19      	ldr	r2, [pc, #100]	; (8000554 <_ZN22DualVNH5019MotorShieldC1Ev+0x88>)
 80004f0:	655a      	str	r2, [r3, #84]	; 0x54
	_IN2A.pin = D7_Pin;
 80004f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80004f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004f8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
	_IN2A.port = D7_GPIO_Port;
 80004fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80004fe:	4a15      	ldr	r2, [pc, #84]	; (8000554 <_ZN22DualVNH5019MotorShieldC1Ev+0x88>)
 8000500:	65da      	str	r2, [r3, #92]	; 0x5c
	_IN2B.pin = D8_Pin;
 8000502:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000504:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000508:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	_IN2B.port = D8_GPIO_Port;
 800050c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800050e:	4a11      	ldr	r2, [pc, #68]	; (8000554 <_ZN22DualVNH5019MotorShieldC1Ev+0x88>)
 8000510:	665a      	str	r2, [r3, #100]	; 0x64



	_PWM1 = &TIM3->CCR2; // TODO remove dead code
 8000512:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000514:	4a10      	ldr	r2, [pc, #64]	; (8000558 <_ZN22DualVNH5019MotorShieldC1Ev+0x8c>)
 8000516:	669a      	str	r2, [r3, #104]	; 0x68
	_PWM2 = &TIM4->CCR1; //
 8000518:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800051a:	4a10      	ldr	r2, [pc, #64]	; (800055c <_ZN22DualVNH5019MotorShieldC1Ev+0x90>)
 800051c:	66da      	str	r2, [r3, #108]	; 0x6c
	_FAULT_AND_ENABLE_1.port = D6_GPIO_Port; // needs pull up to enable the device (already done by the cpu config)
	_FAULT_AND_ENABLE_2.pin = D12_Pin;       // device will pull this down when fault occurs
	_FAULT_AND_ENABLE_2.port = D12_GPIO_Port;

*/
	_CURRENT_SENSE_CHANNEL_1 = 0;// current sense use an analog read to read the current
 800051e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000520:	2200      	movs	r2, #0
 8000522:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	_CURRENT_SENSE_CHANNEL_2 = 1;
 8000526:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000528:	2201      	movs	r2, #1
 800052a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71


	_MOTOR_ADC = get_adc();
 800052e:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8000530:	463b      	mov	r3, r7
 8000532:	4618      	mov	r0, r3
 8000534:	f001 f842 	bl	80015bc <get_adc>
 8000538:	4620      	mov	r0, r4
 800053a:	463b      	mov	r3, r7
 800053c:	2248      	movs	r2, #72	; 0x48
 800053e:	4619      	mov	r1, r3
 8000540:	f004 fe90 	bl	8005264 <memcpy>

}
 8000544:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000546:	4618      	mov	r0, r3
 8000548:	3754      	adds	r7, #84	; 0x54
 800054a:	46bd      	mov	sp, r7
 800054c:	bd90      	pop	{r4, r7, pc}
 800054e:	bf00      	nop
 8000550:	40020400 	.word	0x40020400
 8000554:	40020000 	.word	0x40020000
 8000558:	40000438 	.word	0x40000438
 800055c:	40000834 	.word	0x40000834

08000560 <_ZN22DualVNH5019MotorShield10setM1SpeedEi>:
*/

}
// Set speed for motor 1, speed is a number betwenn -400 and 400
void DualVNH5019MotorShield::setM1Speed(int speed)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
 8000568:	6039      	str	r1, [r7, #0]
	unsigned char reverse = 0;
 800056a:	2300      	movs	r3, #0
 800056c:	73fb      	strb	r3, [r7, #15]

	if (speed < 0)
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	2b00      	cmp	r3, #0
 8000572:	da04      	bge.n	800057e <_ZN22DualVNH5019MotorShield10setM1SpeedEi+0x1e>
	{
		speed = -speed;  // Make speed a positive quantity
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	425b      	negs	r3, r3
 8000578:	603b      	str	r3, [r7, #0]
		reverse = true;  // Reverse the direction
 800057a:	2301      	movs	r3, #1
 800057c:	73fb      	strb	r3, [r7, #15]
	}
	if (speed > 400)  // Max PWM dutycycle
 800057e:	683b      	ldr	r3, [r7, #0]
 8000580:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000584:	dd02      	ble.n	800058c <_ZN22DualVNH5019MotorShield10setM1SpeedEi+0x2c>
		speed = 400;
 8000586:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800058a:	603b      	str	r3, [r7, #0]


	//*_PWM1 = (int)((float)speed * PWM_MULT_FACTOR);
	set_pwm_m1((int)((float)speed * PWM_MULT_FACTOR));
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	ee07 3a90 	vmov	s15, r3
 8000592:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000596:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800059a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800059e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80005a2:	ee17 3a90 	vmov	r3, s15
 80005a6:	b29b      	uxth	r3, r3
 80005a8:	4618      	mov	r0, r3
 80005aa:	f001 f819 	bl	80015e0 <set_pwm_m1>
	//analogWrite(_PWM1,speed * 51 / 80); // map 400 to 255


	if (speed == 0)
 80005ae:	683b      	ldr	r3, [r7, #0]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d112      	bne.n	80005da <_ZN22DualVNH5019MotorShield10setM1SpeedEi+0x7a>
	{
		HAL_GPIO_WritePin(_IN1A.port, _IN1A.pin, GPIO_PIN_RESET); // Make the motor coast no matter
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80005be:	2200      	movs	r2, #0
 80005c0:	4619      	mov	r1, r3
 80005c2:	f002 fbad 	bl	8002d20 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(_IN1B.port, _IN1B.pin, GPIO_PIN_RESET); // which direction it is spinning.
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80005d0:	2200      	movs	r2, #0
 80005d2:	4619      	mov	r1, r3
 80005d4:	f002 fba4 	bl	8002d20 <HAL_GPIO_WritePin>
	else
	{
		HAL_GPIO_WritePin(_IN1A.port, _IN1A.pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(_IN1B.port, _IN1B.pin, GPIO_PIN_RESET);
	}
}
 80005d8:	e027      	b.n	800062a <_ZN22DualVNH5019MotorShield10setM1SpeedEi+0xca>
	else if (reverse)
 80005da:	7bfb      	ldrb	r3, [r7, #15]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d012      	beq.n	8000606 <_ZN22DualVNH5019MotorShield10setM1SpeedEi+0xa6>
		HAL_GPIO_WritePin(_IN1A.port, _IN1A.pin, GPIO_PIN_RESET);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80005ea:	2200      	movs	r2, #0
 80005ec:	4619      	mov	r1, r3
 80005ee:	f002 fb97 	bl	8002d20 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(_IN1B.port, _IN1B.pin, GPIO_PIN_SET);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80005fc:	2201      	movs	r2, #1
 80005fe:	4619      	mov	r1, r3
 8000600:	f002 fb8e 	bl	8002d20 <HAL_GPIO_WritePin>
}
 8000604:	e011      	b.n	800062a <_ZN22DualVNH5019MotorShield10setM1SpeedEi+0xca>
		HAL_GPIO_WritePin(_IN1A.port, _IN1A.pin, GPIO_PIN_SET);
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8000610:	2201      	movs	r2, #1
 8000612:	4619      	mov	r1, r3
 8000614:	f002 fb84 	bl	8002d20 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(_IN1B.port, _IN1B.pin, GPIO_PIN_RESET);
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8000622:	2200      	movs	r2, #0
 8000624:	4619      	mov	r1, r3
 8000626:	f002 fb7b 	bl	8002d20 <HAL_GPIO_WritePin>
}
 800062a:	bf00      	nop
 800062c:	3710      	adds	r7, #16
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}

08000632 <_ZN22DualVNH5019MotorShield10setM2SpeedEi>:

// Set speed for motor 2, speed is a number betwenn -400 and 400
void DualVNH5019MotorShield::setM2Speed(int speed)
{
 8000632:	b580      	push	{r7, lr}
 8000634:	b084      	sub	sp, #16
 8000636:	af00      	add	r7, sp, #0
 8000638:	6078      	str	r0, [r7, #4]
 800063a:	6039      	str	r1, [r7, #0]
	unsigned char reverse = 0;
 800063c:	2300      	movs	r3, #0
 800063e:	73fb      	strb	r3, [r7, #15]

	if (speed < 0)
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	2b00      	cmp	r3, #0
 8000644:	da04      	bge.n	8000650 <_ZN22DualVNH5019MotorShield10setM2SpeedEi+0x1e>
	{
		speed = -speed;  // make speed a positive quantity
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	425b      	negs	r3, r3
 800064a:	603b      	str	r3, [r7, #0]
		reverse = true;  // Reverse the direction
 800064c:	2301      	movs	r3, #1
 800064e:	73fb      	strb	r3, [r7, #15]
	}
	if (speed > 400)  // Max;
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000656:	dd02      	ble.n	800065e <_ZN22DualVNH5019MotorShield10setM2SpeedEi+0x2c>
		speed = 400;
 8000658:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800065c:	603b      	str	r3, [r7, #0]

	// Sets pwm register to the new value
	//*_PWM2 = (int)((float)speed * PWM_MULT_FACTOR);
	set_pwm_m2((int)((float)speed * PWM_MULT_FACTOR));
 800065e:	683b      	ldr	r3, [r7, #0]
 8000660:	ee07 3a90 	vmov	s15, r3
 8000664:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000668:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800066c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000670:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000674:	ee17 3a90 	vmov	r3, s15
 8000678:	b29b      	uxth	r3, r3
 800067a:	4618      	mov	r0, r3
 800067c:	f000 ffd2 	bl	8001624 <set_pwm_m2>

	if (speed == 0)
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d112      	bne.n	80006ac <_ZN22DualVNH5019MotorShield10setM2SpeedEi+0x7a>
	{
		HAL_GPIO_WritePin(_IN2A.port, _IN2A.pin, GPIO_PIN_RESET); // Make the motor coast no matter
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8000690:	2200      	movs	r2, #0
 8000692:	4619      	mov	r1, r3
 8000694:	f002 fb44 	bl	8002d20 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(_IN2B.port, _IN2B.pin, GPIO_PIN_RESET); // which direction it is spinning.
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80006a2:	2200      	movs	r2, #0
 80006a4:	4619      	mov	r1, r3
 80006a6:	f002 fb3b 	bl	8002d20 <HAL_GPIO_WritePin>
	else
	{
		HAL_GPIO_WritePin(_IN2A.port, _IN2A.pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(_IN2B.port, _IN2B.pin, GPIO_PIN_RESET);
	}
}
 80006aa:	e027      	b.n	80006fc <_ZN22DualVNH5019MotorShield10setM2SpeedEi+0xca>
	else if (reverse)
 80006ac:	7bfb      	ldrb	r3, [r7, #15]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d012      	beq.n	80006d8 <_ZN22DualVNH5019MotorShield10setM2SpeedEi+0xa6>
		HAL_GPIO_WritePin(_IN2A.port, _IN2A.pin, GPIO_PIN_RESET);
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80006bc:	2200      	movs	r2, #0
 80006be:	4619      	mov	r1, r3
 80006c0:	f002 fb2e 	bl	8002d20 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(_IN2B.port, _IN2B.pin, GPIO_PIN_SET);
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	6e58      	ldr	r0, [r3, #100]	; 0x64
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80006ce:	2201      	movs	r2, #1
 80006d0:	4619      	mov	r1, r3
 80006d2:	f002 fb25 	bl	8002d20 <HAL_GPIO_WritePin>
}
 80006d6:	e011      	b.n	80006fc <_ZN22DualVNH5019MotorShield10setM2SpeedEi+0xca>
		HAL_GPIO_WritePin(_IN2A.port, _IN2A.pin, GPIO_PIN_SET);
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80006e2:	2201      	movs	r2, #1
 80006e4:	4619      	mov	r1, r3
 80006e6:	f002 fb1b 	bl	8002d20 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(_IN2B.port, _IN2B.pin, GPIO_PIN_RESET);
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	6e58      	ldr	r0, [r3, #100]	; 0x64
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80006f4:	2200      	movs	r2, #0
 80006f6:	4619      	mov	r1, r3
 80006f8:	f002 fb12 	bl	8002d20 <HAL_GPIO_WritePin>
}
 80006fc:	bf00      	nop
 80006fe:	3710      	adds	r7, #16
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}

08000704 <_ZN22DualVNH5019MotorShield21getM1CurrentMilliampsEv>:
	setM2Brake(m2Brake);
}

// Return motor 1 current value in milliamps.
unsigned int DualVNH5019MotorShield::getM1CurrentMilliamps()
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
	// 5V / 1024 ADC counts / 144 mV per A = 34 mA per count
	HAL_ADC_Start(&_MOTOR_ADC);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	4618      	mov	r0, r3
 8000710:	f001 fc5c 	bl	8001fcc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&_MOTOR_ADC, _CURRENT_SENSE_CHANNEL_1);
 8000714:	687a      	ldr	r2, [r7, #4]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800071c:	4619      	mov	r1, r3
 800071e:	4610      	mov	r0, r2
 8000720:	f001 fd08 	bl	8002134 <HAL_ADC_PollForConversion>
	return HAL_ADC_GetValue(&_MOTOR_ADC) * 34;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	4618      	mov	r0, r3
 8000728:	f001 fd8f 	bl	800224a <HAL_ADC_GetValue>
 800072c:	4602      	mov	r2, r0
 800072e:	4613      	mov	r3, r2
 8000730:	011b      	lsls	r3, r3, #4
 8000732:	4413      	add	r3, r2
 8000734:	005b      	lsls	r3, r3, #1
}
 8000736:	4618      	mov	r0, r3
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}

0800073e <_ZN22DualVNH5019MotorShield21getM2CurrentMilliampsEv>:

// Return motor 2 current value in milliamps.
unsigned int DualVNH5019MotorShield::getM2CurrentMilliamps()
{
 800073e:	b580      	push	{r7, lr}
 8000740:	b082      	sub	sp, #8
 8000742:	af00      	add	r7, sp, #0
 8000744:	6078      	str	r0, [r7, #4]
	// 5V / 1024 ADC counts / 144 mV per A = 34 mA per count
	HAL_ADC_Start(&_MOTOR_ADC);
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	4618      	mov	r0, r3
 800074a:	f001 fc3f 	bl	8001fcc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&_MOTOR_ADC, _CURRENT_SENSE_CHANNEL_2);
 800074e:	687a      	ldr	r2, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8000756:	4619      	mov	r1, r3
 8000758:	4610      	mov	r0, r2
 800075a:	f001 fceb 	bl	8002134 <HAL_ADC_PollForConversion>
	return HAL_ADC_GetValue(&_MOTOR_ADC) * 34;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	4618      	mov	r0, r3
 8000762:	f001 fd72 	bl	800224a <HAL_ADC_GetValue>
 8000766:	4602      	mov	r2, r0
 8000768:	4613      	mov	r3, r2
 800076a:	011b      	lsls	r3, r3, #4
 800076c:	4413      	add	r3, r2
 800076e:	005b      	lsls	r3, r3, #1
}
 8000770:	4618      	mov	r0, r3
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}

08000778 <startSPI>:
#define SPI_CAN                 &hspi2
#endif

#define SPI_TIMEOUT             10

void startSPI() {
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
#ifdef TEST_SHIELD
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_RESET);
#else
	HAL_GPIO_WritePin(CS2_GPIO_Port, CS2_Pin, GPIO_PIN_RESET);
 800077c:	2200      	movs	r2, #0
 800077e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000782:	4802      	ldr	r0, [pc, #8]	; (800078c <startSPI+0x14>)
 8000784:	f002 facc 	bl	8002d20 <HAL_GPIO_WritePin>
#endif
}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40020400 	.word	0x40020400

08000790 <endSPI>:

void endSPI() {
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
#ifdef TEST_SHIELD
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
#else
	HAL_GPIO_WritePin(CS2_GPIO_Port, CS2_Pin, GPIO_PIN_SET);
 8000794:	2201      	movs	r2, #1
 8000796:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800079a:	4802      	ldr	r0, [pc, #8]	; (80007a4 <endSPI+0x14>)
 800079c:	f002 fac0 	bl	8002d20 <HAL_GPIO_WritePin>
#endif
}
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40020400 	.word	0x40020400

080007a8 <SPI_transfer>:

uint8_t SPI_transfer(uint8_t txByte){
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b086      	sub	sp, #24
 80007ac:	af02      	add	r7, sp, #8
 80007ae:	4603      	mov	r3, r0
 80007b0:	71fb      	strb	r3, [r7, #7]
	uint8_t rxByte;
	HAL_SPI_TransmitReceive(SPI_CAN, &txByte, &rxByte, 1, SPI_TIMEOUT);
 80007b2:	f107 020f 	add.w	r2, r7, #15
 80007b6:	1df9      	adds	r1, r7, #7
 80007b8:	230a      	movs	r3, #10
 80007ba:	9300      	str	r3, [sp, #0]
 80007bc:	2301      	movs	r3, #1
 80007be:	4804      	ldr	r0, [pc, #16]	; (80007d0 <SPI_transfer+0x28>)
 80007c0:	f002 ffe9 	bl	8003796 <HAL_SPI_TransmitReceive>
	return rxByte;
 80007c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3710      	adds	r7, #16
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20000264 	.word	0x20000264

080007d4 <setRegister>:

void setRegister(uint8_t reg, uint8_t value)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	460a      	mov	r2, r1
 80007de:	71fb      	strb	r3, [r7, #7]
 80007e0:	4613      	mov	r3, r2
 80007e2:	71bb      	strb	r3, [r7, #6]
    startSPI();
 80007e4:	f7ff ffc8 	bl	8000778 <startSPI>
    SPI_transfer(INSTRUCTION_WRITE);
 80007e8:	2002      	movs	r0, #2
 80007ea:	f7ff ffdd 	bl	80007a8 <SPI_transfer>
    SPI_transfer(reg);
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff ffd9 	bl	80007a8 <SPI_transfer>
    SPI_transfer(value);
 80007f6:	79bb      	ldrb	r3, [r7, #6]
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff ffd5 	bl	80007a8 <SPI_transfer>
    endSPI();
 80007fe:	f7ff ffc7 	bl	8000790 <endSPI>
}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}

0800080a <setRegisters>:

void setRegisters(uint8_t reg, uint8_t values[], uint8_t n)
{
 800080a:	b580      	push	{r7, lr}
 800080c:	b084      	sub	sp, #16
 800080e:	af00      	add	r7, sp, #0
 8000810:	4603      	mov	r3, r0
 8000812:	6039      	str	r1, [r7, #0]
 8000814:	71fb      	strb	r3, [r7, #7]
 8000816:	4613      	mov	r3, r2
 8000818:	71bb      	strb	r3, [r7, #6]
    startSPI();
 800081a:	f7ff ffad 	bl	8000778 <startSPI>
    SPI_transfer(INSTRUCTION_WRITE);
 800081e:	2002      	movs	r0, #2
 8000820:	f7ff ffc2 	bl	80007a8 <SPI_transfer>
    SPI_transfer(reg);
 8000824:	79fb      	ldrb	r3, [r7, #7]
 8000826:	4618      	mov	r0, r3
 8000828:	f7ff ffbe 	bl	80007a8 <SPI_transfer>
    for (uint8_t i=0; i<n; i++) {
 800082c:	2300      	movs	r3, #0
 800082e:	73fb      	strb	r3, [r7, #15]
 8000830:	e009      	b.n	8000846 <setRegisters+0x3c>
        SPI_transfer(values[i]);
 8000832:	7bfb      	ldrb	r3, [r7, #15]
 8000834:	683a      	ldr	r2, [r7, #0]
 8000836:	4413      	add	r3, r2
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	4618      	mov	r0, r3
 800083c:	f7ff ffb4 	bl	80007a8 <SPI_transfer>
    for (uint8_t i=0; i<n; i++) {
 8000840:	7bfb      	ldrb	r3, [r7, #15]
 8000842:	3301      	adds	r3, #1
 8000844:	73fb      	strb	r3, [r7, #15]
 8000846:	7bfa      	ldrb	r2, [r7, #15]
 8000848:	79bb      	ldrb	r3, [r7, #6]
 800084a:	429a      	cmp	r2, r3
 800084c:	d3f1      	bcc.n	8000832 <setRegisters+0x28>
    }

  //  HAL_SPI_Transmit(SPI_CAN, values, n, SPI_TIMEOUT);
    endSPI();
 800084e:	f7ff ff9f 	bl	8000790 <endSPI>
}
 8000852:	bf00      	nop
 8000854:	3710      	adds	r7, #16
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <modifyRegister>:
  //  HAL_SPI_Transmit(SPI_CAN, values, n, SPI_TIMEOUT);
    endSPI();
}

void modifyRegister(uint8_t reg, uint8_t mask, uint8_t data)
{
 800085a:	b580      	push	{r7, lr}
 800085c:	b082      	sub	sp, #8
 800085e:	af00      	add	r7, sp, #0
 8000860:	4603      	mov	r3, r0
 8000862:	71fb      	strb	r3, [r7, #7]
 8000864:	460b      	mov	r3, r1
 8000866:	71bb      	strb	r3, [r7, #6]
 8000868:	4613      	mov	r3, r2
 800086a:	717b      	strb	r3, [r7, #5]
    startSPI();
 800086c:	f7ff ff84 	bl	8000778 <startSPI>
    SPI_transfer(INSTRUCTION_BITMOD);
 8000870:	2005      	movs	r0, #5
 8000872:	f7ff ff99 	bl	80007a8 <SPI_transfer>
    SPI_transfer(reg);
 8000876:	79fb      	ldrb	r3, [r7, #7]
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff ff95 	bl	80007a8 <SPI_transfer>
    SPI_transfer(mask);
 800087e:	79bb      	ldrb	r3, [r7, #6]
 8000880:	4618      	mov	r0, r3
 8000882:	f7ff ff91 	bl	80007a8 <SPI_transfer>
    SPI_transfer(data);
 8000886:	797b      	ldrb	r3, [r7, #5]
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff ff8d 	bl	80007a8 <SPI_transfer>
    endSPI();
 800088e:	f7ff ff7f 	bl	8000790 <endSPI>
}
 8000892:	bf00      	nop
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <readRegister>:




uint8_t readRegister(REGISTER reg)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	b084      	sub	sp, #16
 800089e:	af00      	add	r7, sp, #0
 80008a0:	4603      	mov	r3, r0
 80008a2:	71fb      	strb	r3, [r7, #7]
    startSPI();
 80008a4:	f7ff ff68 	bl	8000778 <startSPI>
    SPI_transfer(INSTRUCTION_READ);
 80008a8:	2003      	movs	r0, #3
 80008aa:	f7ff ff7d 	bl	80007a8 <SPI_transfer>
    SPI_transfer(reg);
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	4618      	mov	r0, r3
 80008b2:	f7ff ff79 	bl	80007a8 <SPI_transfer>
    uint8_t ret = SPI_transfer(0x00);
 80008b6:	2000      	movs	r0, #0
 80008b8:	f7ff ff76 	bl	80007a8 <SPI_transfer>
 80008bc:	4603      	mov	r3, r0
 80008be:	73fb      	strb	r3, [r7, #15]
    endSPI();
 80008c0:	f7ff ff66 	bl	8000790 <endSPI>

    return ret;
 80008c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3710      	adds	r7, #16
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <setMode>:
    }
    endSPI();
}

CAN_Error setMode(CANCTRL_REQOP_MODE mode)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	b086      	sub	sp, #24
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	4603      	mov	r3, r0
 80008d6:	71fb      	strb	r3, [r7, #7]

    unsigned long endTime = HAL_GetTick() + 10;
 80008d8:	f001 fb04 	bl	8001ee4 <HAL_GetTick>
 80008dc:	4603      	mov	r3, r0
 80008de:	330a      	adds	r3, #10
 80008e0:	613b      	str	r3, [r7, #16]
    uint8_t modeMatch = 0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	75fb      	strb	r3, [r7, #23]
    while (HAL_GetTick() < endTime) {
 80008e6:	e019      	b.n	800091c <setMode+0x4e>
    	modifyRegister(MCP_CANCTRL, CANCTRL_REQOP, mode);
 80008e8:	21e0      	movs	r1, #224	; 0xe0
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	461a      	mov	r2, r3
 80008ee:	200f      	movs	r0, #15
 80008f0:	f7ff ffb3 	bl	800085a <modifyRegister>
        uint8_t newmode = readRegister(MCP_CANSTAT);
 80008f4:	200e      	movs	r0, #14
 80008f6:	f7ff ffd0 	bl	800089a <readRegister>
 80008fa:	4603      	mov	r3, r0
 80008fc:	73fb      	strb	r3, [r7, #15]
        newmode &= CANSTAT_OPMOD;
 80008fe:	22e0      	movs	r2, #224	; 0xe0
 8000900:	7bfb      	ldrb	r3, [r7, #15]
 8000902:	4013      	ands	r3, r2
 8000904:	73fb      	strb	r3, [r7, #15]

        modeMatch = newmode == mode;
 8000906:	7bfa      	ldrb	r2, [r7, #15]
 8000908:	79fb      	ldrb	r3, [r7, #7]
 800090a:	429a      	cmp	r2, r3
 800090c:	bf0c      	ite	eq
 800090e:	2301      	moveq	r3, #1
 8000910:	2300      	movne	r3, #0
 8000912:	b2db      	uxtb	r3, r3
 8000914:	75fb      	strb	r3, [r7, #23]

        if (modeMatch) {
 8000916:	7dfb      	ldrb	r3, [r7, #23]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d106      	bne.n	800092a <setMode+0x5c>
    while (HAL_GetTick() < endTime) {
 800091c:	f001 fae2 	bl	8001ee4 <HAL_GetTick>
 8000920:	4602      	mov	r2, r0
 8000922:	693b      	ldr	r3, [r7, #16]
 8000924:	4293      	cmp	r3, r2
 8000926:	d8df      	bhi.n	80008e8 <setMode+0x1a>
 8000928:	e000      	b.n	800092c <setMode+0x5e>
            break;
 800092a:	bf00      	nop
        }
    }

    return modeMatch ? ERROR_OK : ERROR_FAIL;
 800092c:	7dfb      	ldrb	r3, [r7, #23]
 800092e:	2b00      	cmp	r3, #0
 8000930:	bf0c      	ite	eq
 8000932:	2301      	moveq	r3, #1
 8000934:	2300      	movne	r3, #0
 8000936:	b2db      	uxtb	r3, r3

}
 8000938:	4618      	mov	r0, r3
 800093a:	3718      	adds	r7, #24
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}

08000940 <setConfigMode>:

CAN_Error setConfigMode()
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
    return setMode(CANCTRL_REQOP_CONFIG);
 8000944:	2080      	movs	r0, #128	; 0x80
 8000946:	f7ff ffc2 	bl	80008ce <setMode>
 800094a:	4603      	mov	r3, r0
}
 800094c:	4618      	mov	r0, r3
 800094e:	bd80      	pop	{r7, pc}

08000950 <prepareId>:

void prepareId(uint8_t *buffer, uint8_t ext, uint32_t id)
{
 8000950:	b480      	push	{r7}
 8000952:	b087      	sub	sp, #28
 8000954:	af00      	add	r7, sp, #0
 8000956:	60f8      	str	r0, [r7, #12]
 8000958:	460b      	mov	r3, r1
 800095a:	607a      	str	r2, [r7, #4]
 800095c:	72fb      	strb	r3, [r7, #11]
    uint16_t canid = (uint16_t)(id & 0x0FFFF);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	82fb      	strh	r3, [r7, #22]

    if(ext) {
 8000962:	7afb      	ldrb	r3, [r7, #11]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d046      	beq.n	80009f6 <prepareId+0xa6>
        buffer[MCP_EID0] = (uint8_t) (canid & 0xFF);
 8000968:	2303      	movs	r3, #3
 800096a:	461a      	mov	r2, r3
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	4413      	add	r3, r2
 8000970:	8afa      	ldrh	r2, [r7, #22]
 8000972:	b2d2      	uxtb	r2, r2
 8000974:	701a      	strb	r2, [r3, #0]
        buffer[MCP_EID8] = (uint8_t) (canid >> 8);
 8000976:	8afb      	ldrh	r3, [r7, #22]
 8000978:	0a1b      	lsrs	r3, r3, #8
 800097a:	b29a      	uxth	r2, r3
 800097c:	2302      	movs	r3, #2
 800097e:	4619      	mov	r1, r3
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	440b      	add	r3, r1
 8000984:	b2d2      	uxtb	r2, r2
 8000986:	701a      	strb	r2, [r3, #0]
        canid = (uint16_t)(id >> 16);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	0c1b      	lsrs	r3, r3, #16
 800098c:	82fb      	strh	r3, [r7, #22]
        buffer[MCP_SIDL] = (uint8_t) (canid & 0x03);
 800098e:	8afb      	ldrh	r3, [r7, #22]
 8000990:	b2da      	uxtb	r2, r3
 8000992:	2301      	movs	r3, #1
 8000994:	4619      	mov	r1, r3
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	440b      	add	r3, r1
 800099a:	f002 0203 	and.w	r2, r2, #3
 800099e:	b2d2      	uxtb	r2, r2
 80009a0:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDL] += (uint8_t) ((canid & 0x1C) << 3);
 80009a2:	2301      	movs	r3, #1
 80009a4:	461a      	mov	r2, r3
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	4413      	add	r3, r2
 80009aa:	7819      	ldrb	r1, [r3, #0]
 80009ac:	8afb      	ldrh	r3, [r7, #22]
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	00db      	lsls	r3, r3, #3
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	f023 031f 	bic.w	r3, r3, #31
 80009b8:	b2da      	uxtb	r2, r3
 80009ba:	2301      	movs	r3, #1
 80009bc:	4618      	mov	r0, r3
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	4403      	add	r3, r0
 80009c2:	440a      	add	r2, r1
 80009c4:	b2d2      	uxtb	r2, r2
 80009c6:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDL] |= TXB_EXIDE_MASK;
 80009c8:	2301      	movs	r3, #1
 80009ca:	461a      	mov	r2, r3
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	4413      	add	r3, r2
 80009d0:	781a      	ldrb	r2, [r3, #0]
 80009d2:	2108      	movs	r1, #8
 80009d4:	2301      	movs	r3, #1
 80009d6:	4618      	mov	r0, r3
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	4403      	add	r3, r0
 80009dc:	430a      	orrs	r2, r1
 80009de:	b2d2      	uxtb	r2, r2
 80009e0:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDH] = (uint8_t) (canid >> 5);
 80009e2:	8afb      	ldrh	r3, [r7, #22]
 80009e4:	095b      	lsrs	r3, r3, #5
 80009e6:	b29a      	uxth	r2, r3
 80009e8:	2300      	movs	r3, #0
 80009ea:	4619      	mov	r1, r3
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	440b      	add	r3, r1
 80009f0:	b2d2      	uxtb	r2, r2
 80009f2:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDH] = (uint8_t) (canid >> 3);
        buffer[MCP_SIDL] = (uint8_t) ((canid & 0x07 ) << 5);
        buffer[MCP_EID0] = 0;
        buffer[MCP_EID8] = 0;
    }
}
 80009f4:	e01d      	b.n	8000a32 <prepareId+0xe2>
        buffer[MCP_SIDH] = (uint8_t) (canid >> 3);
 80009f6:	8afb      	ldrh	r3, [r7, #22]
 80009f8:	08db      	lsrs	r3, r3, #3
 80009fa:	b29a      	uxth	r2, r3
 80009fc:	2300      	movs	r3, #0
 80009fe:	4619      	mov	r1, r3
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	440b      	add	r3, r1
 8000a04:	b2d2      	uxtb	r2, r2
 8000a06:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDL] = (uint8_t) ((canid & 0x07 ) << 5);
 8000a08:	8afb      	ldrh	r3, [r7, #22]
 8000a0a:	b2da      	uxtb	r2, r3
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	4619      	mov	r1, r3
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	440b      	add	r3, r1
 8000a14:	0152      	lsls	r2, r2, #5
 8000a16:	b2d2      	uxtb	r2, r2
 8000a18:	701a      	strb	r2, [r3, #0]
        buffer[MCP_EID0] = 0;
 8000a1a:	2303      	movs	r3, #3
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	4413      	add	r3, r2
 8000a22:	2200      	movs	r2, #0
 8000a24:	701a      	strb	r2, [r3, #0]
        buffer[MCP_EID8] = 0;
 8000a26:	2302      	movs	r3, #2
 8000a28:	461a      	mov	r2, r3
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	2200      	movs	r2, #0
 8000a30:	701a      	strb	r2, [r3, #0]
}
 8000a32:	bf00      	nop
 8000a34:	371c      	adds	r7, #28
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr

08000a3e <MCP_setFilterMask>:
    endSPI();
    return i;
}

CAN_Error MCP_setFilterMask(MASK mask, uint8_t ext, uint32_t ulData)
{
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b084      	sub	sp, #16
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	4603      	mov	r3, r0
 8000a46:	603a      	str	r2, [r7, #0]
 8000a48:	71fb      	strb	r3, [r7, #7]
 8000a4a:	460b      	mov	r3, r1
 8000a4c:	71bb      	strb	r3, [r7, #6]
	CAN_Error res = setConfigMode();
 8000a4e:	f7ff ff77 	bl	8000940 <setConfigMode>
 8000a52:	4603      	mov	r3, r0
 8000a54:	73bb      	strb	r3, [r7, #14]
    if (res != ERROR_OK) {
 8000a56:	7bbb      	ldrb	r3, [r7, #14]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MCP_setFilterMask+0x22>
        return res;
 8000a5c:	7bbb      	ldrb	r3, [r7, #14]
 8000a5e:	e01c      	b.n	8000a9a <MCP_setFilterMask+0x5c>
    }

    uint8_t tbufdata[4];
    prepareId(tbufdata, ext, ulData);
 8000a60:	79b9      	ldrb	r1, [r7, #6]
 8000a62:	f107 0308 	add.w	r3, r7, #8
 8000a66:	683a      	ldr	r2, [r7, #0]
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff ff71 	bl	8000950 <prepareId>

    REGISTER reg;
    switch (mask) {
 8000a6e:	79fb      	ldrb	r3, [r7, #7]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d002      	beq.n	8000a7a <MCP_setFilterMask+0x3c>
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d003      	beq.n	8000a80 <MCP_setFilterMask+0x42>
 8000a78:	e005      	b.n	8000a86 <MCP_setFilterMask+0x48>
        case MASK0: reg = MCP_RXM0SIDH; break;
 8000a7a:	2320      	movs	r3, #32
 8000a7c:	73fb      	strb	r3, [r7, #15]
 8000a7e:	e004      	b.n	8000a8a <MCP_setFilterMask+0x4c>
        case MASK1: reg = MCP_RXM1SIDH; break;
 8000a80:	2324      	movs	r3, #36	; 0x24
 8000a82:	73fb      	strb	r3, [r7, #15]
 8000a84:	e001      	b.n	8000a8a <MCP_setFilterMask+0x4c>
        default:
            return ERROR_FAIL;
 8000a86:	2301      	movs	r3, #1
 8000a88:	e007      	b.n	8000a9a <MCP_setFilterMask+0x5c>
    }

    setRegisters(reg, tbufdata, 4);
 8000a8a:	f107 0108 	add.w	r1, r7, #8
 8000a8e:	7bfb      	ldrb	r3, [r7, #15]
 8000a90:	2204      	movs	r2, #4
 8000a92:	4618      	mov	r0, r3
 8000a94:	f7ff feb9 	bl	800080a <setRegisters>

    return ERROR_OK;
 8000a98:	2300      	movs	r3, #0
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3710      	adds	r7, #16
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
	...

08000aa4 <MCP_setFilter>:

CAN_Error MCP_setFilter(RXF num, uint8_t ext, uint32_t ulData)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	603a      	str	r2, [r7, #0]
 8000aae:	71fb      	strb	r3, [r7, #7]
 8000ab0:	460b      	mov	r3, r1
 8000ab2:	71bb      	strb	r3, [r7, #6]
    CAN_Error res = setConfigMode();
 8000ab4:	f7ff ff44 	bl	8000940 <setConfigMode>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	73bb      	strb	r3, [r7, #14]
    if (res != ERROR_OK) {
 8000abc:	7bbb      	ldrb	r3, [r7, #14]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MCP_setFilter+0x22>
        return res;
 8000ac2:	7bbb      	ldrb	r3, [r7, #14]
 8000ac4:	e035      	b.n	8000b32 <MCP_setFilter+0x8e>
    }

    REGISTER reg;

    switch (num) {
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	2b05      	cmp	r3, #5
 8000aca:	d821      	bhi.n	8000b10 <MCP_setFilter+0x6c>
 8000acc:	a201      	add	r2, pc, #4	; (adr r2, 8000ad4 <MCP_setFilter+0x30>)
 8000ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ad2:	bf00      	nop
 8000ad4:	08000aed 	.word	0x08000aed
 8000ad8:	08000af3 	.word	0x08000af3
 8000adc:	08000af9 	.word	0x08000af9
 8000ae0:	08000aff 	.word	0x08000aff
 8000ae4:	08000b05 	.word	0x08000b05
 8000ae8:	08000b0b 	.word	0x08000b0b
        case RXF0: reg = MCP_RXF0SIDH; break;
 8000aec:	2300      	movs	r3, #0
 8000aee:	73fb      	strb	r3, [r7, #15]
 8000af0:	e010      	b.n	8000b14 <MCP_setFilter+0x70>
        case RXF1: reg = MCP_RXF1SIDH; break;
 8000af2:	2304      	movs	r3, #4
 8000af4:	73fb      	strb	r3, [r7, #15]
 8000af6:	e00d      	b.n	8000b14 <MCP_setFilter+0x70>
        case RXF2: reg = MCP_RXF2SIDH; break;
 8000af8:	2308      	movs	r3, #8
 8000afa:	73fb      	strb	r3, [r7, #15]
 8000afc:	e00a      	b.n	8000b14 <MCP_setFilter+0x70>
        case RXF3: reg = MCP_RXF3SIDH; break;
 8000afe:	2310      	movs	r3, #16
 8000b00:	73fb      	strb	r3, [r7, #15]
 8000b02:	e007      	b.n	8000b14 <MCP_setFilter+0x70>
        case RXF4: reg = MCP_RXF4SIDH; break;
 8000b04:	2314      	movs	r3, #20
 8000b06:	73fb      	strb	r3, [r7, #15]
 8000b08:	e004      	b.n	8000b14 <MCP_setFilter+0x70>
        case RXF5: reg = MCP_RXF5SIDH; break;
 8000b0a:	2318      	movs	r3, #24
 8000b0c:	73fb      	strb	r3, [r7, #15]
 8000b0e:	e001      	b.n	8000b14 <MCP_setFilter+0x70>
        default:
            return ERROR_FAIL;
 8000b10:	2301      	movs	r3, #1
 8000b12:	e00e      	b.n	8000b32 <MCP_setFilter+0x8e>
    }

    uint8_t tbufdata[4];
    prepareId(tbufdata, ext, ulData);
 8000b14:	79b9      	ldrb	r1, [r7, #6]
 8000b16:	f107 0308 	add.w	r3, r7, #8
 8000b1a:	683a      	ldr	r2, [r7, #0]
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f7ff ff17 	bl	8000950 <prepareId>
    setRegisters(reg, tbufdata, 4);
 8000b22:	f107 0108 	add.w	r1, r7, #8
 8000b26:	7bfb      	ldrb	r3, [r7, #15]
 8000b28:	2204      	movs	r2, #4
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f7ff fe6d 	bl	800080a <setRegisters>

    return ERROR_OK;
 8000b30:	2300      	movs	r3, #0
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3710      	adds	r7, #16
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop

08000b3c <MCP_reset>:


CAN_Error MCP_reset(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08a      	sub	sp, #40	; 0x28
 8000b40:	af00      	add	r7, sp, #0
    startSPI();
 8000b42:	f7ff fe19 	bl	8000778 <startSPI>
    SPI_transfer(INSTRUCTION_RESET);
 8000b46:	20c0      	movs	r0, #192	; 0xc0
 8000b48:	f7ff fe2e 	bl	80007a8 <SPI_transfer>
    endSPI();
 8000b4c:	f7ff fe20 	bl	8000790 <endSPI>

    HAL_Delay(10);
 8000b50:	200a      	movs	r0, #10
 8000b52:	f001 f9d3 	bl	8001efc <HAL_Delay>

    uint8_t zeros[14];
    memset(zeros, 0, sizeof(zeros));
 8000b56:	f107 030c 	add.w	r3, r7, #12
 8000b5a:	220e      	movs	r2, #14
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f004 fb8e 	bl	8005280 <memset>
    setRegisters(MCP_TXB0CTRL, zeros, 14);
 8000b64:	f107 030c 	add.w	r3, r7, #12
 8000b68:	220e      	movs	r2, #14
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	2030      	movs	r0, #48	; 0x30
 8000b6e:	f7ff fe4c 	bl	800080a <setRegisters>
    setRegisters(MCP_TXB1CTRL, zeros, 14);
 8000b72:	f107 030c 	add.w	r3, r7, #12
 8000b76:	220e      	movs	r2, #14
 8000b78:	4619      	mov	r1, r3
 8000b7a:	2040      	movs	r0, #64	; 0x40
 8000b7c:	f7ff fe45 	bl	800080a <setRegisters>
    setRegisters(MCP_TXB2CTRL, zeros, 14);
 8000b80:	f107 030c 	add.w	r3, r7, #12
 8000b84:	220e      	movs	r2, #14
 8000b86:	4619      	mov	r1, r3
 8000b88:	2050      	movs	r0, #80	; 0x50
 8000b8a:	f7ff fe3e 	bl	800080a <setRegisters>

    setRegister(MCP_RXB0CTRL, 0);
 8000b8e:	2100      	movs	r1, #0
 8000b90:	2060      	movs	r0, #96	; 0x60
 8000b92:	f7ff fe1f 	bl	80007d4 <setRegister>
    setRegister(MCP_RXB1CTRL, 0);
 8000b96:	2100      	movs	r1, #0
 8000b98:	2070      	movs	r0, #112	; 0x70
 8000b9a:	f7ff fe1b 	bl	80007d4 <setRegister>

    setRegister(MCP_CANINTE, CANINTF_RX0IF | CANINTF_RX1IF | CANINTF_ERRIF | CANINTF_MERRF);
 8000b9e:	21a3      	movs	r1, #163	; 0xa3
 8000ba0:	202b      	movs	r0, #43	; 0x2b
 8000ba2:	f7ff fe17 	bl	80007d4 <setRegister>

    // receives all valid messages using either Standard or Extended Identifiers that
    // meet filter criteria. RXF0 is applied for RXB0, RXF1 is applied for RXB1
    modifyRegister(MCP_RXB0CTRL,
 8000ba6:	2260      	movs	r2, #96	; 0x60
 8000ba8:	2304      	movs	r3, #4
 8000baa:	4313      	orrs	r3, r2
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	2203      	movs	r2, #3
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	b2d9      	uxtb	r1, r3
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2304      	movs	r3, #4
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	2060      	movs	r0, #96	; 0x60
 8000bc6:	f7ff fe48 	bl	800085a <modifyRegister>
                   RXBnCTRL_RXM_MASK | RXB0CTRL_BUKT | RXB0CTRL_FILHIT_MASK,
                   RXBnCTRL_RXM_STDEXT | RXB0CTRL_BUKT | RXB0CTRL_FILHIT);
    modifyRegister(MCP_RXB1CTRL,
 8000bca:	2260      	movs	r2, #96	; 0x60
 8000bcc:	2307      	movs	r3, #7
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	430a      	orrs	r2, r1
 8000bd8:	b2d2      	uxtb	r2, r2
 8000bda:	4619      	mov	r1, r3
 8000bdc:	2070      	movs	r0, #112	; 0x70
 8000bde:	f7ff fe3c 	bl	800085a <modifyRegister>
                   RXBnCTRL_RXM_STDEXT | RXB1CTRL_FILHIT);

    // clear filters and masks
    // do not filter any standard frames for RXF0 used by RXB0
    // do not filter any extended frames for RXF1 used by RXB1
    RXF filters[] = {RXF0, RXF1, RXF2, RXF3, RXF4, RXF5};
 8000be2:	4a24      	ldr	r2, [pc, #144]	; (8000c74 <MCP_reset+0x138>)
 8000be4:	1d3b      	adds	r3, r7, #4
 8000be6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bea:	6018      	str	r0, [r3, #0]
 8000bec:	3304      	adds	r3, #4
 8000bee:	8019      	strh	r1, [r3, #0]
    for (int i=0; i<6; i++) {
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	627b      	str	r3, [r7, #36]	; 0x24
 8000bf4:	e019      	b.n	8000c2a <MCP_reset+0xee>
        uint8_t ext = (i == 1);
 8000bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	bf0c      	ite	eq
 8000bfc:	2301      	moveq	r3, #1
 8000bfe:	2300      	movne	r3, #0
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	77bb      	strb	r3, [r7, #30]
        CAN_Error result = MCP_setFilter(filters[i], ext, 0);
 8000c04:	1d3a      	adds	r2, r7, #4
 8000c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c08:	4413      	add	r3, r2
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	7fb9      	ldrb	r1, [r7, #30]
 8000c0e:	2200      	movs	r2, #0
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff ff47 	bl	8000aa4 <MCP_setFilter>
 8000c16:	4603      	mov	r3, r0
 8000c18:	777b      	strb	r3, [r7, #29]
        if (result != ERROR_OK) {
 8000c1a:	7f7b      	ldrb	r3, [r7, #29]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MCP_reset+0xe8>
            return result;
 8000c20:	7f7b      	ldrb	r3, [r7, #29]
 8000c22:	e023      	b.n	8000c6c <MCP_reset+0x130>
    for (int i=0; i<6; i++) {
 8000c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c26:	3301      	adds	r3, #1
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
 8000c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c2c:	2b05      	cmp	r3, #5
 8000c2e:	dde2      	ble.n	8000bf6 <MCP_reset+0xba>
        }
    }

    MASK masks[] = {MASK0, MASK1};
 8000c30:	2300      	movs	r3, #0
 8000c32:	703b      	strb	r3, [r7, #0]
 8000c34:	2301      	movs	r3, #1
 8000c36:	707b      	strb	r3, [r7, #1]
    for (int i=0; i<2; i++) {
 8000c38:	2300      	movs	r3, #0
 8000c3a:	623b      	str	r3, [r7, #32]
 8000c3c:	e012      	b.n	8000c64 <MCP_reset+0x128>
    	CAN_Error result = MCP_setFilterMask(masks[i], 1, 0);
 8000c3e:	463a      	mov	r2, r7
 8000c40:	6a3b      	ldr	r3, [r7, #32]
 8000c42:	4413      	add	r3, r2
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	2200      	movs	r2, #0
 8000c48:	2101      	movs	r1, #1
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff fef7 	bl	8000a3e <MCP_setFilterMask>
 8000c50:	4603      	mov	r3, r0
 8000c52:	77fb      	strb	r3, [r7, #31]
        if (result != ERROR_OK) {
 8000c54:	7ffb      	ldrb	r3, [r7, #31]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MCP_reset+0x122>
            return result;
 8000c5a:	7ffb      	ldrb	r3, [r7, #31]
 8000c5c:	e006      	b.n	8000c6c <MCP_reset+0x130>
    for (int i=0; i<2; i++) {
 8000c5e:	6a3b      	ldr	r3, [r7, #32]
 8000c60:	3301      	adds	r3, #1
 8000c62:	623b      	str	r3, [r7, #32]
 8000c64:	6a3b      	ldr	r3, [r7, #32]
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	dde9      	ble.n	8000c3e <MCP_reset+0x102>
        }
    }

    return ERROR_OK;
 8000c6a:	2300      	movs	r3, #0
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3728      	adds	r7, #40	; 0x28
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	080052a8 	.word	0x080052a8

08000c78 <MCP_setNormalMode>:
{
    return setMode(CANCTRL_REQOP_LOOPBACK);
}

CAN_Error MCP_setNormalMode()
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
    return setMode(CANCTRL_REQOP_NORMAL);
 8000c7c:	2000      	movs	r0, #0
 8000c7e:	f7ff fe26 	bl	80008ce <setMode>
 8000c82:	4603      	mov	r3, r0
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <MCP_setBitrateClock>:

CAN_Error MCP_setBitrateClock(CAN_SPEED canSpeed, CAN_CLOCK canClock)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	460a      	mov	r2, r1
 8000c92:	71fb      	strb	r3, [r7, #7]
 8000c94:	4613      	mov	r3, r2
 8000c96:	71bb      	strb	r3, [r7, #6]
	CAN_Error error = setConfigMode();
 8000c98:	f7ff fe52 	bl	8000940 <setConfigMode>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	72fb      	strb	r3, [r7, #11]
    if (error != ERROR_OK) {
 8000ca0:	7afb      	ldrb	r3, [r7, #11]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MCP_setBitrateClock+0x22>
        return error;
 8000ca6:	7afb      	ldrb	r3, [r7, #11]
 8000ca8:	e1b3      	b.n	8001012 <MCP_setBitrateClock+0x38a>
    }

    uint8_t set, cfg1, cfg2, cfg3;
    set = 1;
 8000caa:	2301      	movs	r3, #1
 8000cac:	73fb      	strb	r3, [r7, #15]
    switch (canClock)
 8000cae:	79bb      	ldrb	r3, [r7, #6]
 8000cb0:	2b02      	cmp	r3, #2
 8000cb2:	d009      	beq.n	8000cc8 <MCP_setBitrateClock+0x40>
 8000cb4:	2b02      	cmp	r3, #2
 8000cb6:	f300 8194 	bgt.w	8000fe2 <MCP_setBitrateClock+0x35a>
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	f000 8120 	beq.w	8000f00 <MCP_setBitrateClock+0x278>
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	f000 808f 	beq.w	8000de4 <MCP_setBitrateClock+0x15c>
 8000cc6:	e18c      	b.n	8000fe2 <MCP_setBitrateClock+0x35a>
    {
        case (MCP_8MHZ):
        switch (canSpeed)
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
 8000cca:	2b0f      	cmp	r3, #15
 8000ccc:	f200 8086 	bhi.w	8000ddc <MCP_setBitrateClock+0x154>
 8000cd0:	a201      	add	r2, pc, #4	; (adr r2, 8000cd8 <MCP_setBitrateClock+0x50>)
 8000cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cd6:	bf00      	nop
 8000cd8:	08000d19 	.word	0x08000d19
 8000cdc:	08000d27 	.word	0x08000d27
 8000ce0:	08000d35 	.word	0x08000d35
 8000ce4:	08000d43 	.word	0x08000d43
 8000ce8:	08000d51 	.word	0x08000d51
 8000cec:	08000d5f 	.word	0x08000d5f
 8000cf0:	08000d6d 	.word	0x08000d6d
 8000cf4:	08000d7b 	.word	0x08000d7b
 8000cf8:	08000ddd 	.word	0x08000ddd
 8000cfc:	08000ddd 	.word	0x08000ddd
 8000d00:	08000d89 	.word	0x08000d89
 8000d04:	08000d97 	.word	0x08000d97
 8000d08:	08000da5 	.word	0x08000da5
 8000d0c:	08000db3 	.word	0x08000db3
 8000d10:	08000dc1 	.word	0x08000dc1
 8000d14:	08000dcf 	.word	0x08000dcf
        {
            case (CAN_5KBPS):                                               //   5KBPS
            cfg1 = MCP_8MHz_5kBPS_CFG1;
 8000d18:	231f      	movs	r3, #31
 8000d1a:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_5kBPS_CFG2;
 8000d1c:	23bf      	movs	r3, #191	; 0xbf
 8000d1e:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_5kBPS_CFG3;
 8000d20:	2387      	movs	r3, #135	; 0x87
 8000d22:	733b      	strb	r3, [r7, #12]
            break;
 8000d24:	e05d      	b.n	8000de2 <MCP_setBitrateClock+0x15a>

            case (CAN_10KBPS):                                              //  10KBPS
            cfg1 = MCP_8MHz_10kBPS_CFG1;
 8000d26:	230f      	movs	r3, #15
 8000d28:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_10kBPS_CFG2;
 8000d2a:	23bf      	movs	r3, #191	; 0xbf
 8000d2c:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_10kBPS_CFG3;
 8000d2e:	2387      	movs	r3, #135	; 0x87
 8000d30:	733b      	strb	r3, [r7, #12]
            break;
 8000d32:	e056      	b.n	8000de2 <MCP_setBitrateClock+0x15a>

            case (CAN_20KBPS):                                              //  20KBPS
            cfg1 = MCP_8MHz_20kBPS_CFG1;
 8000d34:	2307      	movs	r3, #7
 8000d36:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_20kBPS_CFG2;
 8000d38:	23bf      	movs	r3, #191	; 0xbf
 8000d3a:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_20kBPS_CFG3;
 8000d3c:	2387      	movs	r3, #135	; 0x87
 8000d3e:	733b      	strb	r3, [r7, #12]
            break;
 8000d40:	e04f      	b.n	8000de2 <MCP_setBitrateClock+0x15a>

            case (CAN_31K25BPS):                                            //  31.25KBPS
            cfg1 = MCP_8MHz_31k25BPS_CFG1;
 8000d42:	2307      	movs	r3, #7
 8000d44:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_31k25BPS_CFG2;
 8000d46:	23a4      	movs	r3, #164	; 0xa4
 8000d48:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_31k25BPS_CFG3;
 8000d4a:	2384      	movs	r3, #132	; 0x84
 8000d4c:	733b      	strb	r3, [r7, #12]
            break;
 8000d4e:	e048      	b.n	8000de2 <MCP_setBitrateClock+0x15a>

            case (CAN_33KBPS):                                              //  33.333KBPS
            cfg1 = MCP_8MHz_33k3BPS_CFG1;
 8000d50:	2347      	movs	r3, #71	; 0x47
 8000d52:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_33k3BPS_CFG2;
 8000d54:	23e2      	movs	r3, #226	; 0xe2
 8000d56:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_33k3BPS_CFG3;
 8000d58:	2385      	movs	r3, #133	; 0x85
 8000d5a:	733b      	strb	r3, [r7, #12]
            break;
 8000d5c:	e041      	b.n	8000de2 <MCP_setBitrateClock+0x15a>

            case (CAN_40KBPS):                                              //  40Kbps
            cfg1 = MCP_8MHz_40kBPS_CFG1;
 8000d5e:	2303      	movs	r3, #3
 8000d60:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_40kBPS_CFG2;
 8000d62:	23bf      	movs	r3, #191	; 0xbf
 8000d64:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_40kBPS_CFG3;
 8000d66:	2387      	movs	r3, #135	; 0x87
 8000d68:	733b      	strb	r3, [r7, #12]
            break;
 8000d6a:	e03a      	b.n	8000de2 <MCP_setBitrateClock+0x15a>

            case (CAN_50KBPS):                                              //  50Kbps
            cfg1 = MCP_8MHz_50kBPS_CFG1;
 8000d6c:	2303      	movs	r3, #3
 8000d6e:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_50kBPS_CFG2;
 8000d70:	23b4      	movs	r3, #180	; 0xb4
 8000d72:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_50kBPS_CFG3;
 8000d74:	2386      	movs	r3, #134	; 0x86
 8000d76:	733b      	strb	r3, [r7, #12]
            break;
 8000d78:	e033      	b.n	8000de2 <MCP_setBitrateClock+0x15a>

            case (CAN_80KBPS):                                              //  80Kbps
            cfg1 = MCP_8MHz_80kBPS_CFG1;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_80kBPS_CFG2;
 8000d7e:	23bf      	movs	r3, #191	; 0xbf
 8000d80:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_80kBPS_CFG3;
 8000d82:	2387      	movs	r3, #135	; 0x87
 8000d84:	733b      	strb	r3, [r7, #12]
            break;
 8000d86:	e02c      	b.n	8000de2 <MCP_setBitrateClock+0x15a>

            case (CAN_100KBPS):                                             // 100Kbps
            cfg1 = MCP_8MHz_100kBPS_CFG1;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_100kBPS_CFG2;
 8000d8c:	23b4      	movs	r3, #180	; 0xb4
 8000d8e:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_100kBPS_CFG3;
 8000d90:	2386      	movs	r3, #134	; 0x86
 8000d92:	733b      	strb	r3, [r7, #12]
            break;
 8000d94:	e025      	b.n	8000de2 <MCP_setBitrateClock+0x15a>

            case (CAN_125KBPS):                                             // 125Kbps
            cfg1 = MCP_8MHz_125kBPS_CFG1;
 8000d96:	2301      	movs	r3, #1
 8000d98:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_125kBPS_CFG2;
 8000d9a:	23b1      	movs	r3, #177	; 0xb1
 8000d9c:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_125kBPS_CFG3;
 8000d9e:	2385      	movs	r3, #133	; 0x85
 8000da0:	733b      	strb	r3, [r7, #12]
            break;
 8000da2:	e01e      	b.n	8000de2 <MCP_setBitrateClock+0x15a>

            case (CAN_200KBPS):                                             // 200Kbps
            cfg1 = MCP_8MHz_200kBPS_CFG1;
 8000da4:	2300      	movs	r3, #0
 8000da6:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_200kBPS_CFG2;
 8000da8:	23b4      	movs	r3, #180	; 0xb4
 8000daa:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_200kBPS_CFG3;
 8000dac:	2386      	movs	r3, #134	; 0x86
 8000dae:	733b      	strb	r3, [r7, #12]
            break;
 8000db0:	e017      	b.n	8000de2 <MCP_setBitrateClock+0x15a>

            case (CAN_250KBPS):                                             // 250Kbps
            cfg1 = MCP_8MHz_250kBPS_CFG1;
 8000db2:	2300      	movs	r3, #0
 8000db4:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_250kBPS_CFG2;
 8000db6:	23b1      	movs	r3, #177	; 0xb1
 8000db8:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_250kBPS_CFG3;
 8000dba:	2385      	movs	r3, #133	; 0x85
 8000dbc:	733b      	strb	r3, [r7, #12]
            break;
 8000dbe:	e010      	b.n	8000de2 <MCP_setBitrateClock+0x15a>

            case (CAN_500KBPS):                                             // 500Kbps
            cfg1 = MCP_8MHz_500kBPS_CFG1;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_500kBPS_CFG2;
 8000dc4:	2390      	movs	r3, #144	; 0x90
 8000dc6:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_500kBPS_CFG3;
 8000dc8:	2382      	movs	r3, #130	; 0x82
 8000dca:	733b      	strb	r3, [r7, #12]
            break;
 8000dcc:	e009      	b.n	8000de2 <MCP_setBitrateClock+0x15a>

            case (CAN_1000KBPS):                                            //   1Mbps
            cfg1 = MCP_8MHz_1000kBPS_CFG1;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_1000kBPS_CFG2;
 8000dd2:	2380      	movs	r3, #128	; 0x80
 8000dd4:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_1000kBPS_CFG3;
 8000dd6:	2380      	movs	r3, #128	; 0x80
 8000dd8:	733b      	strb	r3, [r7, #12]
            break;
 8000dda:	e002      	b.n	8000de2 <MCP_setBitrateClock+0x15a>

            default:
            set = 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	73fb      	strb	r3, [r7, #15]
            break;
 8000de0:	bf00      	nop
        }
        break;
 8000de2:	e101      	b.n	8000fe8 <MCP_setBitrateClock+0x360>

        case (MCP_16MHZ):
        switch (canSpeed)
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	2b0f      	cmp	r3, #15
 8000de8:	f200 8086 	bhi.w	8000ef8 <MCP_setBitrateClock+0x270>
 8000dec:	a201      	add	r2, pc, #4	; (adr r2, 8000df4 <MCP_setBitrateClock+0x16c>)
 8000dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000df2:	bf00      	nop
 8000df4:	08000e35 	.word	0x08000e35
 8000df8:	08000e43 	.word	0x08000e43
 8000dfc:	08000e51 	.word	0x08000e51
 8000e00:	08000ef9 	.word	0x08000ef9
 8000e04:	08000e5f 	.word	0x08000e5f
 8000e08:	08000e6d 	.word	0x08000e6d
 8000e0c:	08000e7b 	.word	0x08000e7b
 8000e10:	08000e89 	.word	0x08000e89
 8000e14:	08000e97 	.word	0x08000e97
 8000e18:	08000ef9 	.word	0x08000ef9
 8000e1c:	08000ea5 	.word	0x08000ea5
 8000e20:	08000eb3 	.word	0x08000eb3
 8000e24:	08000ec1 	.word	0x08000ec1
 8000e28:	08000ecf 	.word	0x08000ecf
 8000e2c:	08000edd 	.word	0x08000edd
 8000e30:	08000eeb 	.word	0x08000eeb
        {
            case (CAN_5KBPS):                                               //   5Kbps
            cfg1 = MCP_16MHz_5kBPS_CFG1;
 8000e34:	233f      	movs	r3, #63	; 0x3f
 8000e36:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_5kBPS_CFG2;
 8000e38:	23ff      	movs	r3, #255	; 0xff
 8000e3a:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_5kBPS_CFG3;
 8000e3c:	2387      	movs	r3, #135	; 0x87
 8000e3e:	733b      	strb	r3, [r7, #12]
            break;
 8000e40:	e05d      	b.n	8000efe <MCP_setBitrateClock+0x276>

            case (CAN_10KBPS):                                              //  10Kbps
            cfg1 = MCP_16MHz_10kBPS_CFG1;
 8000e42:	231f      	movs	r3, #31
 8000e44:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_10kBPS_CFG2;
 8000e46:	23ff      	movs	r3, #255	; 0xff
 8000e48:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_10kBPS_CFG3;
 8000e4a:	2387      	movs	r3, #135	; 0x87
 8000e4c:	733b      	strb	r3, [r7, #12]
            break;
 8000e4e:	e056      	b.n	8000efe <MCP_setBitrateClock+0x276>

            case (CAN_20KBPS):                                              //  20Kbps
            cfg1 = MCP_16MHz_20kBPS_CFG1;
 8000e50:	230f      	movs	r3, #15
 8000e52:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_20kBPS_CFG2;
 8000e54:	23ff      	movs	r3, #255	; 0xff
 8000e56:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_20kBPS_CFG3;
 8000e58:	2387      	movs	r3, #135	; 0x87
 8000e5a:	733b      	strb	r3, [r7, #12]
            break;
 8000e5c:	e04f      	b.n	8000efe <MCP_setBitrateClock+0x276>

            case (CAN_33KBPS):                                              //  33.333Kbps
            cfg1 = MCP_16MHz_33k3BPS_CFG1;
 8000e5e:	234e      	movs	r3, #78	; 0x4e
 8000e60:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_33k3BPS_CFG2;
 8000e62:	23f1      	movs	r3, #241	; 0xf1
 8000e64:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_33k3BPS_CFG3;
 8000e66:	2385      	movs	r3, #133	; 0x85
 8000e68:	733b      	strb	r3, [r7, #12]
            break;
 8000e6a:	e048      	b.n	8000efe <MCP_setBitrateClock+0x276>

            case (CAN_40KBPS):                                              //  40Kbps
            cfg1 = MCP_16MHz_40kBPS_CFG1;
 8000e6c:	2307      	movs	r3, #7
 8000e6e:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_40kBPS_CFG2;
 8000e70:	23ff      	movs	r3, #255	; 0xff
 8000e72:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_40kBPS_CFG3;
 8000e74:	2387      	movs	r3, #135	; 0x87
 8000e76:	733b      	strb	r3, [r7, #12]
            break;
 8000e78:	e041      	b.n	8000efe <MCP_setBitrateClock+0x276>

            case (CAN_50KBPS):                                              //  50Kbps
            cfg1 = MCP_16MHz_50kBPS_CFG1;
 8000e7a:	2307      	movs	r3, #7
 8000e7c:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_50kBPS_CFG2;
 8000e7e:	23fa      	movs	r3, #250	; 0xfa
 8000e80:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_50kBPS_CFG3;
 8000e82:	2387      	movs	r3, #135	; 0x87
 8000e84:	733b      	strb	r3, [r7, #12]
            break;
 8000e86:	e03a      	b.n	8000efe <MCP_setBitrateClock+0x276>

            case (CAN_80KBPS):                                              //  80Kbps
            cfg1 = MCP_16MHz_80kBPS_CFG1;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_80kBPS_CFG2;
 8000e8c:	23ff      	movs	r3, #255	; 0xff
 8000e8e:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_80kBPS_CFG3;
 8000e90:	2387      	movs	r3, #135	; 0x87
 8000e92:	733b      	strb	r3, [r7, #12]
            break;
 8000e94:	e033      	b.n	8000efe <MCP_setBitrateClock+0x276>

            case (CAN_83K3BPS):                                             //  83.333Kbps
            cfg1 = MCP_16MHz_83k3BPS_CFG1;
 8000e96:	2303      	movs	r3, #3
 8000e98:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_83k3BPS_CFG2;
 8000e9a:	23be      	movs	r3, #190	; 0xbe
 8000e9c:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_83k3BPS_CFG3;
 8000e9e:	2307      	movs	r3, #7
 8000ea0:	733b      	strb	r3, [r7, #12]
            break;
 8000ea2:	e02c      	b.n	8000efe <MCP_setBitrateClock+0x276>

            case (CAN_100KBPS):                                             // 100Kbps
            cfg1 = MCP_16MHz_100kBPS_CFG1;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_100kBPS_CFG2;
 8000ea8:	23fa      	movs	r3, #250	; 0xfa
 8000eaa:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_100kBPS_CFG3;
 8000eac:	2387      	movs	r3, #135	; 0x87
 8000eae:	733b      	strb	r3, [r7, #12]
            break;
 8000eb0:	e025      	b.n	8000efe <MCP_setBitrateClock+0x276>

            case (CAN_125KBPS):                                             // 125Kbps
            cfg1 = MCP_16MHz_125kBPS_CFG1;
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_125kBPS_CFG2;
 8000eb6:	23f0      	movs	r3, #240	; 0xf0
 8000eb8:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_125kBPS_CFG3;
 8000eba:	2386      	movs	r3, #134	; 0x86
 8000ebc:	733b      	strb	r3, [r7, #12]
            break;
 8000ebe:	e01e      	b.n	8000efe <MCP_setBitrateClock+0x276>

            case (CAN_200KBPS):                                             // 200Kbps
            cfg1 = MCP_16MHz_200kBPS_CFG1;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_200kBPS_CFG2;
 8000ec4:	23fa      	movs	r3, #250	; 0xfa
 8000ec6:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_200kBPS_CFG3;
 8000ec8:	2387      	movs	r3, #135	; 0x87
 8000eca:	733b      	strb	r3, [r7, #12]
            break;
 8000ecc:	e017      	b.n	8000efe <MCP_setBitrateClock+0x276>

            case (CAN_250KBPS):                                             // 250Kbps
            cfg1 = MCP_16MHz_250kBPS_CFG1;
 8000ece:	2341      	movs	r3, #65	; 0x41
 8000ed0:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_250kBPS_CFG2;
 8000ed2:	23f1      	movs	r3, #241	; 0xf1
 8000ed4:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_250kBPS_CFG3;
 8000ed6:	2385      	movs	r3, #133	; 0x85
 8000ed8:	733b      	strb	r3, [r7, #12]
            break;
 8000eda:	e010      	b.n	8000efe <MCP_setBitrateClock+0x276>

            case (CAN_500KBPS):                                             // 500Kbps
            cfg1 = MCP_16MHz_500kBPS_CFG1;
 8000edc:	2300      	movs	r3, #0
 8000ede:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_500kBPS_CFG2;
 8000ee0:	23f0      	movs	r3, #240	; 0xf0
 8000ee2:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_500kBPS_CFG3;
 8000ee4:	2386      	movs	r3, #134	; 0x86
 8000ee6:	733b      	strb	r3, [r7, #12]
            break;
 8000ee8:	e009      	b.n	8000efe <MCP_setBitrateClock+0x276>

            case (CAN_1000KBPS):                                            //   1Mbps
            cfg1 = MCP_16MHz_1000kBPS_CFG1;
 8000eea:	2300      	movs	r3, #0
 8000eec:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_1000kBPS_CFG2;
 8000eee:	23d0      	movs	r3, #208	; 0xd0
 8000ef0:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_1000kBPS_CFG3;
 8000ef2:	2382      	movs	r3, #130	; 0x82
 8000ef4:	733b      	strb	r3, [r7, #12]
            break;
 8000ef6:	e002      	b.n	8000efe <MCP_setBitrateClock+0x276>

            default:
            set = 0;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	73fb      	strb	r3, [r7, #15]
            break;
 8000efc:	bf00      	nop
        }
        break;
 8000efe:	e073      	b.n	8000fe8 <MCP_setBitrateClock+0x360>

        case (MCP_20MHZ):
        switch (canSpeed)
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	3b04      	subs	r3, #4
 8000f04:	2b0b      	cmp	r3, #11
 8000f06:	d868      	bhi.n	8000fda <MCP_setBitrateClock+0x352>
 8000f08:	a201      	add	r2, pc, #4	; (adr r2, 8000f10 <MCP_setBitrateClock+0x288>)
 8000f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f0e:	bf00      	nop
 8000f10:	08000f41 	.word	0x08000f41
 8000f14:	08000f4f 	.word	0x08000f4f
 8000f18:	08000f5d 	.word	0x08000f5d
 8000f1c:	08000f6b 	.word	0x08000f6b
 8000f20:	08000f79 	.word	0x08000f79
 8000f24:	08000fdb 	.word	0x08000fdb
 8000f28:	08000f87 	.word	0x08000f87
 8000f2c:	08000f95 	.word	0x08000f95
 8000f30:	08000fa3 	.word	0x08000fa3
 8000f34:	08000fb1 	.word	0x08000fb1
 8000f38:	08000fbf 	.word	0x08000fbf
 8000f3c:	08000fcd 	.word	0x08000fcd
        {
            case (CAN_33KBPS):                                              //  33.333Kbps
            cfg1 = MCP_20MHz_33k3BPS_CFG1;
 8000f40:	230b      	movs	r3, #11
 8000f42:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_33k3BPS_CFG2;
 8000f44:	23ff      	movs	r3, #255	; 0xff
 8000f46:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_33k3BPS_CFG3;
 8000f48:	2387      	movs	r3, #135	; 0x87
 8000f4a:	733b      	strb	r3, [r7, #12]
	    break;
 8000f4c:	e048      	b.n	8000fe0 <MCP_setBitrateClock+0x358>

            case (CAN_40KBPS):                                              //  40Kbps
            cfg1 = MCP_20MHz_40kBPS_CFG1;
 8000f4e:	2309      	movs	r3, #9
 8000f50:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_40kBPS_CFG2;
 8000f52:	23ff      	movs	r3, #255	; 0xff
 8000f54:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_40kBPS_CFG3;
 8000f56:	2387      	movs	r3, #135	; 0x87
 8000f58:	733b      	strb	r3, [r7, #12]
            break;
 8000f5a:	e041      	b.n	8000fe0 <MCP_setBitrateClock+0x358>

            case (CAN_50KBPS):                                              //  50Kbps
            cfg1 = MCP_20MHz_50kBPS_CFG1;
 8000f5c:	2309      	movs	r3, #9
 8000f5e:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_50kBPS_CFG2;
 8000f60:	23fa      	movs	r3, #250	; 0xfa
 8000f62:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_50kBPS_CFG3;
 8000f64:	2387      	movs	r3, #135	; 0x87
 8000f66:	733b      	strb	r3, [r7, #12]
            break;
 8000f68:	e03a      	b.n	8000fe0 <MCP_setBitrateClock+0x358>

            case (CAN_80KBPS):                                              //  80Kbps
            cfg1 = MCP_20MHz_80kBPS_CFG1;
 8000f6a:	2304      	movs	r3, #4
 8000f6c:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_80kBPS_CFG2;
 8000f6e:	23ff      	movs	r3, #255	; 0xff
 8000f70:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_80kBPS_CFG3;
 8000f72:	2387      	movs	r3, #135	; 0x87
 8000f74:	733b      	strb	r3, [r7, #12]
            break;
 8000f76:	e033      	b.n	8000fe0 <MCP_setBitrateClock+0x358>

            case (CAN_83K3BPS):                                             //  83.333Kbps
            cfg1 = MCP_20MHz_83k3BPS_CFG1;
 8000f78:	2304      	movs	r3, #4
 8000f7a:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_83k3BPS_CFG2;
 8000f7c:	23fe      	movs	r3, #254	; 0xfe
 8000f7e:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_83k3BPS_CFG3;
 8000f80:	2387      	movs	r3, #135	; 0x87
 8000f82:	733b      	strb	r3, [r7, #12]
	    break;
 8000f84:	e02c      	b.n	8000fe0 <MCP_setBitrateClock+0x358>

            case (CAN_100KBPS):                                             // 100Kbps
            cfg1 = MCP_20MHz_100kBPS_CFG1;
 8000f86:	2304      	movs	r3, #4
 8000f88:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_100kBPS_CFG2;
 8000f8a:	23fa      	movs	r3, #250	; 0xfa
 8000f8c:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_100kBPS_CFG3;
 8000f8e:	2387      	movs	r3, #135	; 0x87
 8000f90:	733b      	strb	r3, [r7, #12]
            break;
 8000f92:	e025      	b.n	8000fe0 <MCP_setBitrateClock+0x358>

            case (CAN_125KBPS):                                             // 125Kbps
            cfg1 = MCP_20MHz_125kBPS_CFG1;
 8000f94:	2303      	movs	r3, #3
 8000f96:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_125kBPS_CFG2;
 8000f98:	23fa      	movs	r3, #250	; 0xfa
 8000f9a:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_125kBPS_CFG3;
 8000f9c:	2387      	movs	r3, #135	; 0x87
 8000f9e:	733b      	strb	r3, [r7, #12]
            break;
 8000fa0:	e01e      	b.n	8000fe0 <MCP_setBitrateClock+0x358>

            case (CAN_200KBPS):                                             // 200Kbps
            cfg1 = MCP_20MHz_200kBPS_CFG1;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_200kBPS_CFG2;
 8000fa6:	23ff      	movs	r3, #255	; 0xff
 8000fa8:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_200kBPS_CFG3;
 8000faa:	2387      	movs	r3, #135	; 0x87
 8000fac:	733b      	strb	r3, [r7, #12]
            break;
 8000fae:	e017      	b.n	8000fe0 <MCP_setBitrateClock+0x358>

            case (CAN_250KBPS):                                             // 250Kbps
            cfg1 = MCP_20MHz_250kBPS_CFG1;
 8000fb0:	2341      	movs	r3, #65	; 0x41
 8000fb2:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_250kBPS_CFG2;
 8000fb4:	23fb      	movs	r3, #251	; 0xfb
 8000fb6:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_250kBPS_CFG3;
 8000fb8:	2386      	movs	r3, #134	; 0x86
 8000fba:	733b      	strb	r3, [r7, #12]
            break;
 8000fbc:	e010      	b.n	8000fe0 <MCP_setBitrateClock+0x358>

            case (CAN_500KBPS):                                             // 500Kbps
            cfg1 = MCP_20MHz_500kBPS_CFG1;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_500kBPS_CFG2;
 8000fc2:	23fa      	movs	r3, #250	; 0xfa
 8000fc4:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_500kBPS_CFG3;
 8000fc6:	2387      	movs	r3, #135	; 0x87
 8000fc8:	733b      	strb	r3, [r7, #12]
            break;
 8000fca:	e009      	b.n	8000fe0 <MCP_setBitrateClock+0x358>

            case (CAN_1000KBPS):                                            //   1Mbps
            cfg1 = MCP_20MHz_1000kBPS_CFG1;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_1000kBPS_CFG2;
 8000fd0:	23d9      	movs	r3, #217	; 0xd9
 8000fd2:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_1000kBPS_CFG3;
 8000fd4:	2382      	movs	r3, #130	; 0x82
 8000fd6:	733b      	strb	r3, [r7, #12]
            break;
 8000fd8:	e002      	b.n	8000fe0 <MCP_setBitrateClock+0x358>

            default:
            set = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	73fb      	strb	r3, [r7, #15]
            break;
 8000fde:	bf00      	nop
        }
        break;
 8000fe0:	e002      	b.n	8000fe8 <MCP_setBitrateClock+0x360>

        default:
        set = 0;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	73fb      	strb	r3, [r7, #15]
        break;
 8000fe6:	bf00      	nop
    }

    if (set) {
 8000fe8:	7bfb      	ldrb	r3, [r7, #15]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d010      	beq.n	8001010 <MCP_setBitrateClock+0x388>
        setRegister(MCP_CNF1, cfg1);
 8000fee:	7bbb      	ldrb	r3, [r7, #14]
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	202a      	movs	r0, #42	; 0x2a
 8000ff4:	f7ff fbee 	bl	80007d4 <setRegister>
        setRegister(MCP_CNF2, cfg2);
 8000ff8:	7b7b      	ldrb	r3, [r7, #13]
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	2029      	movs	r0, #41	; 0x29
 8000ffe:	f7ff fbe9 	bl	80007d4 <setRegister>
        setRegister(MCP_CNF3, cfg3);
 8001002:	7b3b      	ldrb	r3, [r7, #12]
 8001004:	4619      	mov	r1, r3
 8001006:	2028      	movs	r0, #40	; 0x28
 8001008:	f7ff fbe4 	bl	80007d4 <setRegister>
        return ERROR_OK;
 800100c:	2300      	movs	r3, #0
 800100e:	e000      	b.n	8001012 <MCP_setBitrateClock+0x38a>
    }
    else {
        return ERROR_FAIL;
 8001010:	2301      	movs	r3, #1
    }
}
 8001012:	4618      	mov	r0, r3
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop

0800101c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001020:	f000 fefa 	bl	8001e18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001024:	f000 f81a 	bl	800105c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001028:	f000 f9ec 	bl	8001404 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800102c:	f000 f9c0 	bl	80013b0 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8001030:	f000 f8d4 	bl	80011dc <MX_SPI2_Init>
  MX_ADC1_Init();
 8001034:	f000 f87e 	bl	8001134 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001038:	f000 f906 	bl	8001248 <MX_TIM3_Init>
  MX_TIM4_Init();
 800103c:	f000 f95e 	bl	80012fc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
	user_init();
 8001040:	f000 fc34 	bl	80018ac <user_init>
	HAL_UART_Receive_IT(&huart2, uart2_rcv_buff, 2);
 8001044:	2202      	movs	r2, #2
 8001046:	4903      	ldr	r1, [pc, #12]	; (8001054 <main+0x38>)
 8001048:	4803      	ldr	r0, [pc, #12]	; (8001058 <main+0x3c>)
 800104a:	f003 fb2d 	bl	80046a8 <HAL_UART_Receive_IT>
	//HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_SET);
	//HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_RESET);

	while (1)
	{
		user_while();
 800104e:	f000 fc89 	bl	8001964 <user_while>
 8001052:	e7fc      	b.n	800104e <main+0x32>
 8001054:	200000b0 	.word	0x200000b0
 8001058:	20000394 	.word	0x20000394

0800105c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b094      	sub	sp, #80	; 0x50
 8001060:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001062:	f107 0320 	add.w	r3, r7, #32
 8001066:	2230      	movs	r2, #48	; 0x30
 8001068:	2100      	movs	r1, #0
 800106a:	4618      	mov	r0, r3
 800106c:	f004 f908 	bl	8005280 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001070:	f107 030c 	add.w	r3, r7, #12
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001080:	2300      	movs	r3, #0
 8001082:	60bb      	str	r3, [r7, #8]
 8001084:	4b29      	ldr	r3, [pc, #164]	; (800112c <SystemClock_Config+0xd0>)
 8001086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001088:	4a28      	ldr	r2, [pc, #160]	; (800112c <SystemClock_Config+0xd0>)
 800108a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800108e:	6413      	str	r3, [r2, #64]	; 0x40
 8001090:	4b26      	ldr	r3, [pc, #152]	; (800112c <SystemClock_Config+0xd0>)
 8001092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001094:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001098:	60bb      	str	r3, [r7, #8]
 800109a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800109c:	2300      	movs	r3, #0
 800109e:	607b      	str	r3, [r7, #4]
 80010a0:	4b23      	ldr	r3, [pc, #140]	; (8001130 <SystemClock_Config+0xd4>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010a8:	4a21      	ldr	r2, [pc, #132]	; (8001130 <SystemClock_Config+0xd4>)
 80010aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010ae:	6013      	str	r3, [r2, #0]
 80010b0:	4b1f      	ldr	r3, [pc, #124]	; (8001130 <SystemClock_Config+0xd4>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010b8:	607b      	str	r3, [r7, #4]
 80010ba:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010bc:	2302      	movs	r3, #2
 80010be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010c0:	2301      	movs	r3, #1
 80010c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010c4:	2310      	movs	r3, #16
 80010c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010c8:	2302      	movs	r3, #2
 80010ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010cc:	2300      	movs	r3, #0
 80010ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80010d0:	2310      	movs	r3, #16
 80010d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010d4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80010d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80010da:	2304      	movs	r3, #4
 80010dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010de:	2307      	movs	r3, #7
 80010e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010e2:	f107 0320 	add.w	r3, r7, #32
 80010e6:	4618      	mov	r0, r3
 80010e8:	f001 fe58 	bl	8002d9c <HAL_RCC_OscConfig>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80010f2:	f000 fab9 	bl	8001668 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010f6:	230f      	movs	r3, #15
 80010f8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010fa:	2302      	movs	r3, #2
 80010fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001102:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001106:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001108:	2300      	movs	r3, #0
 800110a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800110c:	f107 030c 	add.w	r3, r7, #12
 8001110:	2102      	movs	r1, #2
 8001112:	4618      	mov	r0, r3
 8001114:	f002 f8ba 	bl	800328c <HAL_RCC_ClockConfig>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800111e:	f000 faa3 	bl	8001668 <Error_Handler>
  }
}
 8001122:	bf00      	nop
 8001124:	3750      	adds	r7, #80	; 0x50
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40023800 	.word	0x40023800
 8001130:	40007000 	.word	0x40007000

08001134 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800113a:	463b      	mov	r3, r7
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001146:	4b22      	ldr	r3, [pc, #136]	; (80011d0 <MX_ADC1_Init+0x9c>)
 8001148:	4a22      	ldr	r2, [pc, #136]	; (80011d4 <MX_ADC1_Init+0xa0>)
 800114a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800114c:	4b20      	ldr	r3, [pc, #128]	; (80011d0 <MX_ADC1_Init+0x9c>)
 800114e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001152:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8001154:	4b1e      	ldr	r3, [pc, #120]	; (80011d0 <MX_ADC1_Init+0x9c>)
 8001156:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800115a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800115c:	4b1c      	ldr	r3, [pc, #112]	; (80011d0 <MX_ADC1_Init+0x9c>)
 800115e:	2200      	movs	r2, #0
 8001160:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001162:	4b1b      	ldr	r3, [pc, #108]	; (80011d0 <MX_ADC1_Init+0x9c>)
 8001164:	2200      	movs	r2, #0
 8001166:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001168:	4b19      	ldr	r3, [pc, #100]	; (80011d0 <MX_ADC1_Init+0x9c>)
 800116a:	2200      	movs	r2, #0
 800116c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001170:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <MX_ADC1_Init+0x9c>)
 8001172:	2200      	movs	r2, #0
 8001174:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001176:	4b16      	ldr	r3, [pc, #88]	; (80011d0 <MX_ADC1_Init+0x9c>)
 8001178:	4a17      	ldr	r2, [pc, #92]	; (80011d8 <MX_ADC1_Init+0xa4>)
 800117a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800117c:	4b14      	ldr	r3, [pc, #80]	; (80011d0 <MX_ADC1_Init+0x9c>)
 800117e:	2200      	movs	r2, #0
 8001180:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001182:	4b13      	ldr	r3, [pc, #76]	; (80011d0 <MX_ADC1_Init+0x9c>)
 8001184:	2201      	movs	r2, #1
 8001186:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001188:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <MX_ADC1_Init+0x9c>)
 800118a:	2200      	movs	r2, #0
 800118c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001190:	4b0f      	ldr	r3, [pc, #60]	; (80011d0 <MX_ADC1_Init+0x9c>)
 8001192:	2201      	movs	r2, #1
 8001194:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001196:	480e      	ldr	r0, [pc, #56]	; (80011d0 <MX_ADC1_Init+0x9c>)
 8001198:	f000 fed4 	bl	8001f44 <HAL_ADC_Init>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 80011a2:	f000 fa61 	bl	8001668 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011aa:	2301      	movs	r3, #1
 80011ac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80011ae:	2300      	movs	r3, #0
 80011b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011b2:	463b      	mov	r3, r7
 80011b4:	4619      	mov	r1, r3
 80011b6:	4806      	ldr	r0, [pc, #24]	; (80011d0 <MX_ADC1_Init+0x9c>)
 80011b8:	f001 f854 	bl	8002264 <HAL_ADC_ConfigChannel>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80011c2:	f000 fa51 	bl	8001668 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011c6:	bf00      	nop
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	2000034c 	.word	0x2000034c
 80011d4:	40012000 	.word	0x40012000
 80011d8:	0f000001 	.word	0x0f000001

080011dc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80011e0:	4b17      	ldr	r3, [pc, #92]	; (8001240 <MX_SPI2_Init+0x64>)
 80011e2:	4a18      	ldr	r2, [pc, #96]	; (8001244 <MX_SPI2_Init+0x68>)
 80011e4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80011e6:	4b16      	ldr	r3, [pc, #88]	; (8001240 <MX_SPI2_Init+0x64>)
 80011e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011ec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80011ee:	4b14      	ldr	r3, [pc, #80]	; (8001240 <MX_SPI2_Init+0x64>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80011f4:	4b12      	ldr	r3, [pc, #72]	; (8001240 <MX_SPI2_Init+0x64>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011fa:	4b11      	ldr	r3, [pc, #68]	; (8001240 <MX_SPI2_Init+0x64>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001200:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <MX_SPI2_Init+0x64>)
 8001202:	2200      	movs	r2, #0
 8001204:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001206:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <MX_SPI2_Init+0x64>)
 8001208:	f44f 7200 	mov.w	r2, #512	; 0x200
 800120c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800120e:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <MX_SPI2_Init+0x64>)
 8001210:	2218      	movs	r2, #24
 8001212:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001214:	4b0a      	ldr	r3, [pc, #40]	; (8001240 <MX_SPI2_Init+0x64>)
 8001216:	2200      	movs	r2, #0
 8001218:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800121a:	4b09      	ldr	r3, [pc, #36]	; (8001240 <MX_SPI2_Init+0x64>)
 800121c:	2200      	movs	r2, #0
 800121e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001220:	4b07      	ldr	r3, [pc, #28]	; (8001240 <MX_SPI2_Init+0x64>)
 8001222:	2200      	movs	r2, #0
 8001224:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001226:	4b06      	ldr	r3, [pc, #24]	; (8001240 <MX_SPI2_Init+0x64>)
 8001228:	220a      	movs	r2, #10
 800122a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800122c:	4804      	ldr	r0, [pc, #16]	; (8001240 <MX_SPI2_Init+0x64>)
 800122e:	f002 fa29 	bl	8003684 <HAL_SPI_Init>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001238:	f000 fa16 	bl	8001668 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800123c:	bf00      	nop
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20000264 	.word	0x20000264
 8001244:	40003800 	.word	0x40003800

08001248 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b08a      	sub	sp, #40	; 0x28
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800124e:	f107 0320 	add.w	r3, r7, #32
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001258:	1d3b      	adds	r3, r7, #4
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]
 8001262:	60da      	str	r2, [r3, #12]
 8001264:	611a      	str	r2, [r3, #16]
 8001266:	615a      	str	r2, [r3, #20]
 8001268:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800126a:	4b22      	ldr	r3, [pc, #136]	; (80012f4 <MX_TIM3_Init+0xac>)
 800126c:	4a22      	ldr	r2, [pc, #136]	; (80012f8 <MX_TIM3_Init+0xb0>)
 800126e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001270:	4b20      	ldr	r3, [pc, #128]	; (80012f4 <MX_TIM3_Init+0xac>)
 8001272:	2200      	movs	r2, #0
 8001274:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001276:	4b1f      	ldr	r3, [pc, #124]	; (80012f4 <MX_TIM3_Init+0xac>)
 8001278:	2200      	movs	r2, #0
 800127a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4000;
 800127c:	4b1d      	ldr	r3, [pc, #116]	; (80012f4 <MX_TIM3_Init+0xac>)
 800127e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001282:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001284:	4b1b      	ldr	r3, [pc, #108]	; (80012f4 <MX_TIM3_Init+0xac>)
 8001286:	2200      	movs	r2, #0
 8001288:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800128a:	4b1a      	ldr	r3, [pc, #104]	; (80012f4 <MX_TIM3_Init+0xac>)
 800128c:	2200      	movs	r2, #0
 800128e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001290:	4818      	ldr	r0, [pc, #96]	; (80012f4 <MX_TIM3_Init+0xac>)
 8001292:	f002 fced 	bl	8003c70 <HAL_TIM_PWM_Init>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800129c:	f000 f9e4 	bl	8001668 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a0:	2300      	movs	r3, #0
 80012a2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a4:	2300      	movs	r3, #0
 80012a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012a8:	f107 0320 	add.w	r3, r7, #32
 80012ac:	4619      	mov	r1, r3
 80012ae:	4811      	ldr	r0, [pc, #68]	; (80012f4 <MX_TIM3_Init+0xac>)
 80012b0:	f003 f932 	bl	8004518 <HAL_TIMEx_MasterConfigSynchronization>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80012ba:	f000 f9d5 	bl	8001668 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012be:	2360      	movs	r3, #96	; 0x60
 80012c0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012c2:	2300      	movs	r3, #0
 80012c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012c6:	2300      	movs	r3, #0
 80012c8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012ce:	1d3b      	adds	r3, r7, #4
 80012d0:	2204      	movs	r2, #4
 80012d2:	4619      	mov	r1, r3
 80012d4:	4807      	ldr	r0, [pc, #28]	; (80012f4 <MX_TIM3_Init+0xac>)
 80012d6:	f002 fe2f 	bl	8003f38 <HAL_TIM_PWM_ConfigChannel>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80012e0:	f000 f9c2 	bl	8001668 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80012e4:	4803      	ldr	r0, [pc, #12]	; (80012f4 <MX_TIM3_Init+0xac>)
 80012e6:	f000 fc63 	bl	8001bb0 <HAL_TIM_MspPostInit>

}
 80012ea:	bf00      	nop
 80012ec:	3728      	adds	r7, #40	; 0x28
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20000304 	.word	0x20000304
 80012f8:	40000400 	.word	0x40000400

080012fc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b08a      	sub	sp, #40	; 0x28
 8001300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001302:	f107 0320 	add.w	r3, r7, #32
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800130c:	1d3b      	adds	r3, r7, #4
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	605a      	str	r2, [r3, #4]
 8001314:	609a      	str	r2, [r3, #8]
 8001316:	60da      	str	r2, [r3, #12]
 8001318:	611a      	str	r2, [r3, #16]
 800131a:	615a      	str	r2, [r3, #20]
 800131c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800131e:	4b22      	ldr	r3, [pc, #136]	; (80013a8 <MX_TIM4_Init+0xac>)
 8001320:	4a22      	ldr	r2, [pc, #136]	; (80013ac <MX_TIM4_Init+0xb0>)
 8001322:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001324:	4b20      	ldr	r3, [pc, #128]	; (80013a8 <MX_TIM4_Init+0xac>)
 8001326:	2200      	movs	r2, #0
 8001328:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800132a:	4b1f      	ldr	r3, [pc, #124]	; (80013a8 <MX_TIM4_Init+0xac>)
 800132c:	2200      	movs	r2, #0
 800132e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4000;
 8001330:	4b1d      	ldr	r3, [pc, #116]	; (80013a8 <MX_TIM4_Init+0xac>)
 8001332:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001336:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001338:	4b1b      	ldr	r3, [pc, #108]	; (80013a8 <MX_TIM4_Init+0xac>)
 800133a:	2200      	movs	r2, #0
 800133c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800133e:	4b1a      	ldr	r3, [pc, #104]	; (80013a8 <MX_TIM4_Init+0xac>)
 8001340:	2200      	movs	r2, #0
 8001342:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001344:	4818      	ldr	r0, [pc, #96]	; (80013a8 <MX_TIM4_Init+0xac>)
 8001346:	f002 fc93 	bl	8003c70 <HAL_TIM_PWM_Init>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001350:	f000 f98a 	bl	8001668 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001354:	2300      	movs	r3, #0
 8001356:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001358:	2300      	movs	r3, #0
 800135a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800135c:	f107 0320 	add.w	r3, r7, #32
 8001360:	4619      	mov	r1, r3
 8001362:	4811      	ldr	r0, [pc, #68]	; (80013a8 <MX_TIM4_Init+0xac>)
 8001364:	f003 f8d8 	bl	8004518 <HAL_TIMEx_MasterConfigSynchronization>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800136e:	f000 f97b 	bl	8001668 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001372:	2360      	movs	r3, #96	; 0x60
 8001374:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001376:	2300      	movs	r3, #0
 8001378:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800137a:	2300      	movs	r3, #0
 800137c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800137e:	2300      	movs	r3, #0
 8001380:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001382:	1d3b      	adds	r3, r7, #4
 8001384:	2200      	movs	r2, #0
 8001386:	4619      	mov	r1, r3
 8001388:	4807      	ldr	r0, [pc, #28]	; (80013a8 <MX_TIM4_Init+0xac>)
 800138a:	f002 fdd5 	bl	8003f38 <HAL_TIM_PWM_ConfigChannel>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001394:	f000 f968 	bl	8001668 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001398:	4803      	ldr	r0, [pc, #12]	; (80013a8 <MX_TIM4_Init+0xac>)
 800139a:	f000 fc09 	bl	8001bb0 <HAL_TIM_MspPostInit>

}
 800139e:	bf00      	nop
 80013a0:	3728      	adds	r7, #40	; 0x28
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	200002bc 	.word	0x200002bc
 80013ac:	40000800 	.word	0x40000800

080013b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013b4:	4b11      	ldr	r3, [pc, #68]	; (80013fc <MX_USART2_UART_Init+0x4c>)
 80013b6:	4a12      	ldr	r2, [pc, #72]	; (8001400 <MX_USART2_UART_Init+0x50>)
 80013b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013ba:	4b10      	ldr	r3, [pc, #64]	; (80013fc <MX_USART2_UART_Init+0x4c>)
 80013bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013c2:	4b0e      	ldr	r3, [pc, #56]	; (80013fc <MX_USART2_UART_Init+0x4c>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013c8:	4b0c      	ldr	r3, [pc, #48]	; (80013fc <MX_USART2_UART_Init+0x4c>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013ce:	4b0b      	ldr	r3, [pc, #44]	; (80013fc <MX_USART2_UART_Init+0x4c>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013d4:	4b09      	ldr	r3, [pc, #36]	; (80013fc <MX_USART2_UART_Init+0x4c>)
 80013d6:	220c      	movs	r2, #12
 80013d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013da:	4b08      	ldr	r3, [pc, #32]	; (80013fc <MX_USART2_UART_Init+0x4c>)
 80013dc:	2200      	movs	r2, #0
 80013de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013e0:	4b06      	ldr	r3, [pc, #24]	; (80013fc <MX_USART2_UART_Init+0x4c>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013e6:	4805      	ldr	r0, [pc, #20]	; (80013fc <MX_USART2_UART_Init+0x4c>)
 80013e8:	f003 f904 	bl	80045f4 <HAL_UART_Init>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013f2:	f000 f939 	bl	8001668 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013f6:	bf00      	nop
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	20000394 	.word	0x20000394
 8001400:	40004400 	.word	0x40004400

08001404 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b08a      	sub	sp, #40	; 0x28
 8001408:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140a:	f107 0314 	add.w	r3, r7, #20
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	605a      	str	r2, [r3, #4]
 8001414:	609a      	str	r2, [r3, #8]
 8001416:	60da      	str	r2, [r3, #12]
 8001418:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	613b      	str	r3, [r7, #16]
 800141e:	4b61      	ldr	r3, [pc, #388]	; (80015a4 <MX_GPIO_Init+0x1a0>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	4a60      	ldr	r2, [pc, #384]	; (80015a4 <MX_GPIO_Init+0x1a0>)
 8001424:	f043 0304 	orr.w	r3, r3, #4
 8001428:	6313      	str	r3, [r2, #48]	; 0x30
 800142a:	4b5e      	ldr	r3, [pc, #376]	; (80015a4 <MX_GPIO_Init+0x1a0>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	f003 0304 	and.w	r3, r3, #4
 8001432:	613b      	str	r3, [r7, #16]
 8001434:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	4b5a      	ldr	r3, [pc, #360]	; (80015a4 <MX_GPIO_Init+0x1a0>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	4a59      	ldr	r2, [pc, #356]	; (80015a4 <MX_GPIO_Init+0x1a0>)
 8001440:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001444:	6313      	str	r3, [r2, #48]	; 0x30
 8001446:	4b57      	ldr	r3, [pc, #348]	; (80015a4 <MX_GPIO_Init+0x1a0>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	60bb      	str	r3, [r7, #8]
 8001456:	4b53      	ldr	r3, [pc, #332]	; (80015a4 <MX_GPIO_Init+0x1a0>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	4a52      	ldr	r2, [pc, #328]	; (80015a4 <MX_GPIO_Init+0x1a0>)
 800145c:	f043 0301 	orr.w	r3, r3, #1
 8001460:	6313      	str	r3, [r2, #48]	; 0x30
 8001462:	4b50      	ldr	r3, [pc, #320]	; (80015a4 <MX_GPIO_Init+0x1a0>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	60bb      	str	r3, [r7, #8]
 800146c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	607b      	str	r3, [r7, #4]
 8001472:	4b4c      	ldr	r3, [pc, #304]	; (80015a4 <MX_GPIO_Init+0x1a0>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	4a4b      	ldr	r2, [pc, #300]	; (80015a4 <MX_GPIO_Init+0x1a0>)
 8001478:	f043 0302 	orr.w	r3, r3, #2
 800147c:	6313      	str	r3, [r2, #48]	; 0x30
 800147e:	4b49      	ldr	r3, [pc, #292]	; (80015a4 <MX_GPIO_Init+0x1a0>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	607b      	str	r3, [r7, #4]
 8001488:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS2_Pin|D4_Pin, GPIO_PIN_RESET);
 800148a:	2200      	movs	r2, #0
 800148c:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 8001490:	4845      	ldr	r0, [pc, #276]	; (80015a8 <MX_GPIO_Init+0x1a4>)
 8001492:	f001 fc45 	bl	8002d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D7_Pin|D8_Pin|D2_Pin, GPIO_PIN_RESET);
 8001496:	2200      	movs	r2, #0
 8001498:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800149c:	4843      	ldr	r0, [pc, #268]	; (80015ac <MX_GPIO_Init+0x1a8>)
 800149e:	f001 fc3f 	bl	8002d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014a8:	4b41      	ldr	r3, [pc, #260]	; (80015b0 <MX_GPIO_Init+0x1ac>)
 80014aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014b0:	f107 0314 	add.w	r3, r7, #20
 80014b4:	4619      	mov	r1, r3
 80014b6:	483f      	ldr	r0, [pc, #252]	; (80015b4 <MX_GPIO_Init+0x1b0>)
 80014b8:	f001 fa96 	bl	80029e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80014bc:	2320      	movs	r3, #32
 80014be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c0:	2302      	movs	r3, #2
 80014c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c8:	2303      	movs	r3, #3
 80014ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014cc:	2305      	movs	r3, #5
 80014ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d0:	f107 0314 	add.w	r3, r7, #20
 80014d4:	4619      	mov	r1, r3
 80014d6:	4835      	ldr	r0, [pc, #212]	; (80015ac <MX_GPIO_Init+0x1a8>)
 80014d8:	f001 fa86 	bl	80029e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : D12_Pin */
  GPIO_InitStruct.Pin = D12_Pin;
 80014dc:	2340      	movs	r3, #64	; 0x40
 80014de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014e0:	2300      	movs	r3, #0
 80014e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014e4:	2301      	movs	r3, #1
 80014e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(D12_GPIO_Port, &GPIO_InitStruct);
 80014e8:	f107 0314 	add.w	r3, r7, #20
 80014ec:	4619      	mov	r1, r3
 80014ee:	482f      	ldr	r0, [pc, #188]	; (80015ac <MX_GPIO_Init+0x1a8>)
 80014f0:	f001 fa7a 	bl	80029e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC1_A_Pin ENC2_A_Pin */
  GPIO_InitStruct.Pin = ENC1_A_Pin|ENC2_A_Pin;
 80014f4:	230a      	movs	r3, #10
 80014f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014f8:	4b2f      	ldr	r3, [pc, #188]	; (80015b8 <MX_GPIO_Init+0x1b4>)
 80014fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001500:	f107 0314 	add.w	r3, r7, #20
 8001504:	4619      	mov	r1, r3
 8001506:	4828      	ldr	r0, [pc, #160]	; (80015a8 <MX_GPIO_Init+0x1a4>)
 8001508:	f001 fa6e 	bl	80029e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC1_B_Pin ENC2_B_Pin */
  GPIO_InitStruct.Pin = ENC1_B_Pin|ENC2_B_Pin;
 800150c:	2314      	movs	r3, #20
 800150e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001510:	2300      	movs	r3, #0
 8001512:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001518:	f107 0314 	add.w	r3, r7, #20
 800151c:	4619      	mov	r1, r3
 800151e:	4822      	ldr	r0, [pc, #136]	; (80015a8 <MX_GPIO_Init+0x1a4>)
 8001520:	f001 fa62 	bl	80029e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : D6_Pin */
  GPIO_InitStruct.Pin = D6_Pin;
 8001524:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001528:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800152a:	2300      	movs	r3, #0
 800152c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800152e:	2301      	movs	r3, #1
 8001530:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(D6_GPIO_Port, &GPIO_InitStruct);
 8001532:	f107 0314 	add.w	r3, r7, #20
 8001536:	4619      	mov	r1, r3
 8001538:	481b      	ldr	r0, [pc, #108]	; (80015a8 <MX_GPIO_Init+0x1a4>)
 800153a:	f001 fa55 	bl	80029e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS2_Pin D4_Pin */
  GPIO_InitStruct.Pin = CS2_Pin|D4_Pin;
 800153e:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8001542:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001544:	2301      	movs	r3, #1
 8001546:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154c:	2300      	movs	r3, #0
 800154e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001550:	f107 0314 	add.w	r3, r7, #20
 8001554:	4619      	mov	r1, r3
 8001556:	4814      	ldr	r0, [pc, #80]	; (80015a8 <MX_GPIO_Init+0x1a4>)
 8001558:	f001 fa46 	bl	80029e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin D8_Pin D2_Pin */
  GPIO_InitStruct.Pin = D7_Pin|D8_Pin|D2_Pin;
 800155c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001560:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001562:	2301      	movs	r3, #1
 8001564:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156a:	2300      	movs	r3, #0
 800156c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156e:	f107 0314 	add.w	r3, r7, #20
 8001572:	4619      	mov	r1, r3
 8001574:	480d      	ldr	r0, [pc, #52]	; (80015ac <MX_GPIO_Init+0x1a8>)
 8001576:	f001 fa37 	bl	80029e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800157a:	2200      	movs	r2, #0
 800157c:	2100      	movs	r1, #0
 800157e:	2007      	movs	r0, #7
 8001580:	f001 f969 	bl	8002856 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001584:	2007      	movs	r0, #7
 8001586:	f001 f982 	bl	800288e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800158a:	2200      	movs	r2, #0
 800158c:	2100      	movs	r1, #0
 800158e:	2009      	movs	r0, #9
 8001590:	f001 f961 	bl	8002856 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001594:	2009      	movs	r0, #9
 8001596:	f001 f97a 	bl	800288e <HAL_NVIC_EnableIRQ>

}
 800159a:	bf00      	nop
 800159c:	3728      	adds	r7, #40	; 0x28
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40023800 	.word	0x40023800
 80015a8:	40020400 	.word	0x40020400
 80015ac:	40020000 	.word	0x40020000
 80015b0:	10210000 	.word	0x10210000
 80015b4:	40020800 	.word	0x40020800
 80015b8:	10110000 	.word	0x10110000

080015bc <get_adc>:

/* USER CODE BEGIN 4 */
ADC_HandleTypeDef get_adc(){
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
	return hadc1;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4a05      	ldr	r2, [pc, #20]	; (80015dc <get_adc+0x20>)
 80015c8:	4618      	mov	r0, r3
 80015ca:	4611      	mov	r1, r2
 80015cc:	2348      	movs	r3, #72	; 0x48
 80015ce:	461a      	mov	r2, r3
 80015d0:	f003 fe48 	bl	8005264 <memcpy>
}
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	2000034c 	.word	0x2000034c

080015e0 <set_pwm_m1>:

void set_pwm_m1(uint16_t value)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b08a      	sub	sp, #40	; 0x28
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	80fb      	strh	r3, [r7, #6]
	TIM_OC_InitTypeDef sConfigOC;
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015ea:	2360      	movs	r3, #96	; 0x60
 80015ec:	60fb      	str	r3, [r7, #12]
	sConfigOC.Pulse = value;
 80015ee:	88fb      	ldrh	r3, [r7, #6]
 80015f0:	613b      	str	r3, [r7, #16]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015f2:	2300      	movs	r3, #0
 80015f4:	617b      	str	r3, [r7, #20]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015f6:	2300      	movs	r3, #0
 80015f8:	61fb      	str	r3, [r7, #28]
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 80015fa:	2104      	movs	r1, #4
 80015fc:	4808      	ldr	r0, [pc, #32]	; (8001620 <set_pwm_m1+0x40>)
 80015fe:	f002 fc37 	bl	8003e70 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2);
 8001602:	f107 030c 	add.w	r3, r7, #12
 8001606:	2204      	movs	r2, #4
 8001608:	4619      	mov	r1, r3
 800160a:	4805      	ldr	r0, [pc, #20]	; (8001620 <set_pwm_m1+0x40>)
 800160c:	f002 fc94 	bl	8003f38 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001610:	2104      	movs	r1, #4
 8001612:	4803      	ldr	r0, [pc, #12]	; (8001620 <set_pwm_m1+0x40>)
 8001614:	f002 fb7c 	bl	8003d10 <HAL_TIM_PWM_Start>
}
 8001618:	bf00      	nop
 800161a:	3728      	adds	r7, #40	; 0x28
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20000304 	.word	0x20000304

08001624 <set_pwm_m2>:

void set_pwm_m2(uint16_t value)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b08a      	sub	sp, #40	; 0x28
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	80fb      	strh	r3, [r7, #6]
	TIM_OC_InitTypeDef sConfigOC;
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800162e:	2360      	movs	r3, #96	; 0x60
 8001630:	60fb      	str	r3, [r7, #12]
	sConfigOC.Pulse = value;
 8001632:	88fb      	ldrh	r3, [r7, #6]
 8001634:	613b      	str	r3, [r7, #16]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001636:	2300      	movs	r3, #0
 8001638:	617b      	str	r3, [r7, #20]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800163a:	2300      	movs	r3, #0
 800163c:	61fb      	str	r3, [r7, #28]
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 800163e:	2100      	movs	r1, #0
 8001640:	4808      	ldr	r0, [pc, #32]	; (8001664 <set_pwm_m2+0x40>)
 8001642:	f002 fc15 	bl	8003e70 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1);
 8001646:	f107 030c 	add.w	r3, r7, #12
 800164a:	2200      	movs	r2, #0
 800164c:	4619      	mov	r1, r3
 800164e:	4805      	ldr	r0, [pc, #20]	; (8001664 <set_pwm_m2+0x40>)
 8001650:	f002 fc72 	bl	8003f38 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001654:	2100      	movs	r1, #0
 8001656:	4803      	ldr	r0, [pc, #12]	; (8001664 <set_pwm_m2+0x40>)
 8001658:	f002 fb5a 	bl	8003d10 <HAL_TIM_PWM_Start>
}
 800165c:	bf00      	nop
 800165e:	3728      	adds	r7, #40	; 0x28
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	200002bc 	.word	0x200002bc

08001668 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800166c:	b672      	cpsid	i
}
 800166e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001670:	e7fe      	b.n	8001670 <Error_Handler+0x8>
	...

08001674 <set_m1_speed>:


enum Motor_Num {M1, M2};


void set_m1_speed(int speed){motor_shield.setM1Speed(-1 * speed);}
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	425b      	negs	r3, r3
 8001680:	4619      	mov	r1, r3
 8001682:	4803      	ldr	r0, [pc, #12]	; (8001690 <set_m1_speed+0x1c>)
 8001684:	f7fe ff6c 	bl	8000560 <_ZN22DualVNH5019MotorShield10setM1SpeedEi>
 8001688:	bf00      	nop
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	2000002c 	.word	0x2000002c

08001694 <set_m2_speed>:
void set_m2_speed(int speed){motor_shield.setM2Speed(-1 * speed);}
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	425b      	negs	r3, r3
 80016a0:	4619      	mov	r1, r3
 80016a2:	4803      	ldr	r0, [pc, #12]	; (80016b0 <set_m2_speed+0x1c>)
 80016a4:	f7fe ffc5 	bl	8000632 <_ZN22DualVNH5019MotorShield10setM2SpeedEi>
 80016a8:	bf00      	nop
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	2000002c 	.word	0x2000002c

080016b4 <get_m1_current>:
int get_m1_current(){return motor_shield.getM1CurrentMilliamps();}
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	4802      	ldr	r0, [pc, #8]	; (80016c4 <get_m1_current+0x10>)
 80016ba:	f7ff f823 	bl	8000704 <_ZN22DualVNH5019MotorShield21getM1CurrentMilliampsEv>
 80016be:	4603      	mov	r3, r0
 80016c0:	4618      	mov	r0, r3
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	2000002c 	.word	0x2000002c

080016c8 <get_m2_current>:
int get_m2_current(){return motor_shield.getM2CurrentMilliamps();}
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	4802      	ldr	r0, [pc, #8]	; (80016d8 <get_m2_current+0x10>)
 80016ce:	f7ff f836 	bl	800073e <_ZN22DualVNH5019MotorShield21getM2CurrentMilliampsEv>
 80016d2:	4603      	mov	r3, r0
 80016d4:	4618      	mov	r0, r3
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	2000002c 	.word	0x2000002c

080016dc <_ZN5MotorC1Ev>:
struct Motor {
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2200      	movs	r2, #0
 80016e8:	609a      	str	r2, [r3, #8]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	60da      	str	r2, [r3, #12]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	611a      	str	r2, [r3, #16]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a1b      	ldr	r2, [pc, #108]	; (8001768 <_ZN5MotorC1Ev+0x8c>)
 80016fa:	615a      	str	r2, [r3, #20]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f04f 0200 	mov.w	r2, #0
 8001702:	619a      	str	r2, [r3, #24]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f04f 0200 	mov.w	r2, #0
 800170a:	61da      	str	r2, [r3, #28]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	621a      	str	r2, [r3, #32]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2200      	movs	r2, #0
 8001716:	625a      	str	r2, [r3, #36]	; 0x24
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2228      	movs	r2, #40	; 0x28
 800171c:	62da      	str	r2, [r3, #44]	; 0x2c
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a12      	ldr	r2, [pc, #72]	; (800176c <_ZN5MotorC1Ev+0x90>)
 8001722:	631a      	str	r2, [r3, #48]	; 0x30
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	4a12      	ldr	r2, [pc, #72]	; (8001770 <_ZN5MotorC1Ev+0x94>)
 8001728:	635a      	str	r2, [r3, #52]	; 0x34
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f04f 0200 	mov.w	r2, #0
 8001730:	639a      	str	r2, [r3, #56]	; 0x38
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f04f 0200 	mov.w	r2, #0
 8001738:	63da      	str	r2, [r3, #60]	; 0x3c
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f04f 0200 	mov.w	r2, #0
 8001740:	641a      	str	r2, [r3, #64]	; 0x40
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f04f 0200 	mov.w	r2, #0
 8001748:	645a      	str	r2, [r3, #68]	; 0x44
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a09      	ldr	r2, [pc, #36]	; (8001774 <_ZN5MotorC1Ev+0x98>)
 800174e:	649a      	str	r2, [r3, #72]	; 0x48
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f06f 0245 	mvn.w	r2, #69	; 0x45
 8001756:	64da      	str	r2, [r3, #76]	; 0x4c
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	4618      	mov	r0, r3
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	41200000 	.word	0x41200000
 800176c:	c3b40000 	.word	0xc3b40000
 8001770:	43b40000 	.word	0x43b40000
 8001774:	fffffe70 	.word	0xfffffe70

08001778 <get_motor>:


Motor get_motor(Motor_Num m){
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	460b      	mov	r3, r1
 8001782:	70fb      	strb	r3, [r7, #3]
    Motor result;
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f7ff ffa9 	bl	80016dc <_ZN5MotorC1Ev>
    if (m == M1){
 800178a:	78fb      	ldrb	r3, [r7, #3]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d10d      	bne.n	80017ac <get_motor+0x34>
        result.offset_fixed = -1 * offset_fixed_global;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f06f 0205 	mvn.w	r2, #5
 8001796:	629a      	str	r2, [r3, #40]	; 0x28
        result.current_offset = 0;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	651a      	str	r2, [r3, #80]	; 0x50
        result.set_speed = &set_m1_speed;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a0c      	ldr	r2, [pc, #48]	; (80017d4 <get_motor+0x5c>)
 80017a2:	601a      	str	r2, [r3, #0]
        result.get_current = &get_m1_current;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	4a0c      	ldr	r2, [pc, #48]	; (80017d8 <get_motor+0x60>)
 80017a8:	605a      	str	r2, [r3, #4]
        result.offset_fixed = offset_fixed_global;
        result.current_offset = 0;
        result.set_speed = &set_m2_speed;
        result.get_current = &get_m2_current;
    }
    return result;
 80017aa:	e00e      	b.n	80017ca <get_motor+0x52>
    }else if (m == M2){
 80017ac:	78fb      	ldrb	r3, [r7, #3]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d10b      	bne.n	80017ca <get_motor+0x52>
        result.offset_fixed = offset_fixed_global;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2206      	movs	r2, #6
 80017b6:	629a      	str	r2, [r3, #40]	; 0x28
        result.current_offset = 0;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	651a      	str	r2, [r3, #80]	; 0x50
        result.set_speed = &set_m2_speed;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a06      	ldr	r2, [pc, #24]	; (80017dc <get_motor+0x64>)
 80017c2:	601a      	str	r2, [r3, #0]
        result.get_current = &get_m2_current;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4a06      	ldr	r2, [pc, #24]	; (80017e0 <get_motor+0x68>)
 80017c8:	605a      	str	r2, [r3, #4]
    return result;
 80017ca:	bf00      	nop
}
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	08001675 	.word	0x08001675
 80017d8:	080016b5 	.word	0x080016b5
 80017dc:	08001695 	.word	0x08001695
 80017e0:	080016c9 	.word	0x080016c9

080017e4 <_ZN5._118C1Ev>:
CAN_Error err2;

//vars for command parser
const int8_t parser_bufsize = 100;
const char *cmnds_strs[] = {"HOME", "MOVE", "STOP"};
struct {
 80017e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	687e      	ldr	r6, [r7, #4]
 80017ee:	4b0e      	ldr	r3, [pc, #56]	; (8001828 <_ZN5._118C1Ev+0x44>)
 80017f0:	4635      	mov	r5, r6
 80017f2:	461c      	mov	r4, r3
 80017f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017f6:	6028      	str	r0, [r5, #0]
 80017f8:	6069      	str	r1, [r5, #4]
 80017fa:	60aa      	str	r2, [r5, #8]
 80017fc:	60eb      	str	r3, [r5, #12]
 80017fe:	cc03      	ldmia	r4!, {r0, r1}
 8001800:	6128      	str	r0, [r5, #16]
 8001802:	6169      	str	r1, [r5, #20]
 8001804:	8823      	ldrh	r3, [r4, #0]
 8001806:	78a2      	ldrb	r2, [r4, #2]
 8001808:	832b      	strh	r3, [r5, #24]
 800180a:	4613      	mov	r3, r2
 800180c:	76ab      	strb	r3, [r5, #26]
 800180e:	f106 031b 	add.w	r3, r6, #27
 8001812:	2249      	movs	r2, #73	; 0x49
 8001814:	2100      	movs	r1, #0
 8001816:	4618      	mov	r0, r3
 8001818:	f003 fd32 	bl	8005280 <memset>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	4618      	mov	r0, r3
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001826:	bf00      	nop
 8001828:	080052c8 	.word	0x080052c8

0800182c <encoder1_ISR>:

//DualVNH5019MotorShield motor_shield;

void ret(){printf("\n");}

void encoder1_ISR(){
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
    if (HAL_GPIO_ReadPin(ENC1_B_GPIO_Port, ENC1_B_Pin)) {
 8001830:	2104      	movs	r1, #4
 8001832:	480c      	ldr	r0, [pc, #48]	; (8001864 <encoder1_ISR+0x38>)
 8001834:	f001 fa5c 	bl	8002cf0 <HAL_GPIO_ReadPin>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	bf14      	ite	ne
 800183e:	2301      	movne	r3, #1
 8001840:	2300      	moveq	r3, #0
 8001842:	b2db      	uxtb	r3, r3
 8001844:	2b00      	cmp	r3, #0
 8001846:	d005      	beq.n	8001854 <encoder1_ISR+0x28>
        motor_1.encoder_pulses++;
 8001848:	4b07      	ldr	r3, [pc, #28]	; (8001868 <encoder1_ISR+0x3c>)
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	3301      	adds	r3, #1
 800184e:	4a06      	ldr	r2, [pc, #24]	; (8001868 <encoder1_ISR+0x3c>)
 8001850:	60d3      	str	r3, [r2, #12]
    } else {
        motor_1.encoder_pulses--;
    }
}
 8001852:	e004      	b.n	800185e <encoder1_ISR+0x32>
        motor_1.encoder_pulses--;
 8001854:	4b04      	ldr	r3, [pc, #16]	; (8001868 <encoder1_ISR+0x3c>)
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	3b01      	subs	r3, #1
 800185a:	4a03      	ldr	r2, [pc, #12]	; (8001868 <encoder1_ISR+0x3c>)
 800185c:	60d3      	str	r3, [r2, #12]
}
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40020400 	.word	0x40020400
 8001868:	200000d0 	.word	0x200000d0

0800186c <encoder2_ISR>:

void encoder2_ISR(){
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
    if (HAL_GPIO_ReadPin(ENC2_B_GPIO_Port, ENC2_B_Pin)) {
 8001870:	2110      	movs	r1, #16
 8001872:	480c      	ldr	r0, [pc, #48]	; (80018a4 <encoder2_ISR+0x38>)
 8001874:	f001 fa3c 	bl	8002cf0 <HAL_GPIO_ReadPin>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	bf14      	ite	ne
 800187e:	2301      	movne	r3, #1
 8001880:	2300      	moveq	r3, #0
 8001882:	b2db      	uxtb	r3, r3
 8001884:	2b00      	cmp	r3, #0
 8001886:	d005      	beq.n	8001894 <encoder2_ISR+0x28>
        motor_2.encoder_pulses++;
 8001888:	4b07      	ldr	r3, [pc, #28]	; (80018a8 <encoder2_ISR+0x3c>)
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	3301      	adds	r3, #1
 800188e:	4a06      	ldr	r2, [pc, #24]	; (80018a8 <encoder2_ISR+0x3c>)
 8001890:	60d3      	str	r3, [r2, #12]
    } else {
        motor_2.encoder_pulses--;
    }
}
 8001892:	e004      	b.n	800189e <encoder2_ISR+0x32>
        motor_2.encoder_pulses--;
 8001894:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <encoder2_ISR+0x3c>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	3b01      	subs	r3, #1
 800189a:	4a03      	ldr	r2, [pc, #12]	; (80018a8 <encoder2_ISR+0x3c>)
 800189c:	60d3      	str	r3, [r2, #12]
}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40020400 	.word	0x40020400
 80018a8:	20000124 	.word	0x20000124

080018ac <user_init>:
    printf("homed\n");
#endif

}

void user_init(){
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b0a2      	sub	sp, #136	; 0x88
 80018b0:	af00      	add	r7, sp, #0
	canMsg1.can_id  = 0x0F6;
 80018b2:	4b29      	ldr	r3, [pc, #164]	; (8001958 <user_init+0xac>)
 80018b4:	22f6      	movs	r2, #246	; 0xf6
 80018b6:	601a      	str	r2, [r3, #0]
	canMsg1.can_dlc = 8;
 80018b8:	4b27      	ldr	r3, [pc, #156]	; (8001958 <user_init+0xac>)
 80018ba:	2208      	movs	r2, #8
 80018bc:	711a      	strb	r2, [r3, #4]
	canMsg1.data[0] = 0xEE;
 80018be:	4b26      	ldr	r3, [pc, #152]	; (8001958 <user_init+0xac>)
 80018c0:	22ee      	movs	r2, #238	; 0xee
 80018c2:	721a      	strb	r2, [r3, #8]
	canMsg1.data[1] = 0xFF;
 80018c4:	4b24      	ldr	r3, [pc, #144]	; (8001958 <user_init+0xac>)
 80018c6:	22ff      	movs	r2, #255	; 0xff
 80018c8:	725a      	strb	r2, [r3, #9]
	canMsg1.data[2] = 0xEE;
 80018ca:	4b23      	ldr	r3, [pc, #140]	; (8001958 <user_init+0xac>)
 80018cc:	22ee      	movs	r2, #238	; 0xee
 80018ce:	729a      	strb	r2, [r3, #10]
	canMsg1.data[3] = 0xEE;
 80018d0:	4b21      	ldr	r3, [pc, #132]	; (8001958 <user_init+0xac>)
 80018d2:	22ee      	movs	r2, #238	; 0xee
 80018d4:	72da      	strb	r2, [r3, #11]
	canMsg1.data[4] = 0xEE;
 80018d6:	4b20      	ldr	r3, [pc, #128]	; (8001958 <user_init+0xac>)
 80018d8:	22ee      	movs	r2, #238	; 0xee
 80018da:	731a      	strb	r2, [r3, #12]
	canMsg1.data[5] = 0xEE;
 80018dc:	4b1e      	ldr	r3, [pc, #120]	; (8001958 <user_init+0xac>)
 80018de:	22ee      	movs	r2, #238	; 0xee
 80018e0:	735a      	strb	r2, [r3, #13]
	canMsg1.data[6] = 0xEE;
 80018e2:	4b1d      	ldr	r3, [pc, #116]	; (8001958 <user_init+0xac>)
 80018e4:	22ee      	movs	r2, #238	; 0xee
 80018e6:	739a      	strb	r2, [r3, #14]
	canMsg1.data[7] = 0xEE;
 80018e8:	4b1b      	ldr	r3, [pc, #108]	; (8001958 <user_init+0xac>)
 80018ea:	22ee      	movs	r2, #238	; 0xee
 80018ec:	73da      	strb	r2, [r3, #15]

	canMsg2.can_id  = 0x036;
 80018ee:	4b1b      	ldr	r3, [pc, #108]	; (800195c <user_init+0xb0>)
 80018f0:	2236      	movs	r2, #54	; 0x36
 80018f2:	601a      	str	r2, [r3, #0]
	canMsg2.can_dlc = 8;
 80018f4:	4b19      	ldr	r3, [pc, #100]	; (800195c <user_init+0xb0>)
 80018f6:	2208      	movs	r2, #8
 80018f8:	711a      	strb	r2, [r3, #4]
	canMsg2.data[0] = 0xAA;
 80018fa:	4b18      	ldr	r3, [pc, #96]	; (800195c <user_init+0xb0>)
 80018fc:	22aa      	movs	r2, #170	; 0xaa
 80018fe:	721a      	strb	r2, [r3, #8]
	canMsg2.data[1] = 0xFF;
 8001900:	4b16      	ldr	r3, [pc, #88]	; (800195c <user_init+0xb0>)
 8001902:	22ff      	movs	r2, #255	; 0xff
 8001904:	725a      	strb	r2, [r3, #9]
	canMsg2.data[2] = 0xAA;
 8001906:	4b15      	ldr	r3, [pc, #84]	; (800195c <user_init+0xb0>)
 8001908:	22aa      	movs	r2, #170	; 0xaa
 800190a:	729a      	strb	r2, [r3, #10]
	canMsg2.data[3] = 0xAA;
 800190c:	4b13      	ldr	r3, [pc, #76]	; (800195c <user_init+0xb0>)
 800190e:	22aa      	movs	r2, #170	; 0xaa
 8001910:	72da      	strb	r2, [r3, #11]
	canMsg2.data[4] = 0xAA;
 8001912:	4b12      	ldr	r3, [pc, #72]	; (800195c <user_init+0xb0>)
 8001914:	22aa      	movs	r2, #170	; 0xaa
 8001916:	731a      	strb	r2, [r3, #12]
	canMsg2.data[5] = 0xAA;
 8001918:	4b10      	ldr	r3, [pc, #64]	; (800195c <user_init+0xb0>)
 800191a:	22aa      	movs	r2, #170	; 0xaa
 800191c:	735a      	strb	r2, [r3, #13]
	canMsg2.data[6] = 0xAA;
 800191e:	4b0f      	ldr	r3, [pc, #60]	; (800195c <user_init+0xb0>)
 8001920:	22aa      	movs	r2, #170	; 0xaa
 8001922:	739a      	strb	r2, [r3, #14]
	canMsg2.data[7] = 0xAA;
 8001924:	4b0d      	ldr	r3, [pc, #52]	; (800195c <user_init+0xb0>)
 8001926:	22aa      	movs	r2, #170	; 0xaa
 8001928:	73da      	strb	r2, [r3, #15]

	motor_shield = DualVNH5019MotorShield();
 800192a:	1d3b      	adds	r3, r7, #4
 800192c:	4618      	mov	r0, r3
 800192e:	f7fe fdcd 	bl	80004cc <_ZN22DualVNH5019MotorShieldC1Ev>
 8001932:	4b0b      	ldr	r3, [pc, #44]	; (8001960 <user_init+0xb4>)
 8001934:	4618      	mov	r0, r3
 8001936:	1d3b      	adds	r3, r7, #4
 8001938:	2284      	movs	r2, #132	; 0x84
 800193a:	4619      	mov	r1, r3
 800193c:	f003 fc92 	bl	8005264 <memcpy>

	MCP_reset();
 8001940:	f7ff f8fc 	bl	8000b3c <MCP_reset>
	MCP_setBitrateClock(CAN_125KBPS, MCP_8MHZ);
 8001944:	2102      	movs	r1, #2
 8001946:	200b      	movs	r0, #11
 8001948:	f7ff f99e 	bl	8000c88 <MCP_setBitrateClock>
	MCP_setNormalMode();
 800194c:	f7ff f994 	bl	8000c78 <MCP_setNormalMode>
}
 8001950:	bf00      	nop
 8001952:	3788      	adds	r7, #136	; 0x88
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	20000178 	.word	0x20000178
 800195c:	20000188 	.word	0x20000188
 8001960:	2000002c 	.word	0x2000002c

08001964 <user_while>:
		printf("no cmd found");
		ret();
	}
}

void user_while(){
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
*/

//	printf("done\n");

	//home_actuators();
	HAL_Delay(5000);
 8001968:	f241 3088 	movw	r0, #5000	; 0x1388
 800196c:	f000 fac6 	bl	8001efc <HAL_Delay>


}
 8001970:	bf00      	nop
 8001972:	bd80      	pop	{r7, pc}

08001974 <_Z41__static_initialization_and_destruction_0ii>:
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d114      	bne.n	80019ae <_Z41__static_initialization_and_destruction_0ii+0x3a>
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800198a:	4293      	cmp	r3, r2
 800198c:	d10f      	bne.n	80019ae <_Z41__static_initialization_and_destruction_0ii+0x3a>
DualVNH5019MotorShield motor_shield;
 800198e:	480a      	ldr	r0, [pc, #40]	; (80019b8 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8001990:	f7fe fd9c 	bl	80004cc <_ZN22DualVNH5019MotorShieldC1Ev>
Motor motor_1 = get_motor(M1);
 8001994:	4b09      	ldr	r3, [pc, #36]	; (80019bc <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8001996:	2100      	movs	r1, #0
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff feed 	bl	8001778 <get_motor>
Motor motor_2 = get_motor(M2);
 800199e:	4b08      	ldr	r3, [pc, #32]	; (80019c0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80019a0:	2101      	movs	r1, #1
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff fee8 	bl	8001778 <get_motor>
} parser;
 80019a8:	4806      	ldr	r0, [pc, #24]	; (80019c4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80019aa:	f7ff ff1b 	bl	80017e4 <_ZN5._118C1Ev>
}
 80019ae:	bf00      	nop
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	2000002c 	.word	0x2000002c
 80019bc:	200000d0 	.word	0x200000d0
 80019c0:	20000124 	.word	0x20000124
 80019c4:	20000198 	.word	0x20000198

080019c8 <_GLOBAL__sub_I_motor_shield>:
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80019d0:	2001      	movs	r0, #1
 80019d2:	f7ff ffcf 	bl	8001974 <_Z41__static_initialization_and_destruction_0ii>
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	607b      	str	r3, [r7, #4]
 80019e2:	4b10      	ldr	r3, [pc, #64]	; (8001a24 <HAL_MspInit+0x4c>)
 80019e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e6:	4a0f      	ldr	r2, [pc, #60]	; (8001a24 <HAL_MspInit+0x4c>)
 80019e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019ec:	6453      	str	r3, [r2, #68]	; 0x44
 80019ee:	4b0d      	ldr	r3, [pc, #52]	; (8001a24 <HAL_MspInit+0x4c>)
 80019f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019f6:	607b      	str	r3, [r7, #4]
 80019f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	603b      	str	r3, [r7, #0]
 80019fe:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <HAL_MspInit+0x4c>)
 8001a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a02:	4a08      	ldr	r2, [pc, #32]	; (8001a24 <HAL_MspInit+0x4c>)
 8001a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a08:	6413      	str	r3, [r2, #64]	; 0x40
 8001a0a:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <HAL_MspInit+0x4c>)
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a12:	603b      	str	r3, [r7, #0]
 8001a14:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a16:	2007      	movs	r0, #7
 8001a18:	f000 ff12 	bl	8002840 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a1c:	bf00      	nop
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40023800 	.word	0x40023800

08001a28 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b08a      	sub	sp, #40	; 0x28
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a30:	f107 0314 	add.w	r3, r7, #20
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	605a      	str	r2, [r3, #4]
 8001a3a:	609a      	str	r2, [r3, #8]
 8001a3c:	60da      	str	r2, [r3, #12]
 8001a3e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a17      	ldr	r2, [pc, #92]	; (8001aa4 <HAL_ADC_MspInit+0x7c>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d127      	bne.n	8001a9a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	613b      	str	r3, [r7, #16]
 8001a4e:	4b16      	ldr	r3, [pc, #88]	; (8001aa8 <HAL_ADC_MspInit+0x80>)
 8001a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a52:	4a15      	ldr	r2, [pc, #84]	; (8001aa8 <HAL_ADC_MspInit+0x80>)
 8001a54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a58:	6453      	str	r3, [r2, #68]	; 0x44
 8001a5a:	4b13      	ldr	r3, [pc, #76]	; (8001aa8 <HAL_ADC_MspInit+0x80>)
 8001a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a62:	613b      	str	r3, [r7, #16]
 8001a64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	4b0f      	ldr	r3, [pc, #60]	; (8001aa8 <HAL_ADC_MspInit+0x80>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	4a0e      	ldr	r2, [pc, #56]	; (8001aa8 <HAL_ADC_MspInit+0x80>)
 8001a70:	f043 0301 	orr.w	r3, r3, #1
 8001a74:	6313      	str	r3, [r2, #48]	; 0x30
 8001a76:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <HAL_ADC_MspInit+0x80>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = A0_Pin|A1_Pin;
 8001a82:	2303      	movs	r3, #3
 8001a84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a86:	2303      	movs	r3, #3
 8001a88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a8e:	f107 0314 	add.w	r3, r7, #20
 8001a92:	4619      	mov	r1, r3
 8001a94:	4805      	ldr	r0, [pc, #20]	; (8001aac <HAL_ADC_MspInit+0x84>)
 8001a96:	f000 ffa7 	bl	80029e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a9a:	bf00      	nop
 8001a9c:	3728      	adds	r7, #40	; 0x28
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40012000 	.word	0x40012000
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	40020000 	.word	0x40020000

08001ab0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b08a      	sub	sp, #40	; 0x28
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab8:	f107 0314 	add.w	r3, r7, #20
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	609a      	str	r2, [r3, #8]
 8001ac4:	60da      	str	r2, [r3, #12]
 8001ac6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a19      	ldr	r2, [pc, #100]	; (8001b34 <HAL_SPI_MspInit+0x84>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d12c      	bne.n	8001b2c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	613b      	str	r3, [r7, #16]
 8001ad6:	4b18      	ldr	r3, [pc, #96]	; (8001b38 <HAL_SPI_MspInit+0x88>)
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	4a17      	ldr	r2, [pc, #92]	; (8001b38 <HAL_SPI_MspInit+0x88>)
 8001adc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ae2:	4b15      	ldr	r3, [pc, #84]	; (8001b38 <HAL_SPI_MspInit+0x88>)
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aea:	613b      	str	r3, [r7, #16]
 8001aec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	60fb      	str	r3, [r7, #12]
 8001af2:	4b11      	ldr	r3, [pc, #68]	; (8001b38 <HAL_SPI_MspInit+0x88>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	4a10      	ldr	r2, [pc, #64]	; (8001b38 <HAL_SPI_MspInit+0x88>)
 8001af8:	f043 0302 	orr.w	r3, r3, #2
 8001afc:	6313      	str	r3, [r2, #48]	; 0x30
 8001afe:	4b0e      	ldr	r3, [pc, #56]	; (8001b38 <HAL_SPI_MspInit+0x88>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001b0a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001b0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b10:	2302      	movs	r3, #2
 8001b12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b14:	2300      	movs	r3, #0
 8001b16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b1c:	2305      	movs	r3, #5
 8001b1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b20:	f107 0314 	add.w	r3, r7, #20
 8001b24:	4619      	mov	r1, r3
 8001b26:	4805      	ldr	r0, [pc, #20]	; (8001b3c <HAL_SPI_MspInit+0x8c>)
 8001b28:	f000 ff5e 	bl	80029e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001b2c:	bf00      	nop
 8001b2e:	3728      	adds	r7, #40	; 0x28
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40003800 	.word	0x40003800
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	40020400 	.word	0x40020400

08001b40 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a15      	ldr	r2, [pc, #84]	; (8001ba4 <HAL_TIM_PWM_MspInit+0x64>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d10e      	bne.n	8001b70 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	60fb      	str	r3, [r7, #12]
 8001b56:	4b14      	ldr	r3, [pc, #80]	; (8001ba8 <HAL_TIM_PWM_MspInit+0x68>)
 8001b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5a:	4a13      	ldr	r2, [pc, #76]	; (8001ba8 <HAL_TIM_PWM_MspInit+0x68>)
 8001b5c:	f043 0302 	orr.w	r3, r3, #2
 8001b60:	6413      	str	r3, [r2, #64]	; 0x40
 8001b62:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <HAL_TIM_PWM_MspInit+0x68>)
 8001b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001b6e:	e012      	b.n	8001b96 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM4)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a0d      	ldr	r2, [pc, #52]	; (8001bac <HAL_TIM_PWM_MspInit+0x6c>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d10d      	bne.n	8001b96 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60bb      	str	r3, [r7, #8]
 8001b7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ba8 <HAL_TIM_PWM_MspInit+0x68>)
 8001b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b82:	4a09      	ldr	r2, [pc, #36]	; (8001ba8 <HAL_TIM_PWM_MspInit+0x68>)
 8001b84:	f043 0304 	orr.w	r3, r3, #4
 8001b88:	6413      	str	r3, [r2, #64]	; 0x40
 8001b8a:	4b07      	ldr	r3, [pc, #28]	; (8001ba8 <HAL_TIM_PWM_MspInit+0x68>)
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8e:	f003 0304 	and.w	r3, r3, #4
 8001b92:	60bb      	str	r3, [r7, #8]
 8001b94:	68bb      	ldr	r3, [r7, #8]
}
 8001b96:	bf00      	nop
 8001b98:	3714      	adds	r7, #20
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	40000400 	.word	0x40000400
 8001ba8:	40023800 	.word	0x40023800
 8001bac:	40000800 	.word	0x40000800

08001bb0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08a      	sub	sp, #40	; 0x28
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb8:	f107 0314 	add.w	r3, r7, #20
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	60da      	str	r2, [r3, #12]
 8001bc6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a24      	ldr	r2, [pc, #144]	; (8001c60 <HAL_TIM_MspPostInit+0xb0>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d11e      	bne.n	8001c10 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	613b      	str	r3, [r7, #16]
 8001bd6:	4b23      	ldr	r3, [pc, #140]	; (8001c64 <HAL_TIM_MspPostInit+0xb4>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	4a22      	ldr	r2, [pc, #136]	; (8001c64 <HAL_TIM_MspPostInit+0xb4>)
 8001bdc:	f043 0304 	orr.w	r3, r3, #4
 8001be0:	6313      	str	r3, [r2, #48]	; 0x30
 8001be2:	4b20      	ldr	r3, [pc, #128]	; (8001c64 <HAL_TIM_MspPostInit+0xb4>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be6:	f003 0304 	and.w	r3, r3, #4
 8001bea:	613b      	str	r3, [r7, #16]
 8001bec:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = D9_Pin;
 8001bee:	2380      	movs	r3, #128	; 0x80
 8001bf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001bfe:	2302      	movs	r3, #2
 8001c00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(D9_GPIO_Port, &GPIO_InitStruct);
 8001c02:	f107 0314 	add.w	r3, r7, #20
 8001c06:	4619      	mov	r1, r3
 8001c08:	4817      	ldr	r0, [pc, #92]	; (8001c68 <HAL_TIM_MspPostInit+0xb8>)
 8001c0a:	f000 feed 	bl	80029e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001c0e:	e022      	b.n	8001c56 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM4)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a15      	ldr	r2, [pc, #84]	; (8001c6c <HAL_TIM_MspPostInit+0xbc>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d11d      	bne.n	8001c56 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60fb      	str	r3, [r7, #12]
 8001c1e:	4b11      	ldr	r3, [pc, #68]	; (8001c64 <HAL_TIM_MspPostInit+0xb4>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	4a10      	ldr	r2, [pc, #64]	; (8001c64 <HAL_TIM_MspPostInit+0xb4>)
 8001c24:	f043 0302 	orr.w	r3, r3, #2
 8001c28:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2a:	4b0e      	ldr	r3, [pc, #56]	; (8001c64 <HAL_TIM_MspPostInit+0xb4>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = D10_Pin;
 8001c36:	2340      	movs	r3, #64	; 0x40
 8001c38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c42:	2300      	movs	r3, #0
 8001c44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001c46:	2302      	movs	r3, #2
 8001c48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(D10_GPIO_Port, &GPIO_InitStruct);
 8001c4a:	f107 0314 	add.w	r3, r7, #20
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4807      	ldr	r0, [pc, #28]	; (8001c70 <HAL_TIM_MspPostInit+0xc0>)
 8001c52:	f000 fec9 	bl	80029e8 <HAL_GPIO_Init>
}
 8001c56:	bf00      	nop
 8001c58:	3728      	adds	r7, #40	; 0x28
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40000400 	.word	0x40000400
 8001c64:	40023800 	.word	0x40023800
 8001c68:	40020800 	.word	0x40020800
 8001c6c:	40000800 	.word	0x40000800
 8001c70:	40020400 	.word	0x40020400

08001c74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b08a      	sub	sp, #40	; 0x28
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c7c:	f107 0314 	add.w	r3, r7, #20
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	605a      	str	r2, [r3, #4]
 8001c86:	609a      	str	r2, [r3, #8]
 8001c88:	60da      	str	r2, [r3, #12]
 8001c8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a1d      	ldr	r2, [pc, #116]	; (8001d08 <HAL_UART_MspInit+0x94>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d133      	bne.n	8001cfe <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c96:	2300      	movs	r3, #0
 8001c98:	613b      	str	r3, [r7, #16]
 8001c9a:	4b1c      	ldr	r3, [pc, #112]	; (8001d0c <HAL_UART_MspInit+0x98>)
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9e:	4a1b      	ldr	r2, [pc, #108]	; (8001d0c <HAL_UART_MspInit+0x98>)
 8001ca0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ca6:	4b19      	ldr	r3, [pc, #100]	; (8001d0c <HAL_UART_MspInit+0x98>)
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cae:	613b      	str	r3, [r7, #16]
 8001cb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	60fb      	str	r3, [r7, #12]
 8001cb6:	4b15      	ldr	r3, [pc, #84]	; (8001d0c <HAL_UART_MspInit+0x98>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	4a14      	ldr	r2, [pc, #80]	; (8001d0c <HAL_UART_MspInit+0x98>)
 8001cbc:	f043 0301 	orr.w	r3, r3, #1
 8001cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc2:	4b12      	ldr	r3, [pc, #72]	; (8001d0c <HAL_UART_MspInit+0x98>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001cce:	230c      	movs	r3, #12
 8001cd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cde:	2307      	movs	r3, #7
 8001ce0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce2:	f107 0314 	add.w	r3, r7, #20
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4809      	ldr	r0, [pc, #36]	; (8001d10 <HAL_UART_MspInit+0x9c>)
 8001cea:	f000 fe7d 	bl	80029e8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001cee:	2200      	movs	r2, #0
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	2026      	movs	r0, #38	; 0x26
 8001cf4:	f000 fdaf 	bl	8002856 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001cf8:	2026      	movs	r0, #38	; 0x26
 8001cfa:	f000 fdc8 	bl	800288e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001cfe:	bf00      	nop
 8001d00:	3728      	adds	r7, #40	; 0x28
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40004400 	.word	0x40004400
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	40020000 	.word	0x40020000

08001d14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d18:	e7fe      	b.n	8001d18 <NMI_Handler+0x4>

08001d1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d1e:	e7fe      	b.n	8001d1e <HardFault_Handler+0x4>

08001d20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d24:	e7fe      	b.n	8001d24 <MemManage_Handler+0x4>

08001d26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d26:	b480      	push	{r7}
 8001d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d2a:	e7fe      	b.n	8001d2a <BusFault_Handler+0x4>

08001d2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d30:	e7fe      	b.n	8001d30 <UsageFault_Handler+0x4>

08001d32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d32:	b480      	push	{r7}
 8001d34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d36:	bf00      	nop
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d44:	bf00      	nop
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr

08001d4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d52:	bf00      	nop
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d60:	f000 f8ac 	bl	8001ebc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d64:	bf00      	nop
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
	encoder1_ISR();
 8001d6c:	f7ff fd5e 	bl	800182c <encoder1_ISR>
  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001d70:	2002      	movs	r0, #2
 8001d72:	f000 ffef 	bl	8002d54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001d76:	bf00      	nop
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
	encoder2_ISR();
 8001d7e:	f7ff fd75 	bl	800186c <encoder2_ISR>
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001d82:	2008      	movs	r0, #8
 8001d84:	f000 ffe6 	bl	8002d54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001d88:	bf00      	nop
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	UART_IT_RXNE;
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d90:	4802      	ldr	r0, [pc, #8]	; (8001d9c <USART2_IRQHandler+0x10>)
 8001d92:	f002 fcb9 	bl	8004708 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d96:	bf00      	nop
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	20000394 	.word	0x20000394

08001da0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001da4:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <SystemInit+0x20>)
 8001da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001daa:	4a05      	ldr	r2, [pc, #20]	; (8001dc0 <SystemInit+0x20>)
 8001dac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001db0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001db4:	bf00      	nop
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	e000ed00 	.word	0xe000ed00

08001dc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001dc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dfc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001dc8:	480d      	ldr	r0, [pc, #52]	; (8001e00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001dca:	490e      	ldr	r1, [pc, #56]	; (8001e04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001dcc:	4a0e      	ldr	r2, [pc, #56]	; (8001e08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001dce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dd0:	e002      	b.n	8001dd8 <LoopCopyDataInit>

08001dd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dd6:	3304      	adds	r3, #4

08001dd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ddc:	d3f9      	bcc.n	8001dd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dde:	4a0b      	ldr	r2, [pc, #44]	; (8001e0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001de0:	4c0b      	ldr	r4, [pc, #44]	; (8001e10 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001de2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001de4:	e001      	b.n	8001dea <LoopFillZerobss>

08001de6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001de6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001de8:	3204      	adds	r2, #4

08001dea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dec:	d3fb      	bcc.n	8001de6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001dee:	f7ff ffd7 	bl	8001da0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001df2:	f003 fa13 	bl	800521c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001df6:	f7ff f911 	bl	800101c <main>
  bx  lr    
 8001dfa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001dfc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001e00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e04:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001e08:	080053c4 	.word	0x080053c4
  ldr r2, =_sbss
 8001e0c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001e10:	2000040c 	.word	0x2000040c

08001e14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e14:	e7fe      	b.n	8001e14 <ADC_IRQHandler>
	...

08001e18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e1c:	4b0e      	ldr	r3, [pc, #56]	; (8001e58 <HAL_Init+0x40>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a0d      	ldr	r2, [pc, #52]	; (8001e58 <HAL_Init+0x40>)
 8001e22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e28:	4b0b      	ldr	r3, [pc, #44]	; (8001e58 <HAL_Init+0x40>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a0a      	ldr	r2, [pc, #40]	; (8001e58 <HAL_Init+0x40>)
 8001e2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e34:	4b08      	ldr	r3, [pc, #32]	; (8001e58 <HAL_Init+0x40>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a07      	ldr	r2, [pc, #28]	; (8001e58 <HAL_Init+0x40>)
 8001e3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e40:	2003      	movs	r0, #3
 8001e42:	f000 fcfd 	bl	8002840 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e46:	2000      	movs	r0, #0
 8001e48:	f000 f808 	bl	8001e5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e4c:	f7ff fdc4 	bl	80019d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	40023c00 	.word	0x40023c00

08001e5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e64:	4b12      	ldr	r3, [pc, #72]	; (8001eb0 <HAL_InitTick+0x54>)
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	4b12      	ldr	r3, [pc, #72]	; (8001eb4 <HAL_InitTick+0x58>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e72:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f000 fd15 	bl	80028aa <HAL_SYSTICK_Config>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e00e      	b.n	8001ea8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2b0f      	cmp	r3, #15
 8001e8e:	d80a      	bhi.n	8001ea6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e90:	2200      	movs	r2, #0
 8001e92:	6879      	ldr	r1, [r7, #4]
 8001e94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e98:	f000 fcdd 	bl	8002856 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e9c:	4a06      	ldr	r2, [pc, #24]	; (8001eb8 <HAL_InitTick+0x5c>)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	e000      	b.n	8001ea8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3708      	adds	r7, #8
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	20000000 	.word	0x20000000
 8001eb4:	20000008 	.word	0x20000008
 8001eb8:	20000004 	.word	0x20000004

08001ebc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ec0:	4b06      	ldr	r3, [pc, #24]	; (8001edc <HAL_IncTick+0x20>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	4b06      	ldr	r3, [pc, #24]	; (8001ee0 <HAL_IncTick+0x24>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4413      	add	r3, r2
 8001ecc:	4a04      	ldr	r2, [pc, #16]	; (8001ee0 <HAL_IncTick+0x24>)
 8001ece:	6013      	str	r3, [r2, #0]
}
 8001ed0:	bf00      	nop
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	20000008 	.word	0x20000008
 8001ee0:	20000408 	.word	0x20000408

08001ee4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ee8:	4b03      	ldr	r3, [pc, #12]	; (8001ef8 <HAL_GetTick+0x14>)
 8001eea:	681b      	ldr	r3, [r3, #0]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	20000408 	.word	0x20000408

08001efc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f04:	f7ff ffee 	bl	8001ee4 <HAL_GetTick>
 8001f08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f14:	d005      	beq.n	8001f22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f16:	4b0a      	ldr	r3, [pc, #40]	; (8001f40 <HAL_Delay+0x44>)
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	4413      	add	r3, r2
 8001f20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f22:	bf00      	nop
 8001f24:	f7ff ffde 	bl	8001ee4 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	68fa      	ldr	r2, [r7, #12]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d8f7      	bhi.n	8001f24 <HAL_Delay+0x28>
  {
  }
}
 8001f34:	bf00      	nop
 8001f36:	bf00      	nop
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	20000008 	.word	0x20000008

08001f44 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e033      	b.n	8001fc2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d109      	bne.n	8001f76 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f7ff fd60 	bl	8001a28 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7a:	f003 0310 	and.w	r3, r3, #16
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d118      	bne.n	8001fb4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f86:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f8a:	f023 0302 	bic.w	r3, r3, #2
 8001f8e:	f043 0202 	orr.w	r2, r3, #2
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 fa86 	bl	80024a8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa6:	f023 0303 	bic.w	r3, r3, #3
 8001faa:	f043 0201 	orr.w	r2, r3, #1
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	641a      	str	r2, [r3, #64]	; 0x40
 8001fb2:	e001      	b.n	8001fb8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
	...

08001fcc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d101      	bne.n	8001fe6 <HAL_ADC_Start+0x1a>
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	e097      	b.n	8002116 <HAL_ADC_Start+0x14a>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f003 0301 	and.w	r3, r3, #1
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d018      	beq.n	800202e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	689a      	ldr	r2, [r3, #8]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f042 0201 	orr.w	r2, r2, #1
 800200a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800200c:	4b45      	ldr	r3, [pc, #276]	; (8002124 <HAL_ADC_Start+0x158>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a45      	ldr	r2, [pc, #276]	; (8002128 <HAL_ADC_Start+0x15c>)
 8002012:	fba2 2303 	umull	r2, r3, r2, r3
 8002016:	0c9a      	lsrs	r2, r3, #18
 8002018:	4613      	mov	r3, r2
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	4413      	add	r3, r2
 800201e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002020:	e002      	b.n	8002028 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	3b01      	subs	r3, #1
 8002026:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d1f9      	bne.n	8002022 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f003 0301 	and.w	r3, r3, #1
 8002038:	2b01      	cmp	r3, #1
 800203a:	d15f      	bne.n	80020fc <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002040:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002044:	f023 0301 	bic.w	r3, r3, #1
 8002048:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800205a:	2b00      	cmp	r3, #0
 800205c:	d007      	beq.n	800206e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002062:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002066:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002072:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002076:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800207a:	d106      	bne.n	800208a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002080:	f023 0206 	bic.w	r2, r3, #6
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	645a      	str	r2, [r3, #68]	; 0x44
 8002088:	e002      	b.n	8002090 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002098:	4b24      	ldr	r3, [pc, #144]	; (800212c <HAL_ADC_Start+0x160>)
 800209a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80020a4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f003 031f 	and.w	r3, r3, #31
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d10f      	bne.n	80020d2 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d129      	bne.n	8002114 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	689a      	ldr	r2, [r3, #8]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80020ce:	609a      	str	r2, [r3, #8]
 80020d0:	e020      	b.n	8002114 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a16      	ldr	r2, [pc, #88]	; (8002130 <HAL_ADC_Start+0x164>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d11b      	bne.n	8002114 <HAL_ADC_Start+0x148>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d114      	bne.n	8002114 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	689a      	ldr	r2, [r3, #8]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80020f8:	609a      	str	r2, [r3, #8]
 80020fa:	e00b      	b.n	8002114 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002100:	f043 0210 	orr.w	r2, r3, #16
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210c:	f043 0201 	orr.w	r2, r3, #1
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3714      	adds	r7, #20
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	20000000 	.word	0x20000000
 8002128:	431bde83 	.word	0x431bde83
 800212c:	40012300 	.word	0x40012300
 8002130:	40012000 	.word	0x40012000

08002134 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800213e:	2300      	movs	r3, #0
 8002140:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800214c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002150:	d113      	bne.n	800217a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800215c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002160:	d10b      	bne.n	800217a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002166:	f043 0220 	orr.w	r2, r3, #32
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e063      	b.n	8002242 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800217a:	f7ff feb3 	bl	8001ee4 <HAL_GetTick>
 800217e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002180:	e021      	b.n	80021c6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002188:	d01d      	beq.n	80021c6 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d007      	beq.n	80021a0 <HAL_ADC_PollForConversion+0x6c>
 8002190:	f7ff fea8 	bl	8001ee4 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	683a      	ldr	r2, [r7, #0]
 800219c:	429a      	cmp	r2, r3
 800219e:	d212      	bcs.n	80021c6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d00b      	beq.n	80021c6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b2:	f043 0204 	orr.w	r2, r3, #4
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e03d      	b.n	8002242 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d1d6      	bne.n	8002182 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f06f 0212 	mvn.w	r2, #18
 80021dc:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d123      	bne.n	8002240 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d11f      	bne.n	8002240 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002206:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800220a:	2b00      	cmp	r3, #0
 800220c:	d006      	beq.n	800221c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002218:	2b00      	cmp	r3, #0
 800221a:	d111      	bne.n	8002240 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002220:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d105      	bne.n	8002240 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002238:	f043 0201 	orr.w	r2, r3, #1
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3710      	adds	r7, #16
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800224a:	b480      	push	{r7}
 800224c:	b083      	sub	sp, #12
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002258:	4618      	mov	r0, r3
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800226e:	2300      	movs	r3, #0
 8002270:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002278:	2b01      	cmp	r3, #1
 800227a:	d101      	bne.n	8002280 <HAL_ADC_ConfigChannel+0x1c>
 800227c:	2302      	movs	r3, #2
 800227e:	e105      	b.n	800248c <HAL_ADC_ConfigChannel+0x228>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2b09      	cmp	r3, #9
 800228e:	d925      	bls.n	80022dc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	68d9      	ldr	r1, [r3, #12]
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	b29b      	uxth	r3, r3
 800229c:	461a      	mov	r2, r3
 800229e:	4613      	mov	r3, r2
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	4413      	add	r3, r2
 80022a4:	3b1e      	subs	r3, #30
 80022a6:	2207      	movs	r2, #7
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	43da      	mvns	r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	400a      	ands	r2, r1
 80022b4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68d9      	ldr	r1, [r3, #12]
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	689a      	ldr	r2, [r3, #8]
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	4618      	mov	r0, r3
 80022c8:	4603      	mov	r3, r0
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	4403      	add	r3, r0
 80022ce:	3b1e      	subs	r3, #30
 80022d0:	409a      	lsls	r2, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	430a      	orrs	r2, r1
 80022d8:	60da      	str	r2, [r3, #12]
 80022da:	e022      	b.n	8002322 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6919      	ldr	r1, [r3, #16]
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	461a      	mov	r2, r3
 80022ea:	4613      	mov	r3, r2
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	4413      	add	r3, r2
 80022f0:	2207      	movs	r2, #7
 80022f2:	fa02 f303 	lsl.w	r3, r2, r3
 80022f6:	43da      	mvns	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	400a      	ands	r2, r1
 80022fe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6919      	ldr	r1, [r3, #16]
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	689a      	ldr	r2, [r3, #8]
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	b29b      	uxth	r3, r3
 8002310:	4618      	mov	r0, r3
 8002312:	4603      	mov	r3, r0
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	4403      	add	r3, r0
 8002318:	409a      	lsls	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	430a      	orrs	r2, r1
 8002320:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	2b06      	cmp	r3, #6
 8002328:	d824      	bhi.n	8002374 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685a      	ldr	r2, [r3, #4]
 8002334:	4613      	mov	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	4413      	add	r3, r2
 800233a:	3b05      	subs	r3, #5
 800233c:	221f      	movs	r2, #31
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	43da      	mvns	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	400a      	ands	r2, r1
 800234a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	b29b      	uxth	r3, r3
 8002358:	4618      	mov	r0, r3
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685a      	ldr	r2, [r3, #4]
 800235e:	4613      	mov	r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	4413      	add	r3, r2
 8002364:	3b05      	subs	r3, #5
 8002366:	fa00 f203 	lsl.w	r2, r0, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	430a      	orrs	r2, r1
 8002370:	635a      	str	r2, [r3, #52]	; 0x34
 8002372:	e04c      	b.n	800240e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	2b0c      	cmp	r3, #12
 800237a:	d824      	bhi.n	80023c6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685a      	ldr	r2, [r3, #4]
 8002386:	4613      	mov	r3, r2
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	4413      	add	r3, r2
 800238c:	3b23      	subs	r3, #35	; 0x23
 800238e:	221f      	movs	r2, #31
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	43da      	mvns	r2, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	400a      	ands	r2, r1
 800239c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	4618      	mov	r0, r3
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685a      	ldr	r2, [r3, #4]
 80023b0:	4613      	mov	r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	4413      	add	r3, r2
 80023b6:	3b23      	subs	r3, #35	; 0x23
 80023b8:	fa00 f203 	lsl.w	r2, r0, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	430a      	orrs	r2, r1
 80023c2:	631a      	str	r2, [r3, #48]	; 0x30
 80023c4:	e023      	b.n	800240e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685a      	ldr	r2, [r3, #4]
 80023d0:	4613      	mov	r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	4413      	add	r3, r2
 80023d6:	3b41      	subs	r3, #65	; 0x41
 80023d8:	221f      	movs	r2, #31
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	43da      	mvns	r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	400a      	ands	r2, r1
 80023e6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	4618      	mov	r0, r3
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685a      	ldr	r2, [r3, #4]
 80023fa:	4613      	mov	r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	4413      	add	r3, r2
 8002400:	3b41      	subs	r3, #65	; 0x41
 8002402:	fa00 f203 	lsl.w	r2, r0, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	430a      	orrs	r2, r1
 800240c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800240e:	4b22      	ldr	r3, [pc, #136]	; (8002498 <HAL_ADC_ConfigChannel+0x234>)
 8002410:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a21      	ldr	r2, [pc, #132]	; (800249c <HAL_ADC_ConfigChannel+0x238>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d109      	bne.n	8002430 <HAL_ADC_ConfigChannel+0x1cc>
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2b12      	cmp	r3, #18
 8002422:	d105      	bne.n	8002430 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a19      	ldr	r2, [pc, #100]	; (800249c <HAL_ADC_ConfigChannel+0x238>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d123      	bne.n	8002482 <HAL_ADC_ConfigChannel+0x21e>
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2b10      	cmp	r3, #16
 8002440:	d003      	beq.n	800244a <HAL_ADC_ConfigChannel+0x1e6>
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2b11      	cmp	r3, #17
 8002448:	d11b      	bne.n	8002482 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2b10      	cmp	r3, #16
 800245c:	d111      	bne.n	8002482 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800245e:	4b10      	ldr	r3, [pc, #64]	; (80024a0 <HAL_ADC_ConfigChannel+0x23c>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a10      	ldr	r2, [pc, #64]	; (80024a4 <HAL_ADC_ConfigChannel+0x240>)
 8002464:	fba2 2303 	umull	r2, r3, r2, r3
 8002468:	0c9a      	lsrs	r2, r3, #18
 800246a:	4613      	mov	r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	4413      	add	r3, r2
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002474:	e002      	b.n	800247c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	3b01      	subs	r3, #1
 800247a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1f9      	bne.n	8002476 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800248a:	2300      	movs	r3, #0
}
 800248c:	4618      	mov	r0, r3
 800248e:	3714      	adds	r7, #20
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr
 8002498:	40012300 	.word	0x40012300
 800249c:	40012000 	.word	0x40012000
 80024a0:	20000000 	.word	0x20000000
 80024a4:	431bde83 	.word	0x431bde83

080024a8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024b0:	4b79      	ldr	r3, [pc, #484]	; (8002698 <ADC_Init+0x1f0>)
 80024b2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	685a      	ldr	r2, [r3, #4]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	431a      	orrs	r2, r3
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	685a      	ldr	r2, [r3, #4]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	6859      	ldr	r1, [r3, #4]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	691b      	ldr	r3, [r3, #16]
 80024e8:	021a      	lsls	r2, r3, #8
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	430a      	orrs	r2, r1
 80024f0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	685a      	ldr	r2, [r3, #4]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002500:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	6859      	ldr	r1, [r3, #4]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	689a      	ldr	r2, [r3, #8]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	430a      	orrs	r2, r1
 8002512:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	689a      	ldr	r2, [r3, #8]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002522:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	6899      	ldr	r1, [r3, #8]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	68da      	ldr	r2, [r3, #12]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	430a      	orrs	r2, r1
 8002534:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800253a:	4a58      	ldr	r2, [pc, #352]	; (800269c <ADC_Init+0x1f4>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d022      	beq.n	8002586 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	689a      	ldr	r2, [r3, #8]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800254e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	6899      	ldr	r1, [r3, #8]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	430a      	orrs	r2, r1
 8002560:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	689a      	ldr	r2, [r3, #8]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002570:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	6899      	ldr	r1, [r3, #8]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	430a      	orrs	r2, r1
 8002582:	609a      	str	r2, [r3, #8]
 8002584:	e00f      	b.n	80025a6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	689a      	ldr	r2, [r3, #8]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002594:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	689a      	ldr	r2, [r3, #8]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80025a4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	689a      	ldr	r2, [r3, #8]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f022 0202 	bic.w	r2, r2, #2
 80025b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	6899      	ldr	r1, [r3, #8]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	7e1b      	ldrb	r3, [r3, #24]
 80025c0:	005a      	lsls	r2, r3, #1
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	430a      	orrs	r2, r1
 80025c8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d01b      	beq.n	800260c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	685a      	ldr	r2, [r3, #4]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025e2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	685a      	ldr	r2, [r3, #4]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80025f2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	6859      	ldr	r1, [r3, #4]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fe:	3b01      	subs	r3, #1
 8002600:	035a      	lsls	r2, r3, #13
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	430a      	orrs	r2, r1
 8002608:	605a      	str	r2, [r3, #4]
 800260a:	e007      	b.n	800261c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	685a      	ldr	r2, [r3, #4]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800261a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800262a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	69db      	ldr	r3, [r3, #28]
 8002636:	3b01      	subs	r3, #1
 8002638:	051a      	lsls	r2, r3, #20
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	430a      	orrs	r2, r1
 8002640:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	689a      	ldr	r2, [r3, #8]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002650:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	6899      	ldr	r1, [r3, #8]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800265e:	025a      	lsls	r2, r3, #9
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	430a      	orrs	r2, r1
 8002666:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	689a      	ldr	r2, [r3, #8]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002676:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	6899      	ldr	r1, [r3, #8]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	695b      	ldr	r3, [r3, #20]
 8002682:	029a      	lsls	r2, r3, #10
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	430a      	orrs	r2, r1
 800268a:	609a      	str	r2, [r3, #8]
}
 800268c:	bf00      	nop
 800268e:	3714      	adds	r7, #20
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr
 8002698:	40012300 	.word	0x40012300
 800269c:	0f000001 	.word	0x0f000001

080026a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f003 0307 	and.w	r3, r3, #7
 80026ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026b0:	4b0c      	ldr	r3, [pc, #48]	; (80026e4 <__NVIC_SetPriorityGrouping+0x44>)
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026b6:	68ba      	ldr	r2, [r7, #8]
 80026b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026bc:	4013      	ands	r3, r2
 80026be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026d2:	4a04      	ldr	r2, [pc, #16]	; (80026e4 <__NVIC_SetPriorityGrouping+0x44>)
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	60d3      	str	r3, [r2, #12]
}
 80026d8:	bf00      	nop
 80026da:	3714      	adds	r7, #20
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr
 80026e4:	e000ed00 	.word	0xe000ed00

080026e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026ec:	4b04      	ldr	r3, [pc, #16]	; (8002700 <__NVIC_GetPriorityGrouping+0x18>)
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	0a1b      	lsrs	r3, r3, #8
 80026f2:	f003 0307 	and.w	r3, r3, #7
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr
 8002700:	e000ed00 	.word	0xe000ed00

08002704 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	4603      	mov	r3, r0
 800270c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800270e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002712:	2b00      	cmp	r3, #0
 8002714:	db0b      	blt.n	800272e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002716:	79fb      	ldrb	r3, [r7, #7]
 8002718:	f003 021f 	and.w	r2, r3, #31
 800271c:	4907      	ldr	r1, [pc, #28]	; (800273c <__NVIC_EnableIRQ+0x38>)
 800271e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002722:	095b      	lsrs	r3, r3, #5
 8002724:	2001      	movs	r0, #1
 8002726:	fa00 f202 	lsl.w	r2, r0, r2
 800272a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800272e:	bf00      	nop
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	e000e100 	.word	0xe000e100

08002740 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	4603      	mov	r3, r0
 8002748:	6039      	str	r1, [r7, #0]
 800274a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800274c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002750:	2b00      	cmp	r3, #0
 8002752:	db0a      	blt.n	800276a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	b2da      	uxtb	r2, r3
 8002758:	490c      	ldr	r1, [pc, #48]	; (800278c <__NVIC_SetPriority+0x4c>)
 800275a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275e:	0112      	lsls	r2, r2, #4
 8002760:	b2d2      	uxtb	r2, r2
 8002762:	440b      	add	r3, r1
 8002764:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002768:	e00a      	b.n	8002780 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	b2da      	uxtb	r2, r3
 800276e:	4908      	ldr	r1, [pc, #32]	; (8002790 <__NVIC_SetPriority+0x50>)
 8002770:	79fb      	ldrb	r3, [r7, #7]
 8002772:	f003 030f 	and.w	r3, r3, #15
 8002776:	3b04      	subs	r3, #4
 8002778:	0112      	lsls	r2, r2, #4
 800277a:	b2d2      	uxtb	r2, r2
 800277c:	440b      	add	r3, r1
 800277e:	761a      	strb	r2, [r3, #24]
}
 8002780:	bf00      	nop
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr
 800278c:	e000e100 	.word	0xe000e100
 8002790:	e000ed00 	.word	0xe000ed00

08002794 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002794:	b480      	push	{r7}
 8002796:	b089      	sub	sp, #36	; 0x24
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f003 0307 	and.w	r3, r3, #7
 80027a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	f1c3 0307 	rsb	r3, r3, #7
 80027ae:	2b04      	cmp	r3, #4
 80027b0:	bf28      	it	cs
 80027b2:	2304      	movcs	r3, #4
 80027b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	3304      	adds	r3, #4
 80027ba:	2b06      	cmp	r3, #6
 80027bc:	d902      	bls.n	80027c4 <NVIC_EncodePriority+0x30>
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	3b03      	subs	r3, #3
 80027c2:	e000      	b.n	80027c6 <NVIC_EncodePriority+0x32>
 80027c4:	2300      	movs	r3, #0
 80027c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	fa02 f303 	lsl.w	r3, r2, r3
 80027d2:	43da      	mvns	r2, r3
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	401a      	ands	r2, r3
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	fa01 f303 	lsl.w	r3, r1, r3
 80027e6:	43d9      	mvns	r1, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027ec:	4313      	orrs	r3, r2
         );
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3724      	adds	r7, #36	; 0x24
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
	...

080027fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	3b01      	subs	r3, #1
 8002808:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800280c:	d301      	bcc.n	8002812 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800280e:	2301      	movs	r3, #1
 8002810:	e00f      	b.n	8002832 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002812:	4a0a      	ldr	r2, [pc, #40]	; (800283c <SysTick_Config+0x40>)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	3b01      	subs	r3, #1
 8002818:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800281a:	210f      	movs	r1, #15
 800281c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002820:	f7ff ff8e 	bl	8002740 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002824:	4b05      	ldr	r3, [pc, #20]	; (800283c <SysTick_Config+0x40>)
 8002826:	2200      	movs	r2, #0
 8002828:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800282a:	4b04      	ldr	r3, [pc, #16]	; (800283c <SysTick_Config+0x40>)
 800282c:	2207      	movs	r2, #7
 800282e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3708      	adds	r7, #8
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	e000e010 	.word	0xe000e010

08002840 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f7ff ff29 	bl	80026a0 <__NVIC_SetPriorityGrouping>
}
 800284e:	bf00      	nop
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002856:	b580      	push	{r7, lr}
 8002858:	b086      	sub	sp, #24
 800285a:	af00      	add	r7, sp, #0
 800285c:	4603      	mov	r3, r0
 800285e:	60b9      	str	r1, [r7, #8]
 8002860:	607a      	str	r2, [r7, #4]
 8002862:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002864:	2300      	movs	r3, #0
 8002866:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002868:	f7ff ff3e 	bl	80026e8 <__NVIC_GetPriorityGrouping>
 800286c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	68b9      	ldr	r1, [r7, #8]
 8002872:	6978      	ldr	r0, [r7, #20]
 8002874:	f7ff ff8e 	bl	8002794 <NVIC_EncodePriority>
 8002878:	4602      	mov	r2, r0
 800287a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800287e:	4611      	mov	r1, r2
 8002880:	4618      	mov	r0, r3
 8002882:	f7ff ff5d 	bl	8002740 <__NVIC_SetPriority>
}
 8002886:	bf00      	nop
 8002888:	3718      	adds	r7, #24
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800288e:	b580      	push	{r7, lr}
 8002890:	b082      	sub	sp, #8
 8002892:	af00      	add	r7, sp, #0
 8002894:	4603      	mov	r3, r0
 8002896:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff ff31 	bl	8002704 <__NVIC_EnableIRQ>
}
 80028a2:	bf00      	nop
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b082      	sub	sp, #8
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f7ff ffa2 	bl	80027fc <SysTick_Config>
 80028b8:	4603      	mov	r3, r0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b084      	sub	sp, #16
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ce:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80028d0:	f7ff fb08 	bl	8001ee4 <HAL_GetTick>
 80028d4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d008      	beq.n	80028f4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2280      	movs	r2, #128	; 0x80
 80028e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e052      	b.n	800299a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f022 0216 	bic.w	r2, r2, #22
 8002902:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	695a      	ldr	r2, [r3, #20]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002912:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002918:	2b00      	cmp	r3, #0
 800291a:	d103      	bne.n	8002924 <HAL_DMA_Abort+0x62>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002920:	2b00      	cmp	r3, #0
 8002922:	d007      	beq.n	8002934 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f022 0208 	bic.w	r2, r2, #8
 8002932:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f022 0201 	bic.w	r2, r2, #1
 8002942:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002944:	e013      	b.n	800296e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002946:	f7ff facd 	bl	8001ee4 <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	2b05      	cmp	r3, #5
 8002952:	d90c      	bls.n	800296e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2220      	movs	r2, #32
 8002958:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2203      	movs	r2, #3
 8002966:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e015      	b.n	800299a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	2b00      	cmp	r3, #0
 800297a:	d1e4      	bne.n	8002946 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002980:	223f      	movs	r2, #63	; 0x3f
 8002982:	409a      	lsls	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029a2:	b480      	push	{r7}
 80029a4:	b083      	sub	sp, #12
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d004      	beq.n	80029c0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2280      	movs	r2, #128	; 0x80
 80029ba:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e00c      	b.n	80029da <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2205      	movs	r2, #5
 80029c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f022 0201 	bic.w	r2, r2, #1
 80029d6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
	...

080029e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b089      	sub	sp, #36	; 0x24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029f2:	2300      	movs	r3, #0
 80029f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029f6:	2300      	movs	r3, #0
 80029f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029fa:	2300      	movs	r3, #0
 80029fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029fe:	2300      	movs	r3, #0
 8002a00:	61fb      	str	r3, [r7, #28]
 8002a02:	e159      	b.n	8002cb8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a04:	2201      	movs	r2, #1
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	697a      	ldr	r2, [r7, #20]
 8002a14:	4013      	ands	r3, r2
 8002a16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a18:	693a      	ldr	r2, [r7, #16]
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	f040 8148 	bne.w	8002cb2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f003 0303 	and.w	r3, r3, #3
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d005      	beq.n	8002a3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d130      	bne.n	8002a9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	2203      	movs	r2, #3
 8002a46:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4a:	43db      	mvns	r3, r3
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	4013      	ands	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	68da      	ldr	r2, [r3, #12]
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a70:	2201      	movs	r2, #1
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	43db      	mvns	r3, r3
 8002a7a:	69ba      	ldr	r2, [r7, #24]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	091b      	lsrs	r3, r3, #4
 8002a86:	f003 0201 	and.w	r2, r3, #1
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f003 0303 	and.w	r3, r3, #3
 8002aa4:	2b03      	cmp	r3, #3
 8002aa6:	d017      	beq.n	8002ad8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	2203      	movs	r2, #3
 8002ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab8:	43db      	mvns	r3, r3
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	4013      	ands	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	689a      	ldr	r2, [r3, #8]
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f003 0303 	and.w	r3, r3, #3
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d123      	bne.n	8002b2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	08da      	lsrs	r2, r3, #3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	3208      	adds	r2, #8
 8002aec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002af0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	f003 0307 	and.w	r3, r3, #7
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	220f      	movs	r2, #15
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	43db      	mvns	r3, r3
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	4013      	ands	r3, r2
 8002b06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	691a      	ldr	r2, [r3, #16]
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	f003 0307 	and.w	r3, r3, #7
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	08da      	lsrs	r2, r3, #3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	3208      	adds	r2, #8
 8002b26:	69b9      	ldr	r1, [r7, #24]
 8002b28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	2203      	movs	r2, #3
 8002b38:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3c:	43db      	mvns	r3, r3
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	4013      	ands	r3, r2
 8002b42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f003 0203 	and.w	r2, r3, #3
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f000 80a2 	beq.w	8002cb2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b6e:	2300      	movs	r3, #0
 8002b70:	60fb      	str	r3, [r7, #12]
 8002b72:	4b57      	ldr	r3, [pc, #348]	; (8002cd0 <HAL_GPIO_Init+0x2e8>)
 8002b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b76:	4a56      	ldr	r2, [pc, #344]	; (8002cd0 <HAL_GPIO_Init+0x2e8>)
 8002b78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b7c:	6453      	str	r3, [r2, #68]	; 0x44
 8002b7e:	4b54      	ldr	r3, [pc, #336]	; (8002cd0 <HAL_GPIO_Init+0x2e8>)
 8002b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b86:	60fb      	str	r3, [r7, #12]
 8002b88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b8a:	4a52      	ldr	r2, [pc, #328]	; (8002cd4 <HAL_GPIO_Init+0x2ec>)
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	089b      	lsrs	r3, r3, #2
 8002b90:	3302      	adds	r3, #2
 8002b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	f003 0303 	and.w	r3, r3, #3
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	220f      	movs	r2, #15
 8002ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba6:	43db      	mvns	r3, r3
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	4013      	ands	r3, r2
 8002bac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a49      	ldr	r2, [pc, #292]	; (8002cd8 <HAL_GPIO_Init+0x2f0>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d019      	beq.n	8002bea <HAL_GPIO_Init+0x202>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a48      	ldr	r2, [pc, #288]	; (8002cdc <HAL_GPIO_Init+0x2f4>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d013      	beq.n	8002be6 <HAL_GPIO_Init+0x1fe>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a47      	ldr	r2, [pc, #284]	; (8002ce0 <HAL_GPIO_Init+0x2f8>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d00d      	beq.n	8002be2 <HAL_GPIO_Init+0x1fa>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a46      	ldr	r2, [pc, #280]	; (8002ce4 <HAL_GPIO_Init+0x2fc>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d007      	beq.n	8002bde <HAL_GPIO_Init+0x1f6>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a45      	ldr	r2, [pc, #276]	; (8002ce8 <HAL_GPIO_Init+0x300>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d101      	bne.n	8002bda <HAL_GPIO_Init+0x1f2>
 8002bd6:	2304      	movs	r3, #4
 8002bd8:	e008      	b.n	8002bec <HAL_GPIO_Init+0x204>
 8002bda:	2307      	movs	r3, #7
 8002bdc:	e006      	b.n	8002bec <HAL_GPIO_Init+0x204>
 8002bde:	2303      	movs	r3, #3
 8002be0:	e004      	b.n	8002bec <HAL_GPIO_Init+0x204>
 8002be2:	2302      	movs	r3, #2
 8002be4:	e002      	b.n	8002bec <HAL_GPIO_Init+0x204>
 8002be6:	2301      	movs	r3, #1
 8002be8:	e000      	b.n	8002bec <HAL_GPIO_Init+0x204>
 8002bea:	2300      	movs	r3, #0
 8002bec:	69fa      	ldr	r2, [r7, #28]
 8002bee:	f002 0203 	and.w	r2, r2, #3
 8002bf2:	0092      	lsls	r2, r2, #2
 8002bf4:	4093      	lsls	r3, r2
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bfc:	4935      	ldr	r1, [pc, #212]	; (8002cd4 <HAL_GPIO_Init+0x2ec>)
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	089b      	lsrs	r3, r3, #2
 8002c02:	3302      	adds	r3, #2
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c0a:	4b38      	ldr	r3, [pc, #224]	; (8002cec <HAL_GPIO_Init+0x304>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	43db      	mvns	r3, r3
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	4013      	ands	r3, r2
 8002c18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d003      	beq.n	8002c2e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c2e:	4a2f      	ldr	r2, [pc, #188]	; (8002cec <HAL_GPIO_Init+0x304>)
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c34:	4b2d      	ldr	r3, [pc, #180]	; (8002cec <HAL_GPIO_Init+0x304>)
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	43db      	mvns	r3, r3
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	4013      	ands	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d003      	beq.n	8002c58 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c58:	4a24      	ldr	r2, [pc, #144]	; (8002cec <HAL_GPIO_Init+0x304>)
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c5e:	4b23      	ldr	r3, [pc, #140]	; (8002cec <HAL_GPIO_Init+0x304>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	43db      	mvns	r3, r3
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d003      	beq.n	8002c82 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c82:	4a1a      	ldr	r2, [pc, #104]	; (8002cec <HAL_GPIO_Init+0x304>)
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c88:	4b18      	ldr	r3, [pc, #96]	; (8002cec <HAL_GPIO_Init+0x304>)
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	43db      	mvns	r3, r3
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	4013      	ands	r3, r2
 8002c96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d003      	beq.n	8002cac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cac:	4a0f      	ldr	r2, [pc, #60]	; (8002cec <HAL_GPIO_Init+0x304>)
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	61fb      	str	r3, [r7, #28]
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	2b0f      	cmp	r3, #15
 8002cbc:	f67f aea2 	bls.w	8002a04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002cc0:	bf00      	nop
 8002cc2:	bf00      	nop
 8002cc4:	3724      	adds	r7, #36	; 0x24
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	40023800 	.word	0x40023800
 8002cd4:	40013800 	.word	0x40013800
 8002cd8:	40020000 	.word	0x40020000
 8002cdc:	40020400 	.word	0x40020400
 8002ce0:	40020800 	.word	0x40020800
 8002ce4:	40020c00 	.word	0x40020c00
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	40013c00 	.word	0x40013c00

08002cf0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b085      	sub	sp, #20
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	691a      	ldr	r2, [r3, #16]
 8002d00:	887b      	ldrh	r3, [r7, #2]
 8002d02:	4013      	ands	r3, r2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d002      	beq.n	8002d0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	73fb      	strb	r3, [r7, #15]
 8002d0c:	e001      	b.n	8002d12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3714      	adds	r7, #20
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	460b      	mov	r3, r1
 8002d2a:	807b      	strh	r3, [r7, #2]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d30:	787b      	ldrb	r3, [r7, #1]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d003      	beq.n	8002d3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d36:	887a      	ldrh	r2, [r7, #2]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d3c:	e003      	b.n	8002d46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d3e:	887b      	ldrh	r3, [r7, #2]
 8002d40:	041a      	lsls	r2, r3, #16
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	619a      	str	r2, [r3, #24]
}
 8002d46:	bf00      	nop
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
	...

08002d54 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002d5e:	4b08      	ldr	r3, [pc, #32]	; (8002d80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d60:	695a      	ldr	r2, [r3, #20]
 8002d62:	88fb      	ldrh	r3, [r7, #6]
 8002d64:	4013      	ands	r3, r2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d006      	beq.n	8002d78 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d6a:	4a05      	ldr	r2, [pc, #20]	; (8002d80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d6c:	88fb      	ldrh	r3, [r7, #6]
 8002d6e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d70:	88fb      	ldrh	r3, [r7, #6]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f000 f806 	bl	8002d84 <HAL_GPIO_EXTI_Callback>
  }
}
 8002d78:	bf00      	nop
 8002d7a:	3708      	adds	r7, #8
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	40013c00 	.word	0x40013c00

08002d84 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002d8e:	bf00      	nop
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
	...

08002d9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b086      	sub	sp, #24
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d101      	bne.n	8002dae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e264      	b.n	8003278 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d075      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002dba:	4ba3      	ldr	r3, [pc, #652]	; (8003048 <HAL_RCC_OscConfig+0x2ac>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f003 030c 	and.w	r3, r3, #12
 8002dc2:	2b04      	cmp	r3, #4
 8002dc4:	d00c      	beq.n	8002de0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dc6:	4ba0      	ldr	r3, [pc, #640]	; (8003048 <HAL_RCC_OscConfig+0x2ac>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002dce:	2b08      	cmp	r3, #8
 8002dd0:	d112      	bne.n	8002df8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dd2:	4b9d      	ldr	r3, [pc, #628]	; (8003048 <HAL_RCC_OscConfig+0x2ac>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dde:	d10b      	bne.n	8002df8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002de0:	4b99      	ldr	r3, [pc, #612]	; (8003048 <HAL_RCC_OscConfig+0x2ac>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d05b      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x108>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d157      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e23f      	b.n	8003278 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e00:	d106      	bne.n	8002e10 <HAL_RCC_OscConfig+0x74>
 8002e02:	4b91      	ldr	r3, [pc, #580]	; (8003048 <HAL_RCC_OscConfig+0x2ac>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a90      	ldr	r2, [pc, #576]	; (8003048 <HAL_RCC_OscConfig+0x2ac>)
 8002e08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e0c:	6013      	str	r3, [r2, #0]
 8002e0e:	e01d      	b.n	8002e4c <HAL_RCC_OscConfig+0xb0>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e18:	d10c      	bne.n	8002e34 <HAL_RCC_OscConfig+0x98>
 8002e1a:	4b8b      	ldr	r3, [pc, #556]	; (8003048 <HAL_RCC_OscConfig+0x2ac>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a8a      	ldr	r2, [pc, #552]	; (8003048 <HAL_RCC_OscConfig+0x2ac>)
 8002e20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e24:	6013      	str	r3, [r2, #0]
 8002e26:	4b88      	ldr	r3, [pc, #544]	; (8003048 <HAL_RCC_OscConfig+0x2ac>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a87      	ldr	r2, [pc, #540]	; (8003048 <HAL_RCC_OscConfig+0x2ac>)
 8002e2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e30:	6013      	str	r3, [r2, #0]
 8002e32:	e00b      	b.n	8002e4c <HAL_RCC_OscConfig+0xb0>
 8002e34:	4b84      	ldr	r3, [pc, #528]	; (8003048 <HAL_RCC_OscConfig+0x2ac>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a83      	ldr	r2, [pc, #524]	; (8003048 <HAL_RCC_OscConfig+0x2ac>)
 8002e3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e3e:	6013      	str	r3, [r2, #0]
 8002e40:	4b81      	ldr	r3, [pc, #516]	; (8003048 <HAL_RCC_OscConfig+0x2ac>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a80      	ldr	r2, [pc, #512]	; (8003048 <HAL_RCC_OscConfig+0x2ac>)
 8002e46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d013      	beq.n	8002e7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e54:	f7ff f846 	bl	8001ee4 <HAL_GetTick>
 8002e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e5a:	e008      	b.n	8002e6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e5c:	f7ff f842 	bl	8001ee4 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b64      	cmp	r3, #100	; 0x64
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e204      	b.n	8003278 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e6e:	4b76      	ldr	r3, [pc, #472]	; (8003048 <HAL_RCC_OscConfig+0x2ac>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d0f0      	beq.n	8002e5c <HAL_RCC_OscConfig+0xc0>
 8002e7a:	e014      	b.n	8002ea6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e7c:	f7ff f832 	bl	8001ee4 <HAL_GetTick>
 8002e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e82:	e008      	b.n	8002e96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e84:	f7ff f82e 	bl	8001ee4 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b64      	cmp	r3, #100	; 0x64
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e1f0      	b.n	8003278 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e96:	4b6c      	ldr	r3, [pc, #432]	; (8003048 <HAL_RCC_OscConfig+0x2ac>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d1f0      	bne.n	8002e84 <HAL_RCC_OscConfig+0xe8>
 8002ea2:	e000      	b.n	8002ea6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ea4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d063      	beq.n	8002f7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002eb2:	4b65      	ldr	r3, [pc, #404]	; (8003048 <HAL_RCC_OscConfig+0x2ac>)
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f003 030c 	and.w	r3, r3, #12
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00b      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ebe:	4b62      	ldr	r3, [pc, #392]	; (8003048 <HAL_RCC_OscConfig+0x2ac>)
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ec6:	2b08      	cmp	r3, #8
 8002ec8:	d11c      	bne.n	8002f04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002eca:	4b5f      	ldr	r3, [pc, #380]	; (8003048 <HAL_RCC_OscConfig+0x2ac>)
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d116      	bne.n	8002f04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ed6:	4b5c      	ldr	r3, [pc, #368]	; (8003048 <HAL_RCC_OscConfig+0x2ac>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d005      	beq.n	8002eee <HAL_RCC_OscConfig+0x152>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d001      	beq.n	8002eee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e1c4      	b.n	8003278 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eee:	4b56      	ldr	r3, [pc, #344]	; (8003048 <HAL_RCC_OscConfig+0x2ac>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	4952      	ldr	r1, [pc, #328]	; (8003048 <HAL_RCC_OscConfig+0x2ac>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f02:	e03a      	b.n	8002f7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d020      	beq.n	8002f4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f0c:	4b4f      	ldr	r3, [pc, #316]	; (800304c <HAL_RCC_OscConfig+0x2b0>)
 8002f0e:	2201      	movs	r2, #1
 8002f10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f12:	f7fe ffe7 	bl	8001ee4 <HAL_GetTick>
 8002f16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f18:	e008      	b.n	8002f2c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f1a:	f7fe ffe3 	bl	8001ee4 <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d901      	bls.n	8002f2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e1a5      	b.n	8003278 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f2c:	4b46      	ldr	r3, [pc, #280]	; (8003048 <HAL_RCC_OscConfig+0x2ac>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0302 	and.w	r3, r3, #2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d0f0      	beq.n	8002f1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f38:	4b43      	ldr	r3, [pc, #268]	; (8003048 <HAL_RCC_OscConfig+0x2ac>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	691b      	ldr	r3, [r3, #16]
 8002f44:	00db      	lsls	r3, r3, #3
 8002f46:	4940      	ldr	r1, [pc, #256]	; (8003048 <HAL_RCC_OscConfig+0x2ac>)
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	600b      	str	r3, [r1, #0]
 8002f4c:	e015      	b.n	8002f7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f4e:	4b3f      	ldr	r3, [pc, #252]	; (800304c <HAL_RCC_OscConfig+0x2b0>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f54:	f7fe ffc6 	bl	8001ee4 <HAL_GetTick>
 8002f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f5a:	e008      	b.n	8002f6e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f5c:	f7fe ffc2 	bl	8001ee4 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e184      	b.n	8003278 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f6e:	4b36      	ldr	r3, [pc, #216]	; (8003048 <HAL_RCC_OscConfig+0x2ac>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d1f0      	bne.n	8002f5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0308 	and.w	r3, r3, #8
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d030      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	695b      	ldr	r3, [r3, #20]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d016      	beq.n	8002fbc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f8e:	4b30      	ldr	r3, [pc, #192]	; (8003050 <HAL_RCC_OscConfig+0x2b4>)
 8002f90:	2201      	movs	r2, #1
 8002f92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f94:	f7fe ffa6 	bl	8001ee4 <HAL_GetTick>
 8002f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f9a:	e008      	b.n	8002fae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f9c:	f7fe ffa2 	bl	8001ee4 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e164      	b.n	8003278 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fae:	4b26      	ldr	r3, [pc, #152]	; (8003048 <HAL_RCC_OscConfig+0x2ac>)
 8002fb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d0f0      	beq.n	8002f9c <HAL_RCC_OscConfig+0x200>
 8002fba:	e015      	b.n	8002fe8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fbc:	4b24      	ldr	r3, [pc, #144]	; (8003050 <HAL_RCC_OscConfig+0x2b4>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fc2:	f7fe ff8f 	bl	8001ee4 <HAL_GetTick>
 8002fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fc8:	e008      	b.n	8002fdc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fca:	f7fe ff8b 	bl	8001ee4 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d901      	bls.n	8002fdc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e14d      	b.n	8003278 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fdc:	4b1a      	ldr	r3, [pc, #104]	; (8003048 <HAL_RCC_OscConfig+0x2ac>)
 8002fde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fe0:	f003 0302 	and.w	r3, r3, #2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1f0      	bne.n	8002fca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0304 	and.w	r3, r3, #4
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	f000 80a0 	beq.w	8003136 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ffa:	4b13      	ldr	r3, [pc, #76]	; (8003048 <HAL_RCC_OscConfig+0x2ac>)
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d10f      	bne.n	8003026 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003006:	2300      	movs	r3, #0
 8003008:	60bb      	str	r3, [r7, #8]
 800300a:	4b0f      	ldr	r3, [pc, #60]	; (8003048 <HAL_RCC_OscConfig+0x2ac>)
 800300c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300e:	4a0e      	ldr	r2, [pc, #56]	; (8003048 <HAL_RCC_OscConfig+0x2ac>)
 8003010:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003014:	6413      	str	r3, [r2, #64]	; 0x40
 8003016:	4b0c      	ldr	r3, [pc, #48]	; (8003048 <HAL_RCC_OscConfig+0x2ac>)
 8003018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800301e:	60bb      	str	r3, [r7, #8]
 8003020:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003022:	2301      	movs	r3, #1
 8003024:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003026:	4b0b      	ldr	r3, [pc, #44]	; (8003054 <HAL_RCC_OscConfig+0x2b8>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800302e:	2b00      	cmp	r3, #0
 8003030:	d121      	bne.n	8003076 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003032:	4b08      	ldr	r3, [pc, #32]	; (8003054 <HAL_RCC_OscConfig+0x2b8>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a07      	ldr	r2, [pc, #28]	; (8003054 <HAL_RCC_OscConfig+0x2b8>)
 8003038:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800303c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800303e:	f7fe ff51 	bl	8001ee4 <HAL_GetTick>
 8003042:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003044:	e011      	b.n	800306a <HAL_RCC_OscConfig+0x2ce>
 8003046:	bf00      	nop
 8003048:	40023800 	.word	0x40023800
 800304c:	42470000 	.word	0x42470000
 8003050:	42470e80 	.word	0x42470e80
 8003054:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003058:	f7fe ff44 	bl	8001ee4 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b02      	cmp	r3, #2
 8003064:	d901      	bls.n	800306a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e106      	b.n	8003278 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800306a:	4b85      	ldr	r3, [pc, #532]	; (8003280 <HAL_RCC_OscConfig+0x4e4>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003072:	2b00      	cmp	r3, #0
 8003074:	d0f0      	beq.n	8003058 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	2b01      	cmp	r3, #1
 800307c:	d106      	bne.n	800308c <HAL_RCC_OscConfig+0x2f0>
 800307e:	4b81      	ldr	r3, [pc, #516]	; (8003284 <HAL_RCC_OscConfig+0x4e8>)
 8003080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003082:	4a80      	ldr	r2, [pc, #512]	; (8003284 <HAL_RCC_OscConfig+0x4e8>)
 8003084:	f043 0301 	orr.w	r3, r3, #1
 8003088:	6713      	str	r3, [r2, #112]	; 0x70
 800308a:	e01c      	b.n	80030c6 <HAL_RCC_OscConfig+0x32a>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	2b05      	cmp	r3, #5
 8003092:	d10c      	bne.n	80030ae <HAL_RCC_OscConfig+0x312>
 8003094:	4b7b      	ldr	r3, [pc, #492]	; (8003284 <HAL_RCC_OscConfig+0x4e8>)
 8003096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003098:	4a7a      	ldr	r2, [pc, #488]	; (8003284 <HAL_RCC_OscConfig+0x4e8>)
 800309a:	f043 0304 	orr.w	r3, r3, #4
 800309e:	6713      	str	r3, [r2, #112]	; 0x70
 80030a0:	4b78      	ldr	r3, [pc, #480]	; (8003284 <HAL_RCC_OscConfig+0x4e8>)
 80030a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a4:	4a77      	ldr	r2, [pc, #476]	; (8003284 <HAL_RCC_OscConfig+0x4e8>)
 80030a6:	f043 0301 	orr.w	r3, r3, #1
 80030aa:	6713      	str	r3, [r2, #112]	; 0x70
 80030ac:	e00b      	b.n	80030c6 <HAL_RCC_OscConfig+0x32a>
 80030ae:	4b75      	ldr	r3, [pc, #468]	; (8003284 <HAL_RCC_OscConfig+0x4e8>)
 80030b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b2:	4a74      	ldr	r2, [pc, #464]	; (8003284 <HAL_RCC_OscConfig+0x4e8>)
 80030b4:	f023 0301 	bic.w	r3, r3, #1
 80030b8:	6713      	str	r3, [r2, #112]	; 0x70
 80030ba:	4b72      	ldr	r3, [pc, #456]	; (8003284 <HAL_RCC_OscConfig+0x4e8>)
 80030bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030be:	4a71      	ldr	r2, [pc, #452]	; (8003284 <HAL_RCC_OscConfig+0x4e8>)
 80030c0:	f023 0304 	bic.w	r3, r3, #4
 80030c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d015      	beq.n	80030fa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ce:	f7fe ff09 	bl	8001ee4 <HAL_GetTick>
 80030d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030d4:	e00a      	b.n	80030ec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030d6:	f7fe ff05 	bl	8001ee4 <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d901      	bls.n	80030ec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e0c5      	b.n	8003278 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030ec:	4b65      	ldr	r3, [pc, #404]	; (8003284 <HAL_RCC_OscConfig+0x4e8>)
 80030ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f0:	f003 0302 	and.w	r3, r3, #2
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d0ee      	beq.n	80030d6 <HAL_RCC_OscConfig+0x33a>
 80030f8:	e014      	b.n	8003124 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030fa:	f7fe fef3 	bl	8001ee4 <HAL_GetTick>
 80030fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003100:	e00a      	b.n	8003118 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003102:	f7fe feef 	bl	8001ee4 <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003110:	4293      	cmp	r3, r2
 8003112:	d901      	bls.n	8003118 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e0af      	b.n	8003278 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003118:	4b5a      	ldr	r3, [pc, #360]	; (8003284 <HAL_RCC_OscConfig+0x4e8>)
 800311a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800311c:	f003 0302 	and.w	r3, r3, #2
 8003120:	2b00      	cmp	r3, #0
 8003122:	d1ee      	bne.n	8003102 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003124:	7dfb      	ldrb	r3, [r7, #23]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d105      	bne.n	8003136 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800312a:	4b56      	ldr	r3, [pc, #344]	; (8003284 <HAL_RCC_OscConfig+0x4e8>)
 800312c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312e:	4a55      	ldr	r2, [pc, #340]	; (8003284 <HAL_RCC_OscConfig+0x4e8>)
 8003130:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003134:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	2b00      	cmp	r3, #0
 800313c:	f000 809b 	beq.w	8003276 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003140:	4b50      	ldr	r3, [pc, #320]	; (8003284 <HAL_RCC_OscConfig+0x4e8>)
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f003 030c 	and.w	r3, r3, #12
 8003148:	2b08      	cmp	r3, #8
 800314a:	d05c      	beq.n	8003206 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	2b02      	cmp	r3, #2
 8003152:	d141      	bne.n	80031d8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003154:	4b4c      	ldr	r3, [pc, #304]	; (8003288 <HAL_RCC_OscConfig+0x4ec>)
 8003156:	2200      	movs	r2, #0
 8003158:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800315a:	f7fe fec3 	bl	8001ee4 <HAL_GetTick>
 800315e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003160:	e008      	b.n	8003174 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003162:	f7fe febf 	bl	8001ee4 <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	2b02      	cmp	r3, #2
 800316e:	d901      	bls.n	8003174 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e081      	b.n	8003278 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003174:	4b43      	ldr	r3, [pc, #268]	; (8003284 <HAL_RCC_OscConfig+0x4e8>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d1f0      	bne.n	8003162 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	69da      	ldr	r2, [r3, #28]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a1b      	ldr	r3, [r3, #32]
 8003188:	431a      	orrs	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318e:	019b      	lsls	r3, r3, #6
 8003190:	431a      	orrs	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003196:	085b      	lsrs	r3, r3, #1
 8003198:	3b01      	subs	r3, #1
 800319a:	041b      	lsls	r3, r3, #16
 800319c:	431a      	orrs	r2, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a2:	061b      	lsls	r3, r3, #24
 80031a4:	4937      	ldr	r1, [pc, #220]	; (8003284 <HAL_RCC_OscConfig+0x4e8>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031aa:	4b37      	ldr	r3, [pc, #220]	; (8003288 <HAL_RCC_OscConfig+0x4ec>)
 80031ac:	2201      	movs	r2, #1
 80031ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b0:	f7fe fe98 	bl	8001ee4 <HAL_GetTick>
 80031b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031b6:	e008      	b.n	80031ca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031b8:	f7fe fe94 	bl	8001ee4 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e056      	b.n	8003278 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ca:	4b2e      	ldr	r3, [pc, #184]	; (8003284 <HAL_RCC_OscConfig+0x4e8>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d0f0      	beq.n	80031b8 <HAL_RCC_OscConfig+0x41c>
 80031d6:	e04e      	b.n	8003276 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031d8:	4b2b      	ldr	r3, [pc, #172]	; (8003288 <HAL_RCC_OscConfig+0x4ec>)
 80031da:	2200      	movs	r2, #0
 80031dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031de:	f7fe fe81 	bl	8001ee4 <HAL_GetTick>
 80031e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031e4:	e008      	b.n	80031f8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031e6:	f7fe fe7d 	bl	8001ee4 <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d901      	bls.n	80031f8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e03f      	b.n	8003278 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031f8:	4b22      	ldr	r3, [pc, #136]	; (8003284 <HAL_RCC_OscConfig+0x4e8>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d1f0      	bne.n	80031e6 <HAL_RCC_OscConfig+0x44a>
 8003204:	e037      	b.n	8003276 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	699b      	ldr	r3, [r3, #24]
 800320a:	2b01      	cmp	r3, #1
 800320c:	d101      	bne.n	8003212 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e032      	b.n	8003278 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003212:	4b1c      	ldr	r3, [pc, #112]	; (8003284 <HAL_RCC_OscConfig+0x4e8>)
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d028      	beq.n	8003272 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800322a:	429a      	cmp	r2, r3
 800322c:	d121      	bne.n	8003272 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003238:	429a      	cmp	r2, r3
 800323a:	d11a      	bne.n	8003272 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800323c:	68fa      	ldr	r2, [r7, #12]
 800323e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003242:	4013      	ands	r3, r2
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003248:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800324a:	4293      	cmp	r3, r2
 800324c:	d111      	bne.n	8003272 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003258:	085b      	lsrs	r3, r3, #1
 800325a:	3b01      	subs	r3, #1
 800325c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800325e:	429a      	cmp	r2, r3
 8003260:	d107      	bne.n	8003272 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800326e:	429a      	cmp	r2, r3
 8003270:	d001      	beq.n	8003276 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e000      	b.n	8003278 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	3718      	adds	r7, #24
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	40007000 	.word	0x40007000
 8003284:	40023800 	.word	0x40023800
 8003288:	42470060 	.word	0x42470060

0800328c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d101      	bne.n	80032a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e0cc      	b.n	800343a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032a0:	4b68      	ldr	r3, [pc, #416]	; (8003444 <HAL_RCC_ClockConfig+0x1b8>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0307 	and.w	r3, r3, #7
 80032a8:	683a      	ldr	r2, [r7, #0]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d90c      	bls.n	80032c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ae:	4b65      	ldr	r3, [pc, #404]	; (8003444 <HAL_RCC_ClockConfig+0x1b8>)
 80032b0:	683a      	ldr	r2, [r7, #0]
 80032b2:	b2d2      	uxtb	r2, r2
 80032b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032b6:	4b63      	ldr	r3, [pc, #396]	; (8003444 <HAL_RCC_ClockConfig+0x1b8>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0307 	and.w	r3, r3, #7
 80032be:	683a      	ldr	r2, [r7, #0]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d001      	beq.n	80032c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e0b8      	b.n	800343a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0302 	and.w	r3, r3, #2
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d020      	beq.n	8003316 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0304 	and.w	r3, r3, #4
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d005      	beq.n	80032ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032e0:	4b59      	ldr	r3, [pc, #356]	; (8003448 <HAL_RCC_ClockConfig+0x1bc>)
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	4a58      	ldr	r2, [pc, #352]	; (8003448 <HAL_RCC_ClockConfig+0x1bc>)
 80032e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0308 	and.w	r3, r3, #8
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d005      	beq.n	8003304 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032f8:	4b53      	ldr	r3, [pc, #332]	; (8003448 <HAL_RCC_ClockConfig+0x1bc>)
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	4a52      	ldr	r2, [pc, #328]	; (8003448 <HAL_RCC_ClockConfig+0x1bc>)
 80032fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003302:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003304:	4b50      	ldr	r3, [pc, #320]	; (8003448 <HAL_RCC_ClockConfig+0x1bc>)
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	494d      	ldr	r1, [pc, #308]	; (8003448 <HAL_RCC_ClockConfig+0x1bc>)
 8003312:	4313      	orrs	r3, r2
 8003314:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	2b00      	cmp	r3, #0
 8003320:	d044      	beq.n	80033ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d107      	bne.n	800333a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800332a:	4b47      	ldr	r3, [pc, #284]	; (8003448 <HAL_RCC_ClockConfig+0x1bc>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d119      	bne.n	800336a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e07f      	b.n	800343a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	2b02      	cmp	r3, #2
 8003340:	d003      	beq.n	800334a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003346:	2b03      	cmp	r3, #3
 8003348:	d107      	bne.n	800335a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800334a:	4b3f      	ldr	r3, [pc, #252]	; (8003448 <HAL_RCC_ClockConfig+0x1bc>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d109      	bne.n	800336a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e06f      	b.n	800343a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800335a:	4b3b      	ldr	r3, [pc, #236]	; (8003448 <HAL_RCC_ClockConfig+0x1bc>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e067      	b.n	800343a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800336a:	4b37      	ldr	r3, [pc, #220]	; (8003448 <HAL_RCC_ClockConfig+0x1bc>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f023 0203 	bic.w	r2, r3, #3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	4934      	ldr	r1, [pc, #208]	; (8003448 <HAL_RCC_ClockConfig+0x1bc>)
 8003378:	4313      	orrs	r3, r2
 800337a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800337c:	f7fe fdb2 	bl	8001ee4 <HAL_GetTick>
 8003380:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003382:	e00a      	b.n	800339a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003384:	f7fe fdae 	bl	8001ee4 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003392:	4293      	cmp	r3, r2
 8003394:	d901      	bls.n	800339a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e04f      	b.n	800343a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800339a:	4b2b      	ldr	r3, [pc, #172]	; (8003448 <HAL_RCC_ClockConfig+0x1bc>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f003 020c 	and.w	r2, r3, #12
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d1eb      	bne.n	8003384 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033ac:	4b25      	ldr	r3, [pc, #148]	; (8003444 <HAL_RCC_ClockConfig+0x1b8>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0307 	and.w	r3, r3, #7
 80033b4:	683a      	ldr	r2, [r7, #0]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d20c      	bcs.n	80033d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ba:	4b22      	ldr	r3, [pc, #136]	; (8003444 <HAL_RCC_ClockConfig+0x1b8>)
 80033bc:	683a      	ldr	r2, [r7, #0]
 80033be:	b2d2      	uxtb	r2, r2
 80033c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033c2:	4b20      	ldr	r3, [pc, #128]	; (8003444 <HAL_RCC_ClockConfig+0x1b8>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0307 	and.w	r3, r3, #7
 80033ca:	683a      	ldr	r2, [r7, #0]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d001      	beq.n	80033d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e032      	b.n	800343a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0304 	and.w	r3, r3, #4
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d008      	beq.n	80033f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033e0:	4b19      	ldr	r3, [pc, #100]	; (8003448 <HAL_RCC_ClockConfig+0x1bc>)
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	4916      	ldr	r1, [pc, #88]	; (8003448 <HAL_RCC_ClockConfig+0x1bc>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0308 	and.w	r3, r3, #8
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d009      	beq.n	8003412 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033fe:	4b12      	ldr	r3, [pc, #72]	; (8003448 <HAL_RCC_ClockConfig+0x1bc>)
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	00db      	lsls	r3, r3, #3
 800340c:	490e      	ldr	r1, [pc, #56]	; (8003448 <HAL_RCC_ClockConfig+0x1bc>)
 800340e:	4313      	orrs	r3, r2
 8003410:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003412:	f000 f821 	bl	8003458 <HAL_RCC_GetSysClockFreq>
 8003416:	4602      	mov	r2, r0
 8003418:	4b0b      	ldr	r3, [pc, #44]	; (8003448 <HAL_RCC_ClockConfig+0x1bc>)
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	091b      	lsrs	r3, r3, #4
 800341e:	f003 030f 	and.w	r3, r3, #15
 8003422:	490a      	ldr	r1, [pc, #40]	; (800344c <HAL_RCC_ClockConfig+0x1c0>)
 8003424:	5ccb      	ldrb	r3, [r1, r3]
 8003426:	fa22 f303 	lsr.w	r3, r2, r3
 800342a:	4a09      	ldr	r2, [pc, #36]	; (8003450 <HAL_RCC_ClockConfig+0x1c4>)
 800342c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800342e:	4b09      	ldr	r3, [pc, #36]	; (8003454 <HAL_RCC_ClockConfig+0x1c8>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4618      	mov	r0, r3
 8003434:	f7fe fd12 	bl	8001e5c <HAL_InitTick>

  return HAL_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	40023c00 	.word	0x40023c00
 8003448:	40023800 	.word	0x40023800
 800344c:	08005398 	.word	0x08005398
 8003450:	20000000 	.word	0x20000000
 8003454:	20000004 	.word	0x20000004

08003458 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003458:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800345c:	b084      	sub	sp, #16
 800345e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003460:	2300      	movs	r3, #0
 8003462:	607b      	str	r3, [r7, #4]
 8003464:	2300      	movs	r3, #0
 8003466:	60fb      	str	r3, [r7, #12]
 8003468:	2300      	movs	r3, #0
 800346a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800346c:	2300      	movs	r3, #0
 800346e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003470:	4b67      	ldr	r3, [pc, #412]	; (8003610 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f003 030c 	and.w	r3, r3, #12
 8003478:	2b08      	cmp	r3, #8
 800347a:	d00d      	beq.n	8003498 <HAL_RCC_GetSysClockFreq+0x40>
 800347c:	2b08      	cmp	r3, #8
 800347e:	f200 80bd 	bhi.w	80035fc <HAL_RCC_GetSysClockFreq+0x1a4>
 8003482:	2b00      	cmp	r3, #0
 8003484:	d002      	beq.n	800348c <HAL_RCC_GetSysClockFreq+0x34>
 8003486:	2b04      	cmp	r3, #4
 8003488:	d003      	beq.n	8003492 <HAL_RCC_GetSysClockFreq+0x3a>
 800348a:	e0b7      	b.n	80035fc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800348c:	4b61      	ldr	r3, [pc, #388]	; (8003614 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800348e:	60bb      	str	r3, [r7, #8]
       break;
 8003490:	e0b7      	b.n	8003602 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003492:	4b61      	ldr	r3, [pc, #388]	; (8003618 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003494:	60bb      	str	r3, [r7, #8]
      break;
 8003496:	e0b4      	b.n	8003602 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003498:	4b5d      	ldr	r3, [pc, #372]	; (8003610 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034a0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034a2:	4b5b      	ldr	r3, [pc, #364]	; (8003610 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d04d      	beq.n	800354a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034ae:	4b58      	ldr	r3, [pc, #352]	; (8003610 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	099b      	lsrs	r3, r3, #6
 80034b4:	461a      	mov	r2, r3
 80034b6:	f04f 0300 	mov.w	r3, #0
 80034ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80034be:	f04f 0100 	mov.w	r1, #0
 80034c2:	ea02 0800 	and.w	r8, r2, r0
 80034c6:	ea03 0901 	and.w	r9, r3, r1
 80034ca:	4640      	mov	r0, r8
 80034cc:	4649      	mov	r1, r9
 80034ce:	f04f 0200 	mov.w	r2, #0
 80034d2:	f04f 0300 	mov.w	r3, #0
 80034d6:	014b      	lsls	r3, r1, #5
 80034d8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80034dc:	0142      	lsls	r2, r0, #5
 80034de:	4610      	mov	r0, r2
 80034e0:	4619      	mov	r1, r3
 80034e2:	ebb0 0008 	subs.w	r0, r0, r8
 80034e6:	eb61 0109 	sbc.w	r1, r1, r9
 80034ea:	f04f 0200 	mov.w	r2, #0
 80034ee:	f04f 0300 	mov.w	r3, #0
 80034f2:	018b      	lsls	r3, r1, #6
 80034f4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80034f8:	0182      	lsls	r2, r0, #6
 80034fa:	1a12      	subs	r2, r2, r0
 80034fc:	eb63 0301 	sbc.w	r3, r3, r1
 8003500:	f04f 0000 	mov.w	r0, #0
 8003504:	f04f 0100 	mov.w	r1, #0
 8003508:	00d9      	lsls	r1, r3, #3
 800350a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800350e:	00d0      	lsls	r0, r2, #3
 8003510:	4602      	mov	r2, r0
 8003512:	460b      	mov	r3, r1
 8003514:	eb12 0208 	adds.w	r2, r2, r8
 8003518:	eb43 0309 	adc.w	r3, r3, r9
 800351c:	f04f 0000 	mov.w	r0, #0
 8003520:	f04f 0100 	mov.w	r1, #0
 8003524:	0259      	lsls	r1, r3, #9
 8003526:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800352a:	0250      	lsls	r0, r2, #9
 800352c:	4602      	mov	r2, r0
 800352e:	460b      	mov	r3, r1
 8003530:	4610      	mov	r0, r2
 8003532:	4619      	mov	r1, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	461a      	mov	r2, r3
 8003538:	f04f 0300 	mov.w	r3, #0
 800353c:	f7fc fe4a 	bl	80001d4 <__aeabi_uldivmod>
 8003540:	4602      	mov	r2, r0
 8003542:	460b      	mov	r3, r1
 8003544:	4613      	mov	r3, r2
 8003546:	60fb      	str	r3, [r7, #12]
 8003548:	e04a      	b.n	80035e0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800354a:	4b31      	ldr	r3, [pc, #196]	; (8003610 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	099b      	lsrs	r3, r3, #6
 8003550:	461a      	mov	r2, r3
 8003552:	f04f 0300 	mov.w	r3, #0
 8003556:	f240 10ff 	movw	r0, #511	; 0x1ff
 800355a:	f04f 0100 	mov.w	r1, #0
 800355e:	ea02 0400 	and.w	r4, r2, r0
 8003562:	ea03 0501 	and.w	r5, r3, r1
 8003566:	4620      	mov	r0, r4
 8003568:	4629      	mov	r1, r5
 800356a:	f04f 0200 	mov.w	r2, #0
 800356e:	f04f 0300 	mov.w	r3, #0
 8003572:	014b      	lsls	r3, r1, #5
 8003574:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003578:	0142      	lsls	r2, r0, #5
 800357a:	4610      	mov	r0, r2
 800357c:	4619      	mov	r1, r3
 800357e:	1b00      	subs	r0, r0, r4
 8003580:	eb61 0105 	sbc.w	r1, r1, r5
 8003584:	f04f 0200 	mov.w	r2, #0
 8003588:	f04f 0300 	mov.w	r3, #0
 800358c:	018b      	lsls	r3, r1, #6
 800358e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003592:	0182      	lsls	r2, r0, #6
 8003594:	1a12      	subs	r2, r2, r0
 8003596:	eb63 0301 	sbc.w	r3, r3, r1
 800359a:	f04f 0000 	mov.w	r0, #0
 800359e:	f04f 0100 	mov.w	r1, #0
 80035a2:	00d9      	lsls	r1, r3, #3
 80035a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80035a8:	00d0      	lsls	r0, r2, #3
 80035aa:	4602      	mov	r2, r0
 80035ac:	460b      	mov	r3, r1
 80035ae:	1912      	adds	r2, r2, r4
 80035b0:	eb45 0303 	adc.w	r3, r5, r3
 80035b4:	f04f 0000 	mov.w	r0, #0
 80035b8:	f04f 0100 	mov.w	r1, #0
 80035bc:	0299      	lsls	r1, r3, #10
 80035be:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80035c2:	0290      	lsls	r0, r2, #10
 80035c4:	4602      	mov	r2, r0
 80035c6:	460b      	mov	r3, r1
 80035c8:	4610      	mov	r0, r2
 80035ca:	4619      	mov	r1, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	461a      	mov	r2, r3
 80035d0:	f04f 0300 	mov.w	r3, #0
 80035d4:	f7fc fdfe 	bl	80001d4 <__aeabi_uldivmod>
 80035d8:	4602      	mov	r2, r0
 80035da:	460b      	mov	r3, r1
 80035dc:	4613      	mov	r3, r2
 80035de:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035e0:	4b0b      	ldr	r3, [pc, #44]	; (8003610 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	0c1b      	lsrs	r3, r3, #16
 80035e6:	f003 0303 	and.w	r3, r3, #3
 80035ea:	3301      	adds	r3, #1
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f8:	60bb      	str	r3, [r7, #8]
      break;
 80035fa:	e002      	b.n	8003602 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035fc:	4b05      	ldr	r3, [pc, #20]	; (8003614 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80035fe:	60bb      	str	r3, [r7, #8]
      break;
 8003600:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003602:	68bb      	ldr	r3, [r7, #8]
}
 8003604:	4618      	mov	r0, r3
 8003606:	3710      	adds	r7, #16
 8003608:	46bd      	mov	sp, r7
 800360a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800360e:	bf00      	nop
 8003610:	40023800 	.word	0x40023800
 8003614:	00f42400 	.word	0x00f42400
 8003618:	007a1200 	.word	0x007a1200

0800361c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800361c:	b480      	push	{r7}
 800361e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003620:	4b03      	ldr	r3, [pc, #12]	; (8003630 <HAL_RCC_GetHCLKFreq+0x14>)
 8003622:	681b      	ldr	r3, [r3, #0]
}
 8003624:	4618      	mov	r0, r3
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	20000000 	.word	0x20000000

08003634 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003638:	f7ff fff0 	bl	800361c <HAL_RCC_GetHCLKFreq>
 800363c:	4602      	mov	r2, r0
 800363e:	4b05      	ldr	r3, [pc, #20]	; (8003654 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	0a9b      	lsrs	r3, r3, #10
 8003644:	f003 0307 	and.w	r3, r3, #7
 8003648:	4903      	ldr	r1, [pc, #12]	; (8003658 <HAL_RCC_GetPCLK1Freq+0x24>)
 800364a:	5ccb      	ldrb	r3, [r1, r3]
 800364c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003650:	4618      	mov	r0, r3
 8003652:	bd80      	pop	{r7, pc}
 8003654:	40023800 	.word	0x40023800
 8003658:	080053a8 	.word	0x080053a8

0800365c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003660:	f7ff ffdc 	bl	800361c <HAL_RCC_GetHCLKFreq>
 8003664:	4602      	mov	r2, r0
 8003666:	4b05      	ldr	r3, [pc, #20]	; (800367c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	0b5b      	lsrs	r3, r3, #13
 800366c:	f003 0307 	and.w	r3, r3, #7
 8003670:	4903      	ldr	r1, [pc, #12]	; (8003680 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003672:	5ccb      	ldrb	r3, [r1, r3]
 8003674:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003678:	4618      	mov	r0, r3
 800367a:	bd80      	pop	{r7, pc}
 800367c:	40023800 	.word	0x40023800
 8003680:	080053a8 	.word	0x080053a8

08003684 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d101      	bne.n	8003696 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e07b      	b.n	800378e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369a:	2b00      	cmp	r3, #0
 800369c:	d108      	bne.n	80036b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036a6:	d009      	beq.n	80036bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	61da      	str	r2, [r3, #28]
 80036ae:	e005      	b.n	80036bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d106      	bne.n	80036dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f7fe f9ea 	bl	8001ab0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2202      	movs	r2, #2
 80036e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036f2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003704:	431a      	orrs	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800370e:	431a      	orrs	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	691b      	ldr	r3, [r3, #16]
 8003714:	f003 0302 	and.w	r3, r3, #2
 8003718:	431a      	orrs	r2, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	431a      	orrs	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800372c:	431a      	orrs	r2, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	69db      	ldr	r3, [r3, #28]
 8003732:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003736:	431a      	orrs	r2, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a1b      	ldr	r3, [r3, #32]
 800373c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003740:	ea42 0103 	orr.w	r1, r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003748:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	430a      	orrs	r2, r1
 8003752:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	699b      	ldr	r3, [r3, #24]
 8003758:	0c1b      	lsrs	r3, r3, #16
 800375a:	f003 0104 	and.w	r1, r3, #4
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003762:	f003 0210 	and.w	r2, r3, #16
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	430a      	orrs	r2, r1
 800376c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	69da      	ldr	r2, [r3, #28]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800377c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	3708      	adds	r7, #8
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}

08003796 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003796:	b580      	push	{r7, lr}
 8003798:	b08c      	sub	sp, #48	; 0x30
 800379a:	af00      	add	r7, sp, #0
 800379c:	60f8      	str	r0, [r7, #12]
 800379e:	60b9      	str	r1, [r7, #8]
 80037a0:	607a      	str	r2, [r7, #4]
 80037a2:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80037a4:	2301      	movs	r3, #1
 80037a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80037a8:	2300      	movs	r3, #0
 80037aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d101      	bne.n	80037bc <HAL_SPI_TransmitReceive+0x26>
 80037b8:	2302      	movs	r3, #2
 80037ba:	e18a      	b.n	8003ad2 <HAL_SPI_TransmitReceive+0x33c>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037c4:	f7fe fb8e 	bl	8001ee4 <HAL_GetTick>
 80037c8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80037da:	887b      	ldrh	r3, [r7, #2]
 80037dc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80037de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d00f      	beq.n	8003806 <HAL_SPI_TransmitReceive+0x70>
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037ec:	d107      	bne.n	80037fe <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d103      	bne.n	80037fe <HAL_SPI_TransmitReceive+0x68>
 80037f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80037fa:	2b04      	cmp	r3, #4
 80037fc:	d003      	beq.n	8003806 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80037fe:	2302      	movs	r3, #2
 8003800:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003804:	e15b      	b.n	8003abe <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d005      	beq.n	8003818 <HAL_SPI_TransmitReceive+0x82>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d002      	beq.n	8003818 <HAL_SPI_TransmitReceive+0x82>
 8003812:	887b      	ldrh	r3, [r7, #2]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d103      	bne.n	8003820 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800381e:	e14e      	b.n	8003abe <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003826:	b2db      	uxtb	r3, r3
 8003828:	2b04      	cmp	r3, #4
 800382a:	d003      	beq.n	8003834 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2205      	movs	r2, #5
 8003830:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	887a      	ldrh	r2, [r7, #2]
 8003844:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	887a      	ldrh	r2, [r7, #2]
 800384a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	68ba      	ldr	r2, [r7, #8]
 8003850:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	887a      	ldrh	r2, [r7, #2]
 8003856:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	887a      	ldrh	r2, [r7, #2]
 800385c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003874:	2b40      	cmp	r3, #64	; 0x40
 8003876:	d007      	beq.n	8003888 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003886:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003890:	d178      	bne.n	8003984 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d002      	beq.n	80038a0 <HAL_SPI_TransmitReceive+0x10a>
 800389a:	8b7b      	ldrh	r3, [r7, #26]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d166      	bne.n	800396e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a4:	881a      	ldrh	r2, [r3, #0]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b0:	1c9a      	adds	r2, r3, #2
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	3b01      	subs	r3, #1
 80038be:	b29a      	uxth	r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038c4:	e053      	b.n	800396e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f003 0302 	and.w	r3, r3, #2
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d11b      	bne.n	800390c <HAL_SPI_TransmitReceive+0x176>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038d8:	b29b      	uxth	r3, r3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d016      	beq.n	800390c <HAL_SPI_TransmitReceive+0x176>
 80038de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d113      	bne.n	800390c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e8:	881a      	ldrh	r2, [r3, #0]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f4:	1c9a      	adds	r2, r3, #2
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038fe:	b29b      	uxth	r3, r3
 8003900:	3b01      	subs	r3, #1
 8003902:	b29a      	uxth	r2, r3
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003908:	2300      	movs	r3, #0
 800390a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f003 0301 	and.w	r3, r3, #1
 8003916:	2b01      	cmp	r3, #1
 8003918:	d119      	bne.n	800394e <HAL_SPI_TransmitReceive+0x1b8>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800391e:	b29b      	uxth	r3, r3
 8003920:	2b00      	cmp	r3, #0
 8003922:	d014      	beq.n	800394e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68da      	ldr	r2, [r3, #12]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392e:	b292      	uxth	r2, r2
 8003930:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003936:	1c9a      	adds	r2, r3, #2
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003940:	b29b      	uxth	r3, r3
 8003942:	3b01      	subs	r3, #1
 8003944:	b29a      	uxth	r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800394a:	2301      	movs	r3, #1
 800394c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800394e:	f7fe fac9 	bl	8001ee4 <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800395a:	429a      	cmp	r2, r3
 800395c:	d807      	bhi.n	800396e <HAL_SPI_TransmitReceive+0x1d8>
 800395e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003960:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003964:	d003      	beq.n	800396e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800396c:	e0a7      	b.n	8003abe <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003972:	b29b      	uxth	r3, r3
 8003974:	2b00      	cmp	r3, #0
 8003976:	d1a6      	bne.n	80038c6 <HAL_SPI_TransmitReceive+0x130>
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800397c:	b29b      	uxth	r3, r3
 800397e:	2b00      	cmp	r3, #0
 8003980:	d1a1      	bne.n	80038c6 <HAL_SPI_TransmitReceive+0x130>
 8003982:	e07c      	b.n	8003a7e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d002      	beq.n	8003992 <HAL_SPI_TransmitReceive+0x1fc>
 800398c:	8b7b      	ldrh	r3, [r7, #26]
 800398e:	2b01      	cmp	r3, #1
 8003990:	d16b      	bne.n	8003a6a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	330c      	adds	r3, #12
 800399c:	7812      	ldrb	r2, [r2, #0]
 800399e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a4:	1c5a      	adds	r2, r3, #1
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	3b01      	subs	r3, #1
 80039b2:	b29a      	uxth	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039b8:	e057      	b.n	8003a6a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f003 0302 	and.w	r3, r3, #2
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d11c      	bne.n	8003a02 <HAL_SPI_TransmitReceive+0x26c>
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d017      	beq.n	8003a02 <HAL_SPI_TransmitReceive+0x26c>
 80039d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d114      	bne.n	8003a02 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	330c      	adds	r3, #12
 80039e2:	7812      	ldrb	r2, [r2, #0]
 80039e4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ea:	1c5a      	adds	r2, r3, #1
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	3b01      	subs	r3, #1
 80039f8:	b29a      	uxth	r2, r3
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80039fe:	2300      	movs	r3, #0
 8003a00:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	f003 0301 	and.w	r3, r3, #1
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d119      	bne.n	8003a44 <HAL_SPI_TransmitReceive+0x2ae>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d014      	beq.n	8003a44 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	68da      	ldr	r2, [r3, #12]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a24:	b2d2      	uxtb	r2, r2
 8003a26:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a2c:	1c5a      	adds	r2, r3, #1
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	3b01      	subs	r3, #1
 8003a3a:	b29a      	uxth	r2, r3
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a40:	2301      	movs	r3, #1
 8003a42:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003a44:	f7fe fa4e 	bl	8001ee4 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d803      	bhi.n	8003a5c <HAL_SPI_TransmitReceive+0x2c6>
 8003a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a5a:	d102      	bne.n	8003a62 <HAL_SPI_TransmitReceive+0x2cc>
 8003a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d103      	bne.n	8003a6a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003a68:	e029      	b.n	8003abe <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d1a2      	bne.n	80039ba <HAL_SPI_TransmitReceive+0x224>
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d19d      	bne.n	80039ba <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a80:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a82:	68f8      	ldr	r0, [r7, #12]
 8003a84:	f000 f8b2 	bl	8003bec <SPI_EndRxTxTransaction>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d006      	beq.n	8003a9c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2220      	movs	r2, #32
 8003a98:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003a9a:	e010      	b.n	8003abe <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d10b      	bne.n	8003abc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	617b      	str	r3, [r7, #20]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	617b      	str	r3, [r7, #20]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	617b      	str	r3, [r7, #20]
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	e000      	b.n	8003abe <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003abc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003ace:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3730      	adds	r7, #48	; 0x30
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
	...

08003adc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b088      	sub	sp, #32
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	603b      	str	r3, [r7, #0]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003aec:	f7fe f9fa 	bl	8001ee4 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af4:	1a9b      	subs	r3, r3, r2
 8003af6:	683a      	ldr	r2, [r7, #0]
 8003af8:	4413      	add	r3, r2
 8003afa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003afc:	f7fe f9f2 	bl	8001ee4 <HAL_GetTick>
 8003b00:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003b02:	4b39      	ldr	r3, [pc, #228]	; (8003be8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	015b      	lsls	r3, r3, #5
 8003b08:	0d1b      	lsrs	r3, r3, #20
 8003b0a:	69fa      	ldr	r2, [r7, #28]
 8003b0c:	fb02 f303 	mul.w	r3, r2, r3
 8003b10:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b12:	e054      	b.n	8003bbe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b1a:	d050      	beq.n	8003bbe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b1c:	f7fe f9e2 	bl	8001ee4 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	69fa      	ldr	r2, [r7, #28]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d902      	bls.n	8003b32 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d13d      	bne.n	8003bae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	685a      	ldr	r2, [r3, #4]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b40:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b4a:	d111      	bne.n	8003b70 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b54:	d004      	beq.n	8003b60 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b5e:	d107      	bne.n	8003b70 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b6e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b78:	d10f      	bne.n	8003b9a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b88:	601a      	str	r2, [r3, #0]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b98:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e017      	b.n	8003bde <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d101      	bne.n	8003bb8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	689a      	ldr	r2, [r3, #8]
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	68ba      	ldr	r2, [r7, #8]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	bf0c      	ite	eq
 8003bce:	2301      	moveq	r3, #1
 8003bd0:	2300      	movne	r3, #0
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	79fb      	ldrb	r3, [r7, #7]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d19b      	bne.n	8003b14 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3720      	adds	r7, #32
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	20000000 	.word	0x20000000

08003bec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b088      	sub	sp, #32
 8003bf0:	af02      	add	r7, sp, #8
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003bf8:	4b1b      	ldr	r3, [pc, #108]	; (8003c68 <SPI_EndRxTxTransaction+0x7c>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a1b      	ldr	r2, [pc, #108]	; (8003c6c <SPI_EndRxTxTransaction+0x80>)
 8003bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8003c02:	0d5b      	lsrs	r3, r3, #21
 8003c04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c08:	fb02 f303 	mul.w	r3, r2, r3
 8003c0c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c16:	d112      	bne.n	8003c3e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	9300      	str	r3, [sp, #0]
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	2180      	movs	r1, #128	; 0x80
 8003c22:	68f8      	ldr	r0, [r7, #12]
 8003c24:	f7ff ff5a 	bl	8003adc <SPI_WaitFlagStateUntilTimeout>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d016      	beq.n	8003c5c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c32:	f043 0220 	orr.w	r2, r3, #32
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e00f      	b.n	8003c5e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00a      	beq.n	8003c5a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	3b01      	subs	r3, #1
 8003c48:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c54:	2b80      	cmp	r3, #128	; 0x80
 8003c56:	d0f2      	beq.n	8003c3e <SPI_EndRxTxTransaction+0x52>
 8003c58:	e000      	b.n	8003c5c <SPI_EndRxTxTransaction+0x70>
        break;
 8003c5a:	bf00      	nop
  }

  return HAL_OK;
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3718      	adds	r7, #24
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	20000000 	.word	0x20000000
 8003c6c:	165e9f81 	.word	0x165e9f81

08003c70 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d101      	bne.n	8003c82 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e041      	b.n	8003d06 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d106      	bne.n	8003c9c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f7fd ff52 	bl	8001b40 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2202      	movs	r2, #2
 8003ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	3304      	adds	r3, #4
 8003cac:	4619      	mov	r1, r3
 8003cae:	4610      	mov	r0, r2
 8003cb0:	f000 fa00 	bl	80040b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3708      	adds	r7, #8
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
	...

08003d10 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d109      	bne.n	8003d34 <HAL_TIM_PWM_Start+0x24>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	bf14      	ite	ne
 8003d2c:	2301      	movne	r3, #1
 8003d2e:	2300      	moveq	r3, #0
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	e022      	b.n	8003d7a <HAL_TIM_PWM_Start+0x6a>
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	2b04      	cmp	r3, #4
 8003d38:	d109      	bne.n	8003d4e <HAL_TIM_PWM_Start+0x3e>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	bf14      	ite	ne
 8003d46:	2301      	movne	r3, #1
 8003d48:	2300      	moveq	r3, #0
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	e015      	b.n	8003d7a <HAL_TIM_PWM_Start+0x6a>
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	2b08      	cmp	r3, #8
 8003d52:	d109      	bne.n	8003d68 <HAL_TIM_PWM_Start+0x58>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	bf14      	ite	ne
 8003d60:	2301      	movne	r3, #1
 8003d62:	2300      	moveq	r3, #0
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	e008      	b.n	8003d7a <HAL_TIM_PWM_Start+0x6a>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	bf14      	ite	ne
 8003d74:	2301      	movne	r3, #1
 8003d76:	2300      	moveq	r3, #0
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d001      	beq.n	8003d82 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e068      	b.n	8003e54 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d104      	bne.n	8003d92 <HAL_TIM_PWM_Start+0x82>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2202      	movs	r2, #2
 8003d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d90:	e013      	b.n	8003dba <HAL_TIM_PWM_Start+0xaa>
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	2b04      	cmp	r3, #4
 8003d96:	d104      	bne.n	8003da2 <HAL_TIM_PWM_Start+0x92>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2202      	movs	r2, #2
 8003d9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003da0:	e00b      	b.n	8003dba <HAL_TIM_PWM_Start+0xaa>
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	2b08      	cmp	r3, #8
 8003da6:	d104      	bne.n	8003db2 <HAL_TIM_PWM_Start+0xa2>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2202      	movs	r2, #2
 8003dac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003db0:	e003      	b.n	8003dba <HAL_TIM_PWM_Start+0xaa>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2202      	movs	r2, #2
 8003db6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	6839      	ldr	r1, [r7, #0]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f000 fb82 	bl	80044cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a23      	ldr	r2, [pc, #140]	; (8003e5c <HAL_TIM_PWM_Start+0x14c>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d107      	bne.n	8003de2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003de0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a1d      	ldr	r2, [pc, #116]	; (8003e5c <HAL_TIM_PWM_Start+0x14c>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d018      	beq.n	8003e1e <HAL_TIM_PWM_Start+0x10e>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003df4:	d013      	beq.n	8003e1e <HAL_TIM_PWM_Start+0x10e>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a19      	ldr	r2, [pc, #100]	; (8003e60 <HAL_TIM_PWM_Start+0x150>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d00e      	beq.n	8003e1e <HAL_TIM_PWM_Start+0x10e>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a17      	ldr	r2, [pc, #92]	; (8003e64 <HAL_TIM_PWM_Start+0x154>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d009      	beq.n	8003e1e <HAL_TIM_PWM_Start+0x10e>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a16      	ldr	r2, [pc, #88]	; (8003e68 <HAL_TIM_PWM_Start+0x158>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d004      	beq.n	8003e1e <HAL_TIM_PWM_Start+0x10e>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a14      	ldr	r2, [pc, #80]	; (8003e6c <HAL_TIM_PWM_Start+0x15c>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d111      	bne.n	8003e42 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f003 0307 	and.w	r3, r3, #7
 8003e28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2b06      	cmp	r3, #6
 8003e2e:	d010      	beq.n	8003e52 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f042 0201 	orr.w	r2, r2, #1
 8003e3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e40:	e007      	b.n	8003e52 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f042 0201 	orr.w	r2, r2, #1
 8003e50:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3710      	adds	r7, #16
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	40010000 	.word	0x40010000
 8003e60:	40000400 	.word	0x40000400
 8003e64:	40000800 	.word	0x40000800
 8003e68:	40000c00 	.word	0x40000c00
 8003e6c:	40014000 	.word	0x40014000

08003e70 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b082      	sub	sp, #8
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	6839      	ldr	r1, [r7, #0]
 8003e82:	4618      	mov	r0, r3
 8003e84:	f000 fb22 	bl	80044cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a29      	ldr	r2, [pc, #164]	; (8003f34 <HAL_TIM_PWM_Stop+0xc4>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d117      	bne.n	8003ec2 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	6a1a      	ldr	r2, [r3, #32]
 8003e98:	f241 1311 	movw	r3, #4369	; 0x1111
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d10f      	bne.n	8003ec2 <HAL_TIM_PWM_Stop+0x52>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	6a1a      	ldr	r2, [r3, #32]
 8003ea8:	f240 4344 	movw	r3, #1092	; 0x444
 8003eac:	4013      	ands	r3, r2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d107      	bne.n	8003ec2 <HAL_TIM_PWM_Stop+0x52>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ec0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	6a1a      	ldr	r2, [r3, #32]
 8003ec8:	f241 1311 	movw	r3, #4369	; 0x1111
 8003ecc:	4013      	ands	r3, r2
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d10f      	bne.n	8003ef2 <HAL_TIM_PWM_Stop+0x82>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	6a1a      	ldr	r2, [r3, #32]
 8003ed8:	f240 4344 	movw	r3, #1092	; 0x444
 8003edc:	4013      	ands	r3, r2
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d107      	bne.n	8003ef2 <HAL_TIM_PWM_Stop+0x82>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f022 0201 	bic.w	r2, r2, #1
 8003ef0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d104      	bne.n	8003f02 <HAL_TIM_PWM_Stop+0x92>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f00:	e013      	b.n	8003f2a <HAL_TIM_PWM_Stop+0xba>
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	2b04      	cmp	r3, #4
 8003f06:	d104      	bne.n	8003f12 <HAL_TIM_PWM_Stop+0xa2>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f10:	e00b      	b.n	8003f2a <HAL_TIM_PWM_Stop+0xba>
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	2b08      	cmp	r3, #8
 8003f16:	d104      	bne.n	8003f22 <HAL_TIM_PWM_Stop+0xb2>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f20:	e003      	b.n	8003f2a <HAL_TIM_PWM_Stop+0xba>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2201      	movs	r2, #1
 8003f26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3708      	adds	r7, #8
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	40010000 	.word	0x40010000

08003f38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d101      	bne.n	8003f52 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003f4e:	2302      	movs	r3, #2
 8003f50:	e0ac      	b.n	80040ac <HAL_TIM_PWM_ConfigChannel+0x174>
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2201      	movs	r2, #1
 8003f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2b0c      	cmp	r3, #12
 8003f5e:	f200 809f 	bhi.w	80040a0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003f62:	a201      	add	r2, pc, #4	; (adr r2, 8003f68 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f68:	08003f9d 	.word	0x08003f9d
 8003f6c:	080040a1 	.word	0x080040a1
 8003f70:	080040a1 	.word	0x080040a1
 8003f74:	080040a1 	.word	0x080040a1
 8003f78:	08003fdd 	.word	0x08003fdd
 8003f7c:	080040a1 	.word	0x080040a1
 8003f80:	080040a1 	.word	0x080040a1
 8003f84:	080040a1 	.word	0x080040a1
 8003f88:	0800401f 	.word	0x0800401f
 8003f8c:	080040a1 	.word	0x080040a1
 8003f90:	080040a1 	.word	0x080040a1
 8003f94:	080040a1 	.word	0x080040a1
 8003f98:	0800405f 	.word	0x0800405f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68b9      	ldr	r1, [r7, #8]
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f000 f906 	bl	80041b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	699a      	ldr	r2, [r3, #24]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f042 0208 	orr.w	r2, r2, #8
 8003fb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	699a      	ldr	r2, [r3, #24]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f022 0204 	bic.w	r2, r2, #4
 8003fc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	6999      	ldr	r1, [r3, #24]
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	691a      	ldr	r2, [r3, #16]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	619a      	str	r2, [r3, #24]
      break;
 8003fda:	e062      	b.n	80040a2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68b9      	ldr	r1, [r7, #8]
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f000 f94c 	bl	8004280 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	699a      	ldr	r2, [r3, #24]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ff6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	699a      	ldr	r2, [r3, #24]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004006:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	6999      	ldr	r1, [r3, #24]
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	021a      	lsls	r2, r3, #8
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	430a      	orrs	r2, r1
 800401a:	619a      	str	r2, [r3, #24]
      break;
 800401c:	e041      	b.n	80040a2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68b9      	ldr	r1, [r7, #8]
 8004024:	4618      	mov	r0, r3
 8004026:	f000 f997 	bl	8004358 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	69da      	ldr	r2, [r3, #28]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f042 0208 	orr.w	r2, r2, #8
 8004038:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	69da      	ldr	r2, [r3, #28]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f022 0204 	bic.w	r2, r2, #4
 8004048:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	69d9      	ldr	r1, [r3, #28]
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	691a      	ldr	r2, [r3, #16]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	430a      	orrs	r2, r1
 800405a:	61da      	str	r2, [r3, #28]
      break;
 800405c:	e021      	b.n	80040a2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68b9      	ldr	r1, [r7, #8]
 8004064:	4618      	mov	r0, r3
 8004066:	f000 f9e1 	bl	800442c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	69da      	ldr	r2, [r3, #28]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004078:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	69da      	ldr	r2, [r3, #28]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004088:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	69d9      	ldr	r1, [r3, #28]
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	021a      	lsls	r2, r3, #8
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	430a      	orrs	r2, r1
 800409c:	61da      	str	r2, [r3, #28]
      break;
 800409e:	e000      	b.n	80040a2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80040a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040aa:	2300      	movs	r3, #0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3710      	adds	r7, #16
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4a34      	ldr	r2, [pc, #208]	; (8004198 <TIM_Base_SetConfig+0xe4>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d00f      	beq.n	80040ec <TIM_Base_SetConfig+0x38>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040d2:	d00b      	beq.n	80040ec <TIM_Base_SetConfig+0x38>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a31      	ldr	r2, [pc, #196]	; (800419c <TIM_Base_SetConfig+0xe8>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d007      	beq.n	80040ec <TIM_Base_SetConfig+0x38>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a30      	ldr	r2, [pc, #192]	; (80041a0 <TIM_Base_SetConfig+0xec>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d003      	beq.n	80040ec <TIM_Base_SetConfig+0x38>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a2f      	ldr	r2, [pc, #188]	; (80041a4 <TIM_Base_SetConfig+0xf0>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d108      	bne.n	80040fe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	68fa      	ldr	r2, [r7, #12]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a25      	ldr	r2, [pc, #148]	; (8004198 <TIM_Base_SetConfig+0xe4>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d01b      	beq.n	800413e <TIM_Base_SetConfig+0x8a>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800410c:	d017      	beq.n	800413e <TIM_Base_SetConfig+0x8a>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a22      	ldr	r2, [pc, #136]	; (800419c <TIM_Base_SetConfig+0xe8>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d013      	beq.n	800413e <TIM_Base_SetConfig+0x8a>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a21      	ldr	r2, [pc, #132]	; (80041a0 <TIM_Base_SetConfig+0xec>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d00f      	beq.n	800413e <TIM_Base_SetConfig+0x8a>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a20      	ldr	r2, [pc, #128]	; (80041a4 <TIM_Base_SetConfig+0xf0>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d00b      	beq.n	800413e <TIM_Base_SetConfig+0x8a>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a1f      	ldr	r2, [pc, #124]	; (80041a8 <TIM_Base_SetConfig+0xf4>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d007      	beq.n	800413e <TIM_Base_SetConfig+0x8a>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a1e      	ldr	r2, [pc, #120]	; (80041ac <TIM_Base_SetConfig+0xf8>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d003      	beq.n	800413e <TIM_Base_SetConfig+0x8a>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a1d      	ldr	r2, [pc, #116]	; (80041b0 <TIM_Base_SetConfig+0xfc>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d108      	bne.n	8004150 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004144:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	68fa      	ldr	r2, [r7, #12]
 800414c:	4313      	orrs	r3, r2
 800414e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	695b      	ldr	r3, [r3, #20]
 800415a:	4313      	orrs	r3, r2
 800415c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	689a      	ldr	r2, [r3, #8]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a08      	ldr	r2, [pc, #32]	; (8004198 <TIM_Base_SetConfig+0xe4>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d103      	bne.n	8004184 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	691a      	ldr	r2, [r3, #16]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	615a      	str	r2, [r3, #20]
}
 800418a:	bf00      	nop
 800418c:	3714      	adds	r7, #20
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	40010000 	.word	0x40010000
 800419c:	40000400 	.word	0x40000400
 80041a0:	40000800 	.word	0x40000800
 80041a4:	40000c00 	.word	0x40000c00
 80041a8:	40014000 	.word	0x40014000
 80041ac:	40014400 	.word	0x40014400
 80041b0:	40014800 	.word	0x40014800

080041b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b087      	sub	sp, #28
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a1b      	ldr	r3, [r3, #32]
 80041c2:	f023 0201 	bic.w	r2, r3, #1
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	699b      	ldr	r3, [r3, #24]
 80041da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f023 0303 	bic.w	r3, r3, #3
 80041ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	f023 0302 	bic.w	r3, r3, #2
 80041fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	697a      	ldr	r2, [r7, #20]
 8004204:	4313      	orrs	r3, r2
 8004206:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	4a1c      	ldr	r2, [pc, #112]	; (800427c <TIM_OC1_SetConfig+0xc8>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d10c      	bne.n	800422a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	f023 0308 	bic.w	r3, r3, #8
 8004216:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	697a      	ldr	r2, [r7, #20]
 800421e:	4313      	orrs	r3, r2
 8004220:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	f023 0304 	bic.w	r3, r3, #4
 8004228:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a13      	ldr	r2, [pc, #76]	; (800427c <TIM_OC1_SetConfig+0xc8>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d111      	bne.n	8004256 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004238:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004240:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	693a      	ldr	r2, [r7, #16]
 8004248:	4313      	orrs	r3, r2
 800424a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	699b      	ldr	r3, [r3, #24]
 8004250:	693a      	ldr	r2, [r7, #16]
 8004252:	4313      	orrs	r3, r2
 8004254:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	693a      	ldr	r2, [r7, #16]
 800425a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	685a      	ldr	r2, [r3, #4]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	697a      	ldr	r2, [r7, #20]
 800426e:	621a      	str	r2, [r3, #32]
}
 8004270:	bf00      	nop
 8004272:	371c      	adds	r7, #28
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr
 800427c:	40010000 	.word	0x40010000

08004280 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004280:	b480      	push	{r7}
 8004282:	b087      	sub	sp, #28
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a1b      	ldr	r3, [r3, #32]
 800428e:	f023 0210 	bic.w	r2, r3, #16
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a1b      	ldr	r3, [r3, #32]
 800429a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	699b      	ldr	r3, [r3, #24]
 80042a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	021b      	lsls	r3, r3, #8
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	f023 0320 	bic.w	r3, r3, #32
 80042ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	011b      	lsls	r3, r3, #4
 80042d2:	697a      	ldr	r2, [r7, #20]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a1e      	ldr	r2, [pc, #120]	; (8004354 <TIM_OC2_SetConfig+0xd4>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d10d      	bne.n	80042fc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	011b      	lsls	r3, r3, #4
 80042ee:	697a      	ldr	r2, [r7, #20]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4a15      	ldr	r2, [pc, #84]	; (8004354 <TIM_OC2_SetConfig+0xd4>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d113      	bne.n	800432c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800430a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004312:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	695b      	ldr	r3, [r3, #20]
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	693a      	ldr	r2, [r7, #16]
 800431c:	4313      	orrs	r3, r2
 800431e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	699b      	ldr	r3, [r3, #24]
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	693a      	ldr	r2, [r7, #16]
 8004328:	4313      	orrs	r3, r2
 800432a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	693a      	ldr	r2, [r7, #16]
 8004330:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	68fa      	ldr	r2, [r7, #12]
 8004336:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	685a      	ldr	r2, [r3, #4]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	697a      	ldr	r2, [r7, #20]
 8004344:	621a      	str	r2, [r3, #32]
}
 8004346:	bf00      	nop
 8004348:	371c      	adds	r7, #28
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	40010000 	.word	0x40010000

08004358 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004358:	b480      	push	{r7}
 800435a:	b087      	sub	sp, #28
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a1b      	ldr	r3, [r3, #32]
 8004366:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	69db      	ldr	r3, [r3, #28]
 800437e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004386:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f023 0303 	bic.w	r3, r3, #3
 800438e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	4313      	orrs	r3, r2
 8004398:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80043a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	021b      	lsls	r3, r3, #8
 80043a8:	697a      	ldr	r2, [r7, #20]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a1d      	ldr	r2, [pc, #116]	; (8004428 <TIM_OC3_SetConfig+0xd0>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d10d      	bne.n	80043d2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80043bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	021b      	lsls	r3, r3, #8
 80043c4:	697a      	ldr	r2, [r7, #20]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a14      	ldr	r2, [pc, #80]	; (8004428 <TIM_OC3_SetConfig+0xd0>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d113      	bne.n	8004402 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	011b      	lsls	r3, r3, #4
 80043f0:	693a      	ldr	r2, [r7, #16]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	699b      	ldr	r3, [r3, #24]
 80043fa:	011b      	lsls	r3, r3, #4
 80043fc:	693a      	ldr	r2, [r7, #16]
 80043fe:	4313      	orrs	r3, r2
 8004400:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	693a      	ldr	r2, [r7, #16]
 8004406:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	685a      	ldr	r2, [r3, #4]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	697a      	ldr	r2, [r7, #20]
 800441a:	621a      	str	r2, [r3, #32]
}
 800441c:	bf00      	nop
 800441e:	371c      	adds	r7, #28
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr
 8004428:	40010000 	.word	0x40010000

0800442c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800442c:	b480      	push	{r7}
 800442e:	b087      	sub	sp, #28
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a1b      	ldr	r3, [r3, #32]
 800443a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a1b      	ldr	r3, [r3, #32]
 8004446:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	69db      	ldr	r3, [r3, #28]
 8004452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800445a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004462:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	021b      	lsls	r3, r3, #8
 800446a:	68fa      	ldr	r2, [r7, #12]
 800446c:	4313      	orrs	r3, r2
 800446e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004476:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	031b      	lsls	r3, r3, #12
 800447e:	693a      	ldr	r2, [r7, #16]
 8004480:	4313      	orrs	r3, r2
 8004482:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4a10      	ldr	r2, [pc, #64]	; (80044c8 <TIM_OC4_SetConfig+0x9c>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d109      	bne.n	80044a0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004492:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	695b      	ldr	r3, [r3, #20]
 8004498:	019b      	lsls	r3, r3, #6
 800449a:	697a      	ldr	r2, [r7, #20]
 800449c:	4313      	orrs	r3, r2
 800449e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	697a      	ldr	r2, [r7, #20]
 80044a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	68fa      	ldr	r2, [r7, #12]
 80044aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	685a      	ldr	r2, [r3, #4]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	693a      	ldr	r2, [r7, #16]
 80044b8:	621a      	str	r2, [r3, #32]
}
 80044ba:	bf00      	nop
 80044bc:	371c      	adds	r7, #28
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop
 80044c8:	40010000 	.word	0x40010000

080044cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b087      	sub	sp, #28
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	f003 031f 	and.w	r3, r3, #31
 80044de:	2201      	movs	r2, #1
 80044e0:	fa02 f303 	lsl.w	r3, r2, r3
 80044e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6a1a      	ldr	r2, [r3, #32]
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	43db      	mvns	r3, r3
 80044ee:	401a      	ands	r2, r3
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6a1a      	ldr	r2, [r3, #32]
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	f003 031f 	and.w	r3, r3, #31
 80044fe:	6879      	ldr	r1, [r7, #4]
 8004500:	fa01 f303 	lsl.w	r3, r1, r3
 8004504:	431a      	orrs	r2, r3
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	621a      	str	r2, [r3, #32]
}
 800450a:	bf00      	nop
 800450c:	371c      	adds	r7, #28
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
	...

08004518 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004528:	2b01      	cmp	r3, #1
 800452a:	d101      	bne.n	8004530 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800452c:	2302      	movs	r3, #2
 800452e:	e050      	b.n	80045d2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2202      	movs	r2, #2
 800453c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004556:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68fa      	ldr	r2, [r7, #12]
 800455e:	4313      	orrs	r3, r2
 8004560:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68fa      	ldr	r2, [r7, #12]
 8004568:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a1c      	ldr	r2, [pc, #112]	; (80045e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d018      	beq.n	80045a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800457c:	d013      	beq.n	80045a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a18      	ldr	r2, [pc, #96]	; (80045e4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d00e      	beq.n	80045a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a16      	ldr	r2, [pc, #88]	; (80045e8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d009      	beq.n	80045a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a15      	ldr	r2, [pc, #84]	; (80045ec <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d004      	beq.n	80045a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a13      	ldr	r2, [pc, #76]	; (80045f0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d10c      	bne.n	80045c0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	68ba      	ldr	r2, [r7, #8]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68ba      	ldr	r2, [r7, #8]
 80045be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3714      	adds	r7, #20
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop
 80045e0:	40010000 	.word	0x40010000
 80045e4:	40000400 	.word	0x40000400
 80045e8:	40000800 	.word	0x40000800
 80045ec:	40000c00 	.word	0x40000c00
 80045f0:	40014000 	.word	0x40014000

080045f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d101      	bne.n	8004606 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e04a      	b.n	800469c <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800460c:	b2db      	uxtb	r3, r3
 800460e:	2b00      	cmp	r3, #0
 8004610:	d111      	bne.n	8004636 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 fa80 	bl	8004b20 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004624:	2b00      	cmp	r3, #0
 8004626:	d102      	bne.n	800462e <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a1e      	ldr	r2, [pc, #120]	; (80046a4 <HAL_UART_Init+0xb0>)
 800462c:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2224      	movs	r2, #36	; 0x24
 800463a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	68da      	ldr	r2, [r3, #12]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800464c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 fc1c 	bl	8004e8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	691a      	ldr	r2, [r3, #16]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004662:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	695a      	ldr	r2, [r3, #20]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004672:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68da      	ldr	r2, [r3, #12]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004682:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2220      	movs	r2, #32
 800468e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2220      	movs	r2, #32
 8004696:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800469a:	2300      	movs	r3, #0
}
 800469c:	4618      	mov	r0, r3
 800469e:	3708      	adds	r7, #8
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	08001c75 	.word	0x08001c75

080046a8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	4613      	mov	r3, r2
 80046b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b20      	cmp	r3, #32
 80046c0:	d11d      	bne.n	80046fe <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d002      	beq.n	80046ce <HAL_UART_Receive_IT+0x26>
 80046c8:	88fb      	ldrh	r3, [r7, #6]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d101      	bne.n	80046d2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e016      	b.n	8004700 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d101      	bne.n	80046e0 <HAL_UART_Receive_IT+0x38>
 80046dc:	2302      	movs	r3, #2
 80046de:	e00f      	b.n	8004700 <HAL_UART_Receive_IT+0x58>
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2200      	movs	r2, #0
 80046ec:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80046ee:	88fb      	ldrh	r3, [r7, #6]
 80046f0:	461a      	mov	r2, r3
 80046f2:	68b9      	ldr	r1, [r7, #8]
 80046f4:	68f8      	ldr	r0, [r7, #12]
 80046f6:	f000 fa4b 	bl	8004b90 <UART_Start_Receive_IT>
 80046fa:	4603      	mov	r3, r0
 80046fc:	e000      	b.n	8004700 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80046fe:	2302      	movs	r3, #2
  }
}
 8004700:	4618      	mov	r0, r3
 8004702:	3710      	adds	r7, #16
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}

08004708 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b08a      	sub	sp, #40	; 0x28
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	695b      	ldr	r3, [r3, #20]
 8004726:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004728:	2300      	movs	r3, #0
 800472a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800472c:	2300      	movs	r3, #0
 800472e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004732:	f003 030f 	and.w	r3, r3, #15
 8004736:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d10d      	bne.n	800475a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800473e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004740:	f003 0320 	and.w	r3, r3, #32
 8004744:	2b00      	cmp	r3, #0
 8004746:	d008      	beq.n	800475a <HAL_UART_IRQHandler+0x52>
 8004748:	6a3b      	ldr	r3, [r7, #32]
 800474a:	f003 0320 	and.w	r3, r3, #32
 800474e:	2b00      	cmp	r3, #0
 8004750:	d003      	beq.n	800475a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 fb01 	bl	8004d5a <UART_Receive_IT>
      return;
 8004758:	e181      	b.n	8004a5e <HAL_UART_IRQHandler+0x356>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	2b00      	cmp	r3, #0
 800475e:	f000 80b4 	beq.w	80048ca <HAL_UART_IRQHandler+0x1c2>
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	f003 0301 	and.w	r3, r3, #1
 8004768:	2b00      	cmp	r3, #0
 800476a:	d105      	bne.n	8004778 <HAL_UART_IRQHandler+0x70>
 800476c:	6a3b      	ldr	r3, [r7, #32]
 800476e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004772:	2b00      	cmp	r3, #0
 8004774:	f000 80a9 	beq.w	80048ca <HAL_UART_IRQHandler+0x1c2>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477a:	f003 0301 	and.w	r3, r3, #1
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00a      	beq.n	8004798 <HAL_UART_IRQHandler+0x90>
 8004782:	6a3b      	ldr	r3, [r7, #32]
 8004784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004788:	2b00      	cmp	r3, #0
 800478a:	d005      	beq.n	8004798 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004790:	f043 0201 	orr.w	r2, r3, #1
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479a:	f003 0304 	and.w	r3, r3, #4
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00a      	beq.n	80047b8 <HAL_UART_IRQHandler+0xb0>
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	f003 0301 	and.w	r3, r3, #1
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d005      	beq.n	80047b8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b0:	f043 0202 	orr.w	r2, r3, #2
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80047b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ba:	f003 0302 	and.w	r3, r3, #2
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00a      	beq.n	80047d8 <HAL_UART_IRQHandler+0xd0>
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	f003 0301 	and.w	r3, r3, #1
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d005      	beq.n	80047d8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d0:	f043 0204 	orr.w	r2, r3, #4
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80047d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047da:	f003 0308 	and.w	r3, r3, #8
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00f      	beq.n	8004802 <HAL_UART_IRQHandler+0xfa>
 80047e2:	6a3b      	ldr	r3, [r7, #32]
 80047e4:	f003 0320 	and.w	r3, r3, #32
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d104      	bne.n	80047f6 <HAL_UART_IRQHandler+0xee>
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	f003 0301 	and.w	r3, r3, #1
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d005      	beq.n	8004802 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fa:	f043 0208 	orr.w	r2, r3, #8
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004806:	2b00      	cmp	r3, #0
 8004808:	f000 8124 	beq.w	8004a54 <HAL_UART_IRQHandler+0x34c>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800480c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480e:	f003 0320 	and.w	r3, r3, #32
 8004812:	2b00      	cmp	r3, #0
 8004814:	d007      	beq.n	8004826 <HAL_UART_IRQHandler+0x11e>
 8004816:	6a3b      	ldr	r3, [r7, #32]
 8004818:	f003 0320 	and.w	r3, r3, #32
 800481c:	2b00      	cmp	r3, #0
 800481e:	d002      	beq.n	8004826 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f000 fa9a 	bl	8004d5a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	695b      	ldr	r3, [r3, #20]
 800482c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004830:	2b40      	cmp	r3, #64	; 0x40
 8004832:	bf0c      	ite	eq
 8004834:	2301      	moveq	r3, #1
 8004836:	2300      	movne	r3, #0
 8004838:	b2db      	uxtb	r3, r3
 800483a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004840:	f003 0308 	and.w	r3, r3, #8
 8004844:	2b00      	cmp	r3, #0
 8004846:	d102      	bne.n	800484e <HAL_UART_IRQHandler+0x146>
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d033      	beq.n	80048b6 <HAL_UART_IRQHandler+0x1ae>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 f9d8 	bl	8004c04 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	695b      	ldr	r3, [r3, #20]
 800485a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800485e:	2b40      	cmp	r3, #64	; 0x40
 8004860:	d124      	bne.n	80048ac <HAL_UART_IRQHandler+0x1a4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	695a      	ldr	r2, [r3, #20]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004870:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004876:	2b00      	cmp	r3, #0
 8004878:	d013      	beq.n	80048a2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800487e:	4a79      	ldr	r2, [pc, #484]	; (8004a64 <HAL_UART_IRQHandler+0x35c>)
 8004880:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004886:	4618      	mov	r0, r3
 8004888:	f7fe f88b 	bl	80029a2 <HAL_DMA_Abort_IT>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d019      	beq.n	80048c6 <HAL_UART_IRQHandler+0x1be>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004896:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800489c:	4610      	mov	r0, r2
 800489e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048a0:	e011      	b.n	80048c6 <HAL_UART_IRQHandler+0x1be>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048aa:	e00c      	b.n	80048c6 <HAL_UART_IRQHandler+0x1be>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048b4:	e007      	b.n	80048c6 <HAL_UART_IRQHandler+0x1be>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80048c4:	e0c6      	b.n	8004a54 <HAL_UART_IRQHandler+0x34c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048c6:	bf00      	nop
    return;
 80048c8:	e0c4      	b.n	8004a54 <HAL_UART_IRQHandler+0x34c>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	f040 80a4 	bne.w	8004a1c <HAL_UART_IRQHandler+0x314>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80048d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d6:	f003 0310 	and.w	r3, r3, #16
 80048da:	2b00      	cmp	r3, #0
 80048dc:	f000 809e 	beq.w	8004a1c <HAL_UART_IRQHandler+0x314>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80048e0:	6a3b      	ldr	r3, [r7, #32]
 80048e2:	f003 0310 	and.w	r3, r3, #16
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	f000 8098 	beq.w	8004a1c <HAL_UART_IRQHandler+0x314>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048ec:	2300      	movs	r3, #0
 80048ee:	60fb      	str	r3, [r7, #12]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	60fb      	str	r3, [r7, #12]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	60fb      	str	r3, [r7, #12]
 8004900:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	695b      	ldr	r3, [r3, #20]
 8004908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800490c:	2b40      	cmp	r3, #64	; 0x40
 800490e:	d150      	bne.n	80049b2 <HAL_UART_IRQHandler+0x2aa>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800491a:	8a3b      	ldrh	r3, [r7, #16]
 800491c:	2b00      	cmp	r3, #0
 800491e:	f000 809b 	beq.w	8004a58 <HAL_UART_IRQHandler+0x350>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004926:	8a3a      	ldrh	r2, [r7, #16]
 8004928:	429a      	cmp	r2, r3
 800492a:	f080 8095 	bcs.w	8004a58 <HAL_UART_IRQHandler+0x350>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	8a3a      	ldrh	r2, [r7, #16]
 8004932:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004938:	69db      	ldr	r3, [r3, #28]
 800493a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800493e:	d02b      	beq.n	8004998 <HAL_UART_IRQHandler+0x290>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68da      	ldr	r2, [r3, #12]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800494e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	695a      	ldr	r2, [r3, #20]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f022 0201 	bic.w	r2, r2, #1
 800495e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	695a      	ldr	r2, [r3, #20]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800496e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2220      	movs	r2, #32
 8004974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68da      	ldr	r2, [r3, #12]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f022 0210 	bic.w	r2, r2, #16
 800498c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004992:	4618      	mov	r0, r3
 8004994:	f7fd ff95 	bl	80028c2 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 80049a4:	b292      	uxth	r2, r2
 80049a6:	1a8a      	subs	r2, r1, r2
 80049a8:	b292      	uxth	r2, r2
 80049aa:	4611      	mov	r1, r2
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif
      }
      return;
 80049b0:	e052      	b.n	8004a58 <HAL_UART_IRQHandler+0x350>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d048      	beq.n	8004a5c <HAL_UART_IRQHandler+0x354>
          &&(nb_rx_data > 0U) )
 80049ca:	8a7b      	ldrh	r3, [r7, #18]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d045      	beq.n	8004a5c <HAL_UART_IRQHandler+0x354>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	68da      	ldr	r2, [r3, #12]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80049de:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	695a      	ldr	r2, [r3, #20]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f022 0201 	bic.w	r2, r2, #1
 80049ee:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2220      	movs	r2, #32
 80049f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68da      	ldr	r2, [r3, #12]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f022 0210 	bic.w	r2, r2, #16
 8004a0c:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a12:	8a7a      	ldrh	r2, [r7, #18]
 8004a14:	4611      	mov	r1, r2
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif
      }
      return;
 8004a1a:	e01f      	b.n	8004a5c <HAL_UART_IRQHandler+0x354>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d008      	beq.n	8004a38 <HAL_UART_IRQHandler+0x330>
 8004a26:	6a3b      	ldr	r3, [r7, #32]
 8004a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d003      	beq.n	8004a38 <HAL_UART_IRQHandler+0x330>
  {
    UART_Transmit_IT(huart);
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f000 f929 	bl	8004c88 <UART_Transmit_IT>
    return;
 8004a36:	e012      	b.n	8004a5e <HAL_UART_IRQHandler+0x356>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00d      	beq.n	8004a5e <HAL_UART_IRQHandler+0x356>
 8004a42:	6a3b      	ldr	r3, [r7, #32]
 8004a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d008      	beq.n	8004a5e <HAL_UART_IRQHandler+0x356>
  {
    UART_EndTransmit_IT(huart);
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f000 f96b 	bl	8004d28 <UART_EndTransmit_IT>
    return;
 8004a52:	e004      	b.n	8004a5e <HAL_UART_IRQHandler+0x356>
    return;
 8004a54:	bf00      	nop
 8004a56:	e002      	b.n	8004a5e <HAL_UART_IRQHandler+0x356>
      return;
 8004a58:	bf00      	nop
 8004a5a:	e000      	b.n	8004a5e <HAL_UART_IRQHandler+0x356>
      return;
 8004a5c:	bf00      	nop
  }
}
 8004a5e:	3728      	adds	r7, #40	; 0x28
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	08004c5f 	.word	0x08004c5f

08004a68 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004a70:	bf00      	nop
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004a84:	bf00      	nop
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004a98:	bf00      	nop
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004aac:	bf00      	nop
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004ac0:	bf00      	nop
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8004ad4:	bf00      	nop
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8004ae8:	bf00      	nop
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8004afc:	bf00      	nop
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	460b      	mov	r3, r1
 8004b12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b14:	bf00      	nop
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4a10      	ldr	r2, [pc, #64]	; (8004b6c <UART_InitCallbacksToDefault+0x4c>)
 8004b2c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a0f      	ldr	r2, [pc, #60]	; (8004b70 <UART_InitCallbacksToDefault+0x50>)
 8004b32:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	4a0f      	ldr	r2, [pc, #60]	; (8004b74 <UART_InitCallbacksToDefault+0x54>)
 8004b38:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a0e      	ldr	r2, [pc, #56]	; (8004b78 <UART_InitCallbacksToDefault+0x58>)
 8004b3e:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	4a0e      	ldr	r2, [pc, #56]	; (8004b7c <UART_InitCallbacksToDefault+0x5c>)
 8004b44:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a0d      	ldr	r2, [pc, #52]	; (8004b80 <UART_InitCallbacksToDefault+0x60>)
 8004b4a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4a0d      	ldr	r2, [pc, #52]	; (8004b84 <UART_InitCallbacksToDefault+0x64>)
 8004b50:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a0c      	ldr	r2, [pc, #48]	; (8004b88 <UART_InitCallbacksToDefault+0x68>)
 8004b56:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4a0c      	ldr	r2, [pc, #48]	; (8004b8c <UART_InitCallbacksToDefault+0x6c>)
 8004b5c:	669a      	str	r2, [r3, #104]	; 0x68

}
 8004b5e:	bf00      	nop
 8004b60:	370c      	adds	r7, #12
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	08004a7d 	.word	0x08004a7d
 8004b70:	08004a69 	.word	0x08004a69
 8004b74:	08004aa5 	.word	0x08004aa5
 8004b78:	08004a91 	.word	0x08004a91
 8004b7c:	08004ab9 	.word	0x08004ab9
 8004b80:	08004acd 	.word	0x08004acd
 8004b84:	08004ae1 	.word	0x08004ae1
 8004b88:	08004af5 	.word	0x08004af5
 8004b8c:	08004b09 	.word	0x08004b09

08004b90 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b085      	sub	sp, #20
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	68ba      	ldr	r2, [r7, #8]
 8004ba2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	88fa      	ldrh	r2, [r7, #6]
 8004ba8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	88fa      	ldrh	r2, [r7, #6]
 8004bae:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2222      	movs	r2, #34	; 0x22
 8004bba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68da      	ldr	r2, [r3, #12]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bd4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	695a      	ldr	r2, [r3, #20]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f042 0201 	orr.w	r2, r2, #1
 8004be4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68da      	ldr	r2, [r3, #12]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f042 0220 	orr.w	r2, r2, #32
 8004bf4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004bf6:	2300      	movs	r3, #0
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3714      	adds	r7, #20
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	68da      	ldr	r2, [r3, #12]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004c1a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	695a      	ldr	r2, [r3, #20]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f022 0201 	bic.w	r2, r2, #1
 8004c2a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d107      	bne.n	8004c44 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68da      	ldr	r2, [r3, #12]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f022 0210 	bic.w	r2, r2, #16
 8004c42:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2220      	movs	r2, #32
 8004c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004c52:	bf00      	nop
 8004c54:	370c      	adds	r7, #12
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr

08004c5e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c5e:	b580      	push	{r7, lr}
 8004c60:	b084      	sub	sp, #16
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c6a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2200      	movs	r2, #0
 8004c76:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c7c:	68f8      	ldr	r0, [r7, #12]
 8004c7e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c80:	bf00      	nop
 8004c82:	3710      	adds	r7, #16
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b085      	sub	sp, #20
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	2b21      	cmp	r3, #33	; 0x21
 8004c9a:	d13e      	bne.n	8004d1a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ca4:	d114      	bne.n	8004cd0 <UART_Transmit_IT+0x48>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d110      	bne.n	8004cd0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	881b      	ldrh	r3, [r3, #0]
 8004cb8:	461a      	mov	r2, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cc2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a1b      	ldr	r3, [r3, #32]
 8004cc8:	1c9a      	adds	r2, r3, #2
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	621a      	str	r2, [r3, #32]
 8004cce:	e008      	b.n	8004ce2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6a1b      	ldr	r3, [r3, #32]
 8004cd4:	1c59      	adds	r1, r3, #1
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	6211      	str	r1, [r2, #32]
 8004cda:	781a      	ldrb	r2, [r3, #0]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	4619      	mov	r1, r3
 8004cf0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d10f      	bne.n	8004d16 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	68da      	ldr	r2, [r3, #12]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d04:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68da      	ldr	r2, [r3, #12]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d14:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004d16:	2300      	movs	r3, #0
 8004d18:	e000      	b.n	8004d1c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004d1a:	2302      	movs	r3, #2
  }
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3714      	adds	r7, #20
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr

08004d28 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b082      	sub	sp, #8
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68da      	ldr	r2, [r3, #12]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d3e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2220      	movs	r2, #32
 8004d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3708      	adds	r7, #8
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b084      	sub	sp, #16
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	2b22      	cmp	r3, #34	; 0x22
 8004d6c:	f040 8089 	bne.w	8004e82 <UART_Receive_IT+0x128>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d78:	d117      	bne.n	8004daa <UART_Receive_IT+0x50>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	691b      	ldr	r3, [r3, #16]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d113      	bne.n	8004daa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004d82:	2300      	movs	r3, #0
 8004d84:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d8a:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d98:	b29a      	uxth	r2, r3
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da2:	1c9a      	adds	r2, r3, #2
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	629a      	str	r2, [r3, #40]	; 0x28
 8004da8:	e026      	b.n	8004df8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dae:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8004db0:	2300      	movs	r3, #0
 8004db2:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dbc:	d007      	beq.n	8004dce <UART_Receive_IT+0x74>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d10a      	bne.n	8004ddc <UART_Receive_IT+0x82>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d106      	bne.n	8004ddc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	b2da      	uxtb	r2, r3
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	701a      	strb	r2, [r3, #0]
 8004dda:	e008      	b.n	8004dee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004de8:	b2da      	uxtb	r2, r3
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df2:	1c5a      	adds	r2, r3, #1
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	3b01      	subs	r3, #1
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	4619      	mov	r1, r3
 8004e06:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d138      	bne.n	8004e7e <UART_Receive_IT+0x124>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	68da      	ldr	r2, [r3, #12]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f022 0220 	bic.w	r2, r2, #32
 8004e1a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	68da      	ldr	r2, [r3, #12]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e2a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	695a      	ldr	r2, [r3, #20]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f022 0201 	bic.w	r2, r2, #1
 8004e3a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2220      	movs	r2, #32
 8004e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d10f      	bne.n	8004e6c <UART_Receive_IT+0x112>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	68da      	ldr	r2, [r3, #12]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f022 0210 	bic.w	r2, r2, #16
 8004e5a:	60da      	str	r2, [r3, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8004e64:	4611      	mov	r1, r2
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	4798      	blx	r3
 8004e6a:	e003      	b.n	8004e74 <UART_Receive_IT+0x11a>
      else
      {
       /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	4798      	blx	r3
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	e002      	b.n	8004e84 <UART_Receive_IT+0x12a>
    }
    return HAL_OK;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	e000      	b.n	8004e84 <UART_Receive_IT+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004e82:	2302      	movs	r3, #2
  }
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3710      	adds	r7, #16
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e90:	b09f      	sub	sp, #124	; 0x7c
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004ea0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ea2:	68d9      	ldr	r1, [r3, #12]
 8004ea4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	ea40 0301 	orr.w	r3, r0, r1
 8004eac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004eae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eb0:	689a      	ldr	r2, [r3, #8]
 8004eb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	431a      	orrs	r2, r3
 8004eb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eba:	695b      	ldr	r3, [r3, #20]
 8004ebc:	431a      	orrs	r2, r3
 8004ebe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ec0:	69db      	ldr	r3, [r3, #28]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004ec6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004ed0:	f021 010c 	bic.w	r1, r1, #12
 8004ed4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004eda:	430b      	orrs	r3, r1
 8004edc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ede:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	695b      	ldr	r3, [r3, #20]
 8004ee4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004ee8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eea:	6999      	ldr	r1, [r3, #24]
 8004eec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	ea40 0301 	orr.w	r3, r0, r1
 8004ef4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ef6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	4bc5      	ldr	r3, [pc, #788]	; (8005210 <UART_SetConfig+0x384>)
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d004      	beq.n	8004f0a <UART_SetConfig+0x7e>
 8004f00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	4bc3      	ldr	r3, [pc, #780]	; (8005214 <UART_SetConfig+0x388>)
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d103      	bne.n	8004f12 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f0a:	f7fe fba7 	bl	800365c <HAL_RCC_GetPCLK2Freq>
 8004f0e:	6778      	str	r0, [r7, #116]	; 0x74
 8004f10:	e002      	b.n	8004f18 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f12:	f7fe fb8f 	bl	8003634 <HAL_RCC_GetPCLK1Freq>
 8004f16:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f1a:	69db      	ldr	r3, [r3, #28]
 8004f1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f20:	f040 80b6 	bne.w	8005090 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f26:	461c      	mov	r4, r3
 8004f28:	f04f 0500 	mov.w	r5, #0
 8004f2c:	4622      	mov	r2, r4
 8004f2e:	462b      	mov	r3, r5
 8004f30:	1891      	adds	r1, r2, r2
 8004f32:	6439      	str	r1, [r7, #64]	; 0x40
 8004f34:	415b      	adcs	r3, r3
 8004f36:	647b      	str	r3, [r7, #68]	; 0x44
 8004f38:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004f3c:	1912      	adds	r2, r2, r4
 8004f3e:	eb45 0303 	adc.w	r3, r5, r3
 8004f42:	f04f 0000 	mov.w	r0, #0
 8004f46:	f04f 0100 	mov.w	r1, #0
 8004f4a:	00d9      	lsls	r1, r3, #3
 8004f4c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004f50:	00d0      	lsls	r0, r2, #3
 8004f52:	4602      	mov	r2, r0
 8004f54:	460b      	mov	r3, r1
 8004f56:	1911      	adds	r1, r2, r4
 8004f58:	6639      	str	r1, [r7, #96]	; 0x60
 8004f5a:	416b      	adcs	r3, r5
 8004f5c:	667b      	str	r3, [r7, #100]	; 0x64
 8004f5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	461a      	mov	r2, r3
 8004f64:	f04f 0300 	mov.w	r3, #0
 8004f68:	1891      	adds	r1, r2, r2
 8004f6a:	63b9      	str	r1, [r7, #56]	; 0x38
 8004f6c:	415b      	adcs	r3, r3
 8004f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004f74:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004f78:	f7fb f92c 	bl	80001d4 <__aeabi_uldivmod>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	460b      	mov	r3, r1
 8004f80:	4ba5      	ldr	r3, [pc, #660]	; (8005218 <UART_SetConfig+0x38c>)
 8004f82:	fba3 2302 	umull	r2, r3, r3, r2
 8004f86:	095b      	lsrs	r3, r3, #5
 8004f88:	011e      	lsls	r6, r3, #4
 8004f8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f8c:	461c      	mov	r4, r3
 8004f8e:	f04f 0500 	mov.w	r5, #0
 8004f92:	4622      	mov	r2, r4
 8004f94:	462b      	mov	r3, r5
 8004f96:	1891      	adds	r1, r2, r2
 8004f98:	6339      	str	r1, [r7, #48]	; 0x30
 8004f9a:	415b      	adcs	r3, r3
 8004f9c:	637b      	str	r3, [r7, #52]	; 0x34
 8004f9e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004fa2:	1912      	adds	r2, r2, r4
 8004fa4:	eb45 0303 	adc.w	r3, r5, r3
 8004fa8:	f04f 0000 	mov.w	r0, #0
 8004fac:	f04f 0100 	mov.w	r1, #0
 8004fb0:	00d9      	lsls	r1, r3, #3
 8004fb2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004fb6:	00d0      	lsls	r0, r2, #3
 8004fb8:	4602      	mov	r2, r0
 8004fba:	460b      	mov	r3, r1
 8004fbc:	1911      	adds	r1, r2, r4
 8004fbe:	65b9      	str	r1, [r7, #88]	; 0x58
 8004fc0:	416b      	adcs	r3, r5
 8004fc2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004fc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	461a      	mov	r2, r3
 8004fca:	f04f 0300 	mov.w	r3, #0
 8004fce:	1891      	adds	r1, r2, r2
 8004fd0:	62b9      	str	r1, [r7, #40]	; 0x28
 8004fd2:	415b      	adcs	r3, r3
 8004fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fd6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004fda:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004fde:	f7fb f8f9 	bl	80001d4 <__aeabi_uldivmod>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	460b      	mov	r3, r1
 8004fe6:	4b8c      	ldr	r3, [pc, #560]	; (8005218 <UART_SetConfig+0x38c>)
 8004fe8:	fba3 1302 	umull	r1, r3, r3, r2
 8004fec:	095b      	lsrs	r3, r3, #5
 8004fee:	2164      	movs	r1, #100	; 0x64
 8004ff0:	fb01 f303 	mul.w	r3, r1, r3
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	00db      	lsls	r3, r3, #3
 8004ff8:	3332      	adds	r3, #50	; 0x32
 8004ffa:	4a87      	ldr	r2, [pc, #540]	; (8005218 <UART_SetConfig+0x38c>)
 8004ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8005000:	095b      	lsrs	r3, r3, #5
 8005002:	005b      	lsls	r3, r3, #1
 8005004:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005008:	441e      	add	r6, r3
 800500a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800500c:	4618      	mov	r0, r3
 800500e:	f04f 0100 	mov.w	r1, #0
 8005012:	4602      	mov	r2, r0
 8005014:	460b      	mov	r3, r1
 8005016:	1894      	adds	r4, r2, r2
 8005018:	623c      	str	r4, [r7, #32]
 800501a:	415b      	adcs	r3, r3
 800501c:	627b      	str	r3, [r7, #36]	; 0x24
 800501e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005022:	1812      	adds	r2, r2, r0
 8005024:	eb41 0303 	adc.w	r3, r1, r3
 8005028:	f04f 0400 	mov.w	r4, #0
 800502c:	f04f 0500 	mov.w	r5, #0
 8005030:	00dd      	lsls	r5, r3, #3
 8005032:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005036:	00d4      	lsls	r4, r2, #3
 8005038:	4622      	mov	r2, r4
 800503a:	462b      	mov	r3, r5
 800503c:	1814      	adds	r4, r2, r0
 800503e:	653c      	str	r4, [r7, #80]	; 0x50
 8005040:	414b      	adcs	r3, r1
 8005042:	657b      	str	r3, [r7, #84]	; 0x54
 8005044:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	461a      	mov	r2, r3
 800504a:	f04f 0300 	mov.w	r3, #0
 800504e:	1891      	adds	r1, r2, r2
 8005050:	61b9      	str	r1, [r7, #24]
 8005052:	415b      	adcs	r3, r3
 8005054:	61fb      	str	r3, [r7, #28]
 8005056:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800505a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800505e:	f7fb f8b9 	bl	80001d4 <__aeabi_uldivmod>
 8005062:	4602      	mov	r2, r0
 8005064:	460b      	mov	r3, r1
 8005066:	4b6c      	ldr	r3, [pc, #432]	; (8005218 <UART_SetConfig+0x38c>)
 8005068:	fba3 1302 	umull	r1, r3, r3, r2
 800506c:	095b      	lsrs	r3, r3, #5
 800506e:	2164      	movs	r1, #100	; 0x64
 8005070:	fb01 f303 	mul.w	r3, r1, r3
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	00db      	lsls	r3, r3, #3
 8005078:	3332      	adds	r3, #50	; 0x32
 800507a:	4a67      	ldr	r2, [pc, #412]	; (8005218 <UART_SetConfig+0x38c>)
 800507c:	fba2 2303 	umull	r2, r3, r2, r3
 8005080:	095b      	lsrs	r3, r3, #5
 8005082:	f003 0207 	and.w	r2, r3, #7
 8005086:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4432      	add	r2, r6
 800508c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800508e:	e0b9      	b.n	8005204 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005090:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005092:	461c      	mov	r4, r3
 8005094:	f04f 0500 	mov.w	r5, #0
 8005098:	4622      	mov	r2, r4
 800509a:	462b      	mov	r3, r5
 800509c:	1891      	adds	r1, r2, r2
 800509e:	6139      	str	r1, [r7, #16]
 80050a0:	415b      	adcs	r3, r3
 80050a2:	617b      	str	r3, [r7, #20]
 80050a4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80050a8:	1912      	adds	r2, r2, r4
 80050aa:	eb45 0303 	adc.w	r3, r5, r3
 80050ae:	f04f 0000 	mov.w	r0, #0
 80050b2:	f04f 0100 	mov.w	r1, #0
 80050b6:	00d9      	lsls	r1, r3, #3
 80050b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80050bc:	00d0      	lsls	r0, r2, #3
 80050be:	4602      	mov	r2, r0
 80050c0:	460b      	mov	r3, r1
 80050c2:	eb12 0804 	adds.w	r8, r2, r4
 80050c6:	eb43 0905 	adc.w	r9, r3, r5
 80050ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	4618      	mov	r0, r3
 80050d0:	f04f 0100 	mov.w	r1, #0
 80050d4:	f04f 0200 	mov.w	r2, #0
 80050d8:	f04f 0300 	mov.w	r3, #0
 80050dc:	008b      	lsls	r3, r1, #2
 80050de:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80050e2:	0082      	lsls	r2, r0, #2
 80050e4:	4640      	mov	r0, r8
 80050e6:	4649      	mov	r1, r9
 80050e8:	f7fb f874 	bl	80001d4 <__aeabi_uldivmod>
 80050ec:	4602      	mov	r2, r0
 80050ee:	460b      	mov	r3, r1
 80050f0:	4b49      	ldr	r3, [pc, #292]	; (8005218 <UART_SetConfig+0x38c>)
 80050f2:	fba3 2302 	umull	r2, r3, r3, r2
 80050f6:	095b      	lsrs	r3, r3, #5
 80050f8:	011e      	lsls	r6, r3, #4
 80050fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050fc:	4618      	mov	r0, r3
 80050fe:	f04f 0100 	mov.w	r1, #0
 8005102:	4602      	mov	r2, r0
 8005104:	460b      	mov	r3, r1
 8005106:	1894      	adds	r4, r2, r2
 8005108:	60bc      	str	r4, [r7, #8]
 800510a:	415b      	adcs	r3, r3
 800510c:	60fb      	str	r3, [r7, #12]
 800510e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005112:	1812      	adds	r2, r2, r0
 8005114:	eb41 0303 	adc.w	r3, r1, r3
 8005118:	f04f 0400 	mov.w	r4, #0
 800511c:	f04f 0500 	mov.w	r5, #0
 8005120:	00dd      	lsls	r5, r3, #3
 8005122:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005126:	00d4      	lsls	r4, r2, #3
 8005128:	4622      	mov	r2, r4
 800512a:	462b      	mov	r3, r5
 800512c:	1814      	adds	r4, r2, r0
 800512e:	64bc      	str	r4, [r7, #72]	; 0x48
 8005130:	414b      	adcs	r3, r1
 8005132:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005134:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	4618      	mov	r0, r3
 800513a:	f04f 0100 	mov.w	r1, #0
 800513e:	f04f 0200 	mov.w	r2, #0
 8005142:	f04f 0300 	mov.w	r3, #0
 8005146:	008b      	lsls	r3, r1, #2
 8005148:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800514c:	0082      	lsls	r2, r0, #2
 800514e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005152:	f7fb f83f 	bl	80001d4 <__aeabi_uldivmod>
 8005156:	4602      	mov	r2, r0
 8005158:	460b      	mov	r3, r1
 800515a:	4b2f      	ldr	r3, [pc, #188]	; (8005218 <UART_SetConfig+0x38c>)
 800515c:	fba3 1302 	umull	r1, r3, r3, r2
 8005160:	095b      	lsrs	r3, r3, #5
 8005162:	2164      	movs	r1, #100	; 0x64
 8005164:	fb01 f303 	mul.w	r3, r1, r3
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	011b      	lsls	r3, r3, #4
 800516c:	3332      	adds	r3, #50	; 0x32
 800516e:	4a2a      	ldr	r2, [pc, #168]	; (8005218 <UART_SetConfig+0x38c>)
 8005170:	fba2 2303 	umull	r2, r3, r2, r3
 8005174:	095b      	lsrs	r3, r3, #5
 8005176:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800517a:	441e      	add	r6, r3
 800517c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800517e:	4618      	mov	r0, r3
 8005180:	f04f 0100 	mov.w	r1, #0
 8005184:	4602      	mov	r2, r0
 8005186:	460b      	mov	r3, r1
 8005188:	1894      	adds	r4, r2, r2
 800518a:	603c      	str	r4, [r7, #0]
 800518c:	415b      	adcs	r3, r3
 800518e:	607b      	str	r3, [r7, #4]
 8005190:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005194:	1812      	adds	r2, r2, r0
 8005196:	eb41 0303 	adc.w	r3, r1, r3
 800519a:	f04f 0400 	mov.w	r4, #0
 800519e:	f04f 0500 	mov.w	r5, #0
 80051a2:	00dd      	lsls	r5, r3, #3
 80051a4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80051a8:	00d4      	lsls	r4, r2, #3
 80051aa:	4622      	mov	r2, r4
 80051ac:	462b      	mov	r3, r5
 80051ae:	eb12 0a00 	adds.w	sl, r2, r0
 80051b2:	eb43 0b01 	adc.w	fp, r3, r1
 80051b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	4618      	mov	r0, r3
 80051bc:	f04f 0100 	mov.w	r1, #0
 80051c0:	f04f 0200 	mov.w	r2, #0
 80051c4:	f04f 0300 	mov.w	r3, #0
 80051c8:	008b      	lsls	r3, r1, #2
 80051ca:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80051ce:	0082      	lsls	r2, r0, #2
 80051d0:	4650      	mov	r0, sl
 80051d2:	4659      	mov	r1, fp
 80051d4:	f7fa fffe 	bl	80001d4 <__aeabi_uldivmod>
 80051d8:	4602      	mov	r2, r0
 80051da:	460b      	mov	r3, r1
 80051dc:	4b0e      	ldr	r3, [pc, #56]	; (8005218 <UART_SetConfig+0x38c>)
 80051de:	fba3 1302 	umull	r1, r3, r3, r2
 80051e2:	095b      	lsrs	r3, r3, #5
 80051e4:	2164      	movs	r1, #100	; 0x64
 80051e6:	fb01 f303 	mul.w	r3, r1, r3
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	011b      	lsls	r3, r3, #4
 80051ee:	3332      	adds	r3, #50	; 0x32
 80051f0:	4a09      	ldr	r2, [pc, #36]	; (8005218 <UART_SetConfig+0x38c>)
 80051f2:	fba2 2303 	umull	r2, r3, r2, r3
 80051f6:	095b      	lsrs	r3, r3, #5
 80051f8:	f003 020f 	and.w	r2, r3, #15
 80051fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4432      	add	r2, r6
 8005202:	609a      	str	r2, [r3, #8]
}
 8005204:	bf00      	nop
 8005206:	377c      	adds	r7, #124	; 0x7c
 8005208:	46bd      	mov	sp, r7
 800520a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800520e:	bf00      	nop
 8005210:	40011000 	.word	0x40011000
 8005214:	40011400 	.word	0x40011400
 8005218:	51eb851f 	.word	0x51eb851f

0800521c <__libc_init_array>:
 800521c:	b570      	push	{r4, r5, r6, lr}
 800521e:	4d0d      	ldr	r5, [pc, #52]	; (8005254 <__libc_init_array+0x38>)
 8005220:	4c0d      	ldr	r4, [pc, #52]	; (8005258 <__libc_init_array+0x3c>)
 8005222:	1b64      	subs	r4, r4, r5
 8005224:	10a4      	asrs	r4, r4, #2
 8005226:	2600      	movs	r6, #0
 8005228:	42a6      	cmp	r6, r4
 800522a:	d109      	bne.n	8005240 <__libc_init_array+0x24>
 800522c:	4d0b      	ldr	r5, [pc, #44]	; (800525c <__libc_init_array+0x40>)
 800522e:	4c0c      	ldr	r4, [pc, #48]	; (8005260 <__libc_init_array+0x44>)
 8005230:	f000 f82e 	bl	8005290 <_init>
 8005234:	1b64      	subs	r4, r4, r5
 8005236:	10a4      	asrs	r4, r4, #2
 8005238:	2600      	movs	r6, #0
 800523a:	42a6      	cmp	r6, r4
 800523c:	d105      	bne.n	800524a <__libc_init_array+0x2e>
 800523e:	bd70      	pop	{r4, r5, r6, pc}
 8005240:	f855 3b04 	ldr.w	r3, [r5], #4
 8005244:	4798      	blx	r3
 8005246:	3601      	adds	r6, #1
 8005248:	e7ee      	b.n	8005228 <__libc_init_array+0xc>
 800524a:	f855 3b04 	ldr.w	r3, [r5], #4
 800524e:	4798      	blx	r3
 8005250:	3601      	adds	r6, #1
 8005252:	e7f2      	b.n	800523a <__libc_init_array+0x1e>
 8005254:	080053b8 	.word	0x080053b8
 8005258:	080053b8 	.word	0x080053b8
 800525c:	080053b8 	.word	0x080053b8
 8005260:	080053c0 	.word	0x080053c0

08005264 <memcpy>:
 8005264:	440a      	add	r2, r1
 8005266:	4291      	cmp	r1, r2
 8005268:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800526c:	d100      	bne.n	8005270 <memcpy+0xc>
 800526e:	4770      	bx	lr
 8005270:	b510      	push	{r4, lr}
 8005272:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005276:	f803 4f01 	strb.w	r4, [r3, #1]!
 800527a:	4291      	cmp	r1, r2
 800527c:	d1f9      	bne.n	8005272 <memcpy+0xe>
 800527e:	bd10      	pop	{r4, pc}

08005280 <memset>:
 8005280:	4402      	add	r2, r0
 8005282:	4603      	mov	r3, r0
 8005284:	4293      	cmp	r3, r2
 8005286:	d100      	bne.n	800528a <memset+0xa>
 8005288:	4770      	bx	lr
 800528a:	f803 1b01 	strb.w	r1, [r3], #1
 800528e:	e7f9      	b.n	8005284 <memset+0x4>

08005290 <_init>:
 8005290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005292:	bf00      	nop
 8005294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005296:	bc08      	pop	{r3}
 8005298:	469e      	mov	lr, r3
 800529a:	4770      	bx	lr

0800529c <_fini>:
 800529c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800529e:	bf00      	nop
 80052a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052a2:	bc08      	pop	{r3}
 80052a4:	469e      	mov	lr, r3
 80052a6:	4770      	bx	lr
